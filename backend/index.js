(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.1.0";
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format2) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement5(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement18(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement10(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement10(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement10(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext11(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef83(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo10(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext12(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState43(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef75(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect63(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect9(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect10(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback85(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo23(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle10(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue3(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId3() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement10(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement10(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement10(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement5.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement18.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children7 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children7;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext11;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef83;
          exports.isValidElement = isValidElement10;
          exports.lazy = lazy;
          exports.memo = memo10;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback85;
          exports.useContext = useContext12;
          exports.useDebugValue = useDebugValue3;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect63;
          exports.useId = useId3;
          exports.useImperativeHandle = useImperativeHandle10;
          exports.useInsertionEffect = useInsertionEffect9;
          exports.useLayoutEffect = useLayoutEffect10;
          exports.useMemo = useMemo23;
          exports.useReducer = useReducer;
          exports.useRef = useRef75;
          exports.useState = useState43;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last3 = heap.pop();
            if (last3 !== first) {
              heap[0] = last3;
              siftDown(heap, last3, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index = i;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left3 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right3 = heap[rightIndex];
              if (compare(left3, node2) < 0) {
                if (rightIndex < length2 && compare(right3, left3) < 0) {
                  heap[index] = right3;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left3;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right3, node2) < 0) {
                heap[index] = right3;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React224 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React224.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format2) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment16 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef2 = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties2.hasOwnProperty(name) ? properties2[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties2 = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize2 = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties2[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef2:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef2:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment16:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || node2.value != value) {
                  node2.value = toString(value);
                }
              } else if (node2.value !== toString(value)) {
                node2.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (type !== "number" || getActiveElement(node2.ownerDocument) !== node2) {
              if (value == null) {
                node2.defaultValue = toString(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString(value)) {
                node2.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React224.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty5 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty5) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_3, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles4) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles4) {
                if (!styles4.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles4[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles4) {
            var style4 = node2.style;
            for (var styleName in styles4) {
              if (!styles4.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles4[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles4[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style4.setProperty(styleName, styleValue);
              } else {
                style4[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles4) {
            var expanded = {};
            for (var key in styles4) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, a, b) {
            if (isInsideEventHandler) {
              return fn2(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot | 0;
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn2) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn2();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn2) {
            _attemptSynchronousHydration = fn2;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn2) {
            getCurrentUpdatePriority$1 = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = new Map();
          var queuedPointerCaptures = new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled2() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive: passive2
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              passive: passive2
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end2;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end2 = 1; end2 <= minEnd; end2++) {
              if (startValue[startLength - end2] !== endValue[endLength - end2]) {
                break;
              }
            }
            var sliceTail = end2 > 1 ? 1 - end2 : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset2) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node: node2,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end2 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start2 = length2 + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end2 = length2 + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length2 += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start2 = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end2 = length2;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start2 === -1 || end2 === -1) {
              return null;
            }
            return {
              start: start2,
              end: end2
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection.extend && start2 > end2) {
              var temp = end2;
              end2 = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start2);
            var endMarker = getNodeForCharacterOffset(node2, end2);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end2) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start2 = offsets.start;
            var end2 = offsets.end;
            if (end2 === void 0) {
              end2 = start2;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start2;
              input.selectionEnd = Math.min(end2, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style3 = {};
          if (canUseDOM) {
            style3 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style3) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument2 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument2 !== null) {
                if (!ownerDocument2[listeningMarker]) {
                  ownerDocument2[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument2);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common2 = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement5(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled2();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement5(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style4 = instance.style;
            if (typeof style4.setProperty === "function") {
              style4.setProperty("display", "none", "important");
            } else {
              style4.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor2, value, fiber) {
            index++;
            valueStack[index] = cursor2.current;
            {
              fiberStack[index] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node2.type;
                    if (isContextProvider(Component2)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = new Map();
            var didWarnAboutLegacyContext = new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = new Map();
            };
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps2 = Component2.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var interleavedQueues = null;
          function pushInterleavedQueue(queue) {
            if (interleavedQueues === null) {
              interleavedQueues = [queue];
            } else {
              interleavedQueues.push(queue);
            }
          }
          function hasInterleavedUpdates() {
            return interleavedQueues !== null;
          }
          function enqueueInterleavedUpdates() {
            if (interleavedQueues !== null) {
              for (var i = 0; i < interleavedQueues.length; i++) {
                var queue = interleavedQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              interleavedQueues = null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isInterleavedUpdate(fiber)) {
              var interleaved = sharedQueue.interleaved;
              if (interleaved === null) {
                update.next = update;
                pushInterleavedQueue(sharedQueue);
              } else {
                update.next = interleaved.next;
                interleaved.next = update;
              }
              sharedQueue.interleaved = update;
            } else {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
            }
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect4 = effects[i];
                var callback = effect4.callback;
                if (callback !== null) {
                  effect4.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React224.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = new Set();
            didWarnAboutUninitializedState = new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
            didWarnAboutDirectlyAssigningPropsToState = new Set();
            didWarnAboutUndefinedDerivedState = new Set();
            didWarnAboutContextTypeAndContextTypes = new Set();
            didWarnAboutInvalidateContextType = new Set();
            var didWarnOnInvalidCallback = new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root2 !== null) {
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root2 !== null) {
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root2 !== null) {
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow2 = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow2;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow2 = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow2;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment16) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment16) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion7 = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect4 = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect4.next = effect4;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect4.next = effect4;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect4;
                effect4.next = firstEffect;
                componentUpdateQueue.lastEffect = effect4;
              }
            }
            return effect4;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion7, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion7, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              enqueueUpdate$1(fiber, queue, update);
              var eventTime = requestEventTime();
              var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root2 !== null) {
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              enqueueUpdate$1(fiber, queue, update);
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var eventTime = requestEventTime();
              var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root2 !== null) {
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function enqueueUpdate$1(fiber, queue, update, lane) {
            if (isInterleavedUpdate(fiber)) {
              var interleaved = queue.interleaved;
              if (interleaved === null) {
                update.next = update;
                pushInterleavedQueue(queue);
              } else {
                update.next = interleaved.next;
                interleaved.next = update;
              }
              queue.interleaved = update;
            } else {
              var pending = queue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              queue.pending = update;
            }
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef2 || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(value);
                  return;
                }
              }
            }
            renderDidError(value);
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent;
          var updateHostText;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef2:
              case Fragment16:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
                  warnIfUnhydratedTailNodes(workInProgress2);
                  resetHydrationState();
                  workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
                  return workInProgress2;
                }
                if (nextState !== null && nextState.dehydrated !== null) {
                  var _wasHydrated3 = popHydrationState(workInProgress2);
                  if (current2 === null) {
                    if (!_wasHydrated3) {
                      throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                    }
                    prepareToHydrateHostSuspenseInstance(workInProgress2);
                    bubbleProperties(workInProgress2);
                    {
                      if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                        var isTimedOutSuspense = nextState !== null;
                        if (isTimedOutSuspense) {
                          var primaryChildFragment = workInProgress2.child;
                          if (primaryChildFragment !== null) {
                            workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                          }
                        }
                      }
                    }
                    return null;
                  } else {
                    resetHydrationState();
                    if ((workInProgress2.flags & DidCapture) === NoFlags) {
                      workInProgress2.memoizedState = null;
                    }
                    workInProgress2.flags |= Update;
                    bubbleProperties(workInProgress2);
                    {
                      if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                        var _isTimedOutSuspense = nextState !== null;
                        if (_isTimedOutSuspense) {
                          var _primaryChildFragment = workInProgress2.child;
                          if (_primaryChildFragment !== null) {
                            workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                          }
                        }
                      }
                    }
                    return null;
                  }
                }
                upgradeHydrationErrorsToRecoverable();
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  popHydrationState(workInProgress2);
                } else {
                  var _prevState = current2.memoizedState;
                  prevDidTimeout = _prevState !== null;
                }
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var _primaryChildFragment2 = workInProgress2.child;
                      if (_primaryChildFragment2 !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState2 = current2.memoizedState;
                  var prevIsHidden = _prevState2 !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              return workInProgress2.child;
            }
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef$1(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValue(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef$1(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.");
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.");
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent$1(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef$1(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText$1(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef2: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component2));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component2, resolveDefaultProps(Component2.type, resolvedProps), renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  if (!didSuspend) {
                    return updateDehydratedSuspenseComponent(current2, workInProgress2, _dehydrated, prevState, renderLanes2);
                  } else if (workInProgress2.flags & ForceClientRender) {
                    workInProgress2.flags &= ~ForceClientRender;
                    return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                  } else if (workInProgress2.memoizedState !== null) {
                    workInProgress2.child = current2.child;
                    workInProgress2.flags |= DidCapture;
                    return null;
                  } else {
                    var _nextPrimaryChildren = nextProps.children;
                    var _nextFallbackChildren = nextProps.fallback;
                    var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                    var _primaryChildFragment2 = workInProgress2.child;
                    _primaryChildFragment2.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                    workInProgress2.memoizedState = SUSPENDED_MARKER;
                    return fallbackChildFragment;
                  }
                }
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, suspenseInstance, suspenseState, renderLanes2) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."));
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  scheduleUpdateOnFiber(current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var nextProps = workInProgress2.pendingProps;
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent$1(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText$1(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef2: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment16:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  var destroy = effect4.destroy;
                  effect4.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect4.create;
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect4.destroy = create();
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect4.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect4.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect4.tag & Insertion7) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect4 = firstEffect;
                      do {
                        var _effect = effect4, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion7) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect4 = effect4.next;
                      } while (effect4 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (deletedFiber.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion7 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion7 | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(child, root2, committedLanes);
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              return null;
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
            return root2;
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function isInterleavedUpdate(fiber, lane) {
            return (workInProgressRoot !== null || hasInterleavedUpdates()) && (fiber.mode & ConcurrentMode) !== NoMode && (executionContext & RenderContext) === NoContext;
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if (executionContext === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn2, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn2, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn2(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync3(fn2) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn2) {
                return fn2();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            enqueueInterleavedUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                onRecoverableError(recoverableError);
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef2:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef2 && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef2: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync3(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync3(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              new Map([[nonExtensibleObject, null]]);
              new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef2;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef2:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef2;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment16, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {};
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.1.0";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            var root2 = scheduleUpdateOnFiber(current$1, lane, eventTime);
            if (root2 !== null) {
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot:
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              case SuspenseComponent:
                var eventTime = requestEventTime();
                flushSync3(function() {
                  return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync3(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync3();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync3(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync3(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync3);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn2) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync3(fn2);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment16 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment16;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment16 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment16;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order22 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order22.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from2 = Object(arguments[s]);
          for (var key in from2) {
            if (hasOwnProperty2.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from2, symbols[i])) {
                to[symbols[i]] = from2[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is2();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement10, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement10(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement10(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is2();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React224 = require_react();
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React224.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement10(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement10(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement10(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement10(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment16 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment16;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/@shren/typed-event-emitter/dist/index.js
  var require_dist = __commonJS({
    "node_modules/@shren/typed-event-emitter/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TypedEventEmitter = exports.$AnyEventType = void 0;
      exports.$AnyEventType = Symbol("__TypedEventListener_AnyEventType");
      var TypedEventEmitter2 = class {
        constructor() {
          this._listeners = { [exports.$AnyEventType]: [] };
        }
        get listeners() {
          return this._listeners;
        }
        getListeners(eventName) {
          if (!(eventName in this._listeners))
            this._listeners[eventName] = [];
          return this._listeners[eventName];
        }
        on(eventName, listener) {
          if (this.getListeners(eventName).indexOf(listener) === -1)
            this.getListeners(eventName).push(listener);
        }
        once(eventName, listener) {
          const listenerWithOff = (arg, emitter) => {
            const returnValue = listener(arg, emitter);
            this.off(eventName, listenerWithOff);
            return returnValue;
          };
          this.on(eventName, listenerWithOff);
        }
        onAny(listener) {
          this._listeners[exports.$AnyEventType].push(listener);
        }
        off(eventName, listener) {
          const i = this.getListeners(eventName).indexOf(listener);
          if (i !== -1)
            this.getListeners(eventName).splice(i, 1);
        }
        offAny(listener) {
          const i = this._listeners[exports.$AnyEventType].indexOf(listener);
          if (i !== -1)
            this._listeners[exports.$AnyEventType].splice(i, 1);
        }
        async emit(eventName, eventData, options) {
          var _a2;
          let listeners = this.getListeners(eventName);
          let anyListeners = (options === null || options === void 0 ? void 0 : options.excludeAny) ? [] : this._listeners[exports.$AnyEventType];
          if (!listeners.length && !anyListeners.length)
            return [];
          if ((_a2 = options === null || options === void 0 ? void 0 : options.exclude) === null || _a2 === void 0 ? void 0 : _a2.length) {
            const { exclude } = options;
            listeners = listeners.filter((l) => exclude.indexOf(l) === -1);
            anyListeners = anyListeners.filter((l) => exclude.indexOf(l) === -1);
          }
          return Promise.all([...listeners.map((f) => f(eventData, this)), ...anyListeners.map((f) => f(eventName, eventData, this))]);
        }
        async emitSerial(eventName, eventData, options) {
          var _a2;
          let listeners = this.getListeners(eventName);
          let anyListeners = (options === null || options === void 0 ? void 0 : options.excludeAny) ? [] : this._listeners[exports.$AnyEventType];
          if (!listeners.length && !anyListeners.length)
            return [];
          if ((_a2 = options === null || options === void 0 ? void 0 : options.exclude) === null || _a2 === void 0 ? void 0 : _a2.length) {
            const { exclude } = options;
            listeners = listeners.filter((l) => exclude.indexOf(l) === -1);
            anyListeners = anyListeners.filter((l) => exclude.indexOf(l) === -1);
          }
          const returnValues = [];
          for (let i = 0; i < listeners.length; i++) {
            const listener = listeners[i];
            returnValues[i] = await listener(eventData, this);
          }
          for (let i = 0; i < anyListeners.length; i++) {
            const listener = anyListeners[i];
            returnValues[listeners.length + i] = await listener(eventName, eventData, this);
          }
          return returnValues;
        }
        emitSync(eventName, eventData, options) {
          var _a2;
          let listeners = this.getListeners(eventName);
          let anyListeners = (options === null || options === void 0 ? void 0 : options.excludeAny) ? [] : this._listeners[exports.$AnyEventType];
          if (!listeners.length && !anyListeners.length)
            return [];
          if ((_a2 = options === null || options === void 0 ? void 0 : options.exclude) === null || _a2 === void 0 ? void 0 : _a2.length) {
            const { exclude } = options;
            listeners = listeners.filter((l) => exclude.indexOf(l) === -1);
            anyListeners = anyListeners.filter((l) => exclude.indexOf(l) === -1);
          }
          return [...listeners.map((f) => f(eventData, this)), ...anyListeners.map((f) => f(eventName, eventData, this))];
        }
        offAll(eventName) {
          if (eventName) {
            this._listeners[eventName] = [];
          } else {
            this._listeners = { [exports.$AnyEventType]: [] };
          }
        }
        listenerCount(eventName) {
          const anyListenerCount = this._listeners[exports.$AnyEventType].length;
          if (!(eventName in this._listeners))
            return anyListenerCount;
          return this._listeners[eventName].length + anyListenerCount;
        }
      };
      exports.TypedEventEmitter = TypedEventEmitter2;
      exports.default = TypedEventEmitter2;
    }
  });

  // src/BackendUI.tsx
  var React223 = __toModule(require_react());
  var ReactDOM5 = __toModule(require_client());

  // node_modules/@mui/material/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@mui/material/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@mui/material/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // node_modules/@mui/material/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@mui/material/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // node_modules/@mui/material/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@mui/material/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@mui/material/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var import_react5 = __toModule(require_react());

  // node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js
  function memoize(fn2) {
    var cache2 = Object.create(null);
    return function(arg) {
      if (cache2[arg] === void 0)
        cache2[arg] = fn2(arg);
      return cache2[arg];
    };
  }
  var emotion_memoize_browser_esm_default = memoize;

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.browser.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  });
  var emotion_is_prop_valid_browser_esm_default = isPropValid;

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React3 = __toModule(require_react());
  var import_react3 = __toModule(require_react());

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var React2 = __toModule(require_react());
  var import_react2 = __toModule(require_react());

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (true) {
        var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
      }
      if (this.isSpeedy) {
        var sheet = sheetForTag(tag);
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e) {
          if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e);
          }
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush() {
      this.tags.forEach(function(tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
      if (true) {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();

  // node_modules/stylis/src/Enum.js
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";

  // node_modules/stylis/src/Utility.js
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3);
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end2) {
    return value.slice(begin, end2);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }

  // node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end2) {
    return substr(characters, begin, end2);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset2 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference2 = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && characters2.charCodeAt(length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset2:
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference2 = ruleset(characters2, root, parent, index, offset2, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset2 === 0)
                  parse(characters2, root, reference2, reference2, props, rulesets, length2, points, children);
                else
                  switch (atrule) {
                    case 100:
                    case 109:
                    case 115:
                      parse(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                  }
          }
          index = offset2 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index, offset2, rules, points, type, props, children, length2) {
    var post = offset2 - 1;
    var rule = offset2 === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset2 === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }

  // node_modules/stylis/src/Prefixer.js
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index, children, callback) || "";
      return output;
    };
  }
  function prefixer(element, index, children, callback) {
    if (element.length > -1) {
      if (!element.return)
        switch (element.type) {
          case DECLARATION:
            element.return = prefix(element.value, element.length);
            break;
          case KEYFRAMES:
            return serialize([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
          case RULESET:
            if (element.length)
              return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] })], callback);
                  case "::placeholder":
                    return serialize([
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] })
                    ], callback);
                }
                return "";
              });
        }
    }
  }

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var last = function last2(arr) {
    return arr.length ? arr[arr.length - 1] : null;
  };
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice(begin, position);
  };
  var toRules = function toRules2(parsed, points) {
    var index = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index] = 1;
          }
          parsed[index] += identifierWithPointTracking(position - 1, points, index);
          break;
        case 2:
          parsed[index] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index] = peek() === 58 ? "&\f" : "";
            points[index] = parsed[index].length;
            break;
          }
        default:
          parsed[index] += from(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || element.length < 1) {
      return;
    }
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i = 0, k = 0; i < rules.length; i++) {
      for (var j = 0; j < parentRules.length; j++, k++) {
        element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element) {
    return !!element && element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache2) {
    return function(element, index, children) {
      if (element.type !== "rule")
        return;
      var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses && cache2.compat !== true) {
        var prevElement = index > 0 ? children[index - 1] : null;
        if (prevElement && isIgnoringComment(last(prevElement.children))) {
          return;
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
    for (var i = index - 1; i >= 0; i--) {
      if (!isImportRule(children[i])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
    if (!isImportRule(element)) {
      return;
    }
    if (element.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element);
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (!key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node2) {
        var dataEmotionAttribute = node2.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node2);
        node2.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    if (true) {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    {
      container = options.container || document.head;
      Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }
        nodesToHydrate.push(node2);
      });
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (true) {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache2.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [stringify, true ? function(element) {
        if (!element.root) {
          if (element["return"]) {
            currentSheet.insert(element["return"]);
          } else if (element.value && element.type !== COMMENT) {
            currentSheet.insert(element.value + "{}");
          }
        }
      } : rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles4) {
        return serialize(compile(styles4), serializer);
      };
      _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        if (serialized.map !== void 0) {
          currentSheet = {
            insert: function insert2(rule) {
              sheet.insert(rule + serialized.map);
            }
          };
        }
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache2.inserted[serialized.name] = true;
        }
      };
    }
    var cache2 = {
      key,
      sheet: new StyleSheet({
        key,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache2.sheet.hydrate(nodesToHydrate);
    return cache2;
  };
  var emotion_cache_browser_esm_default = createCache;

  // node_modules/@emotion/react/dist/emotion-element-cbed451f.browser.esm.js
  var React = __toModule(require_react());
  var import_react = __toModule(require_react());

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser = true;
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles = function registerStyles2(cache2, serialized, isStringTag) {
    var className = cache2.key + "-" + serialized.name;
    if ((isStringTag === false || isBrowser === false) && cache2.registered[className] === void 0) {
      cache2.registered[className] = serialized.styles;
    }
  };
  var insertStyles = function insertStyles2(cache2, serialized, isStringTag) {
    registerStyles(cache2, serialized, isStringTag);
    var className = cache2.key + "-" + serialized.name;
    if (cache2.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        var maybeStyles = cache2.insert(serialized === current ? "." + className : "", current, cache2.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // node_modules/@emotion/hash/dist/hash.browser.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= k >>> 24;
      h = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var hash_browser_esm_default = murmur2;

  // node_modules/@emotion/unitless/dist/unitless.browser.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_browser_esm_default = unitlessKeys;

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match2, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitless_browser_esm_default[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  if (true) {
    contentValuePattern = /(var|attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    contentValues = ["normal", "none", "initial", "inherit", "unset"];
    oldProcessStyleValue = processStyleValue;
    msPattern = /^-ms-/;
    hyphenPattern = /-(.)/g;
    hyphenatedCache = {};
    processStyleValue = function processStyleValue3(key, value) {
      if (key === "content") {
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
          throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
        }
      }
      var processed = oldProcessStyleValue(key, value);
      if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
          return _char.toUpperCase();
        }) + "?");
      }
      return processed;
    };
  }
  var contentValuePattern;
  var contentValues;
  var oldProcessStyleValue;
  var msPattern;
  var hyphenPattern;
  var hyphenatedCache;
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles4 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles4 += interpolation.map;
          }
          return styles4;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var sourceMapPattern;
  if (true) {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  }
  var cursor;
  var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles4 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles4 += handleInterpolation(mergedProps, registered, strings);
    } else {
      if (strings[0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles4 += strings[0];
    }
    for (var i = 1; i < args.length; i++) {
      styles4 += handleInterpolation(mergedProps, registered, args[i]);
      if (stringMode) {
        if (strings[i] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles4 += strings[i];
      }
    }
    var sourceMap;
    if (true) {
      styles4 = styles4.replace(sourceMapPattern, function(match3) {
        sourceMap = match3;
        return "";
      });
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match2;
    while ((match2 = labelPattern.exec(styles4)) !== null) {
      identifierName += "-" + match2[1];
    }
    var name = hash_browser_esm_default(styles4) + identifierName;
    if (true) {
      return {
        name,
        styles: styles4,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
          return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
      };
    }
    return {
      name,
      styles: styles4,
      next: cursor
    };
  };

  // node_modules/@emotion/react/dist/emotion-element-cbed451f.browser.esm.js
  var hasOwnProperty = {}.hasOwnProperty;
  var EmotionCacheContext = /* @__PURE__ */ (0, import_react.createContext)(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ emotion_cache_browser_esm_default({
    key: "css"
  }) : null);
  if (true) {
    EmotionCacheContext.displayName = "EmotionCacheContext";
  }
  var CacheProvider = EmotionCacheContext.Provider;
  var withEmotionCache = function withEmotionCache2(func) {
    return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
      var cache2 = (0, import_react.useContext)(EmotionCacheContext);
      return func(props, cache2, ref);
    });
  };
  var ThemeContext = /* @__PURE__ */ (0, import_react.createContext)({});
  if (true) {
    ThemeContext.displayName = "EmotionThemeContext";
  }
  var useInsertionEffect2 = React["useInsertionEffect"] ? React["useInsertionEffect"] : function useInsertionEffect3(create) {
    create();
  };
  function useInsertionEffectMaybe(create) {
    useInsertionEffect2(create);
  }
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
  var Insertion = function Insertion2(_ref) {
    var cache2 = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    registerStyles(cache2, serialized, isStringTag);
    var rules = useInsertionEffectMaybe(function() {
      return insertStyles(cache2, serialized, isStringTag);
    });
    return null;
  };
  var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache2, ref) {
    var cssProp = props.css;
    if (typeof cssProp === "string" && cache2.registered[cssProp] !== void 0) {
      cssProp = cache2.registered[cssProp];
    }
    var WrappedComponent = props[typePropName];
    var registeredStyles = [cssProp];
    var className = "";
    if (typeof props.className === "string") {
      className = getRegisteredStyles(cache2.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, (0, import_react.useContext)(ThemeContext));
    if (serialized.name.indexOf("-") === -1) {
      var labelFromStack = props[labelPropName];
      if (labelFromStack) {
        serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
      }
    }
    className += cache2.key + "-" + serialized.name;
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
        newProps[key] = props[key];
      }
    }
    newProps.ref = ref;
    newProps.className = className;
    return /* @__PURE__ */ (0, import_react.createElement)(import_react.Fragment, null, /* @__PURE__ */ (0, import_react.createElement)(Insertion, {
      cache: cache2,
      serialized,
      isStringTag: typeof WrappedComponent === "string"
    }), /* @__PURE__ */ (0, import_react.createElement)(WrappedComponent, newProps));
  });
  if (true) {
    Emotion.displayName = "EmotionCssPropInternal";
  }

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var import_hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());
  var pkg = {
    name: "@emotion/react",
    version: "11.9.0",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
      "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
      "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    types: "types/index.d.ts",
    files: [
      "src",
      "dist",
      "jsx-runtime",
      "jsx-dev-runtime",
      "_isolated-hnrs",
      "types/*.d.ts",
      "macro.js",
      "macro.d.ts",
      "macro.js.flow"
    ],
    sideEffects: false,
    author: "Emotion Contributors",
    license: "MIT",
    scripts: {
      "test:typescript": "dtslint types"
    },
    dependencies: {
      "@babel/runtime": "^7.13.10",
      "@emotion/babel-plugin": "^11.7.1",
      "@emotion/cache": "^11.7.1",
      "@emotion/serialize": "^1.0.3",
      "@emotion/utils": "^1.1.0",
      "@emotion/weak-memoize": "^0.2.5",
      "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
      "@babel/core": "^7.0.0",
      react: ">=16.8.0"
    },
    peerDependenciesMeta: {
      "@babel/core": {
        optional: true
      },
      "@types/react": {
        optional: true
      }
    },
    devDependencies: {
      "@babel/core": "^7.13.10",
      "@emotion/css": "11.9.0",
      "@emotion/css-prettifier": "1.0.1",
      "@emotion/server": "11.4.0",
      "@emotion/styled": "11.8.1",
      "@types/react": "^16.9.11",
      dtslint: "^4.2.1",
      "html-tag-names": "^1.1.2",
      react: "16.14.0",
      "svg-tag-names": "^1.1.1",
      typescript: "^4.5.5"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
      access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
      entrypoints: [
        "./index.js",
        "./jsx-runtime.js",
        "./jsx-dev-runtime.js",
        "./_isolated-hnrs.js"
      ],
      umdName: "emotionReact"
    }
  };
  var useInsertionEffect5 = React2["useInsertionEffect"] ? React2["useInsertionEffect"] : import_react2.useLayoutEffect;
  var warnedAboutCssPropForGlobal = false;
  var Global = /* @__PURE__ */ withEmotionCache(function(props, cache2) {
    if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
      console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
      warnedAboutCssPropForGlobal = true;
    }
    var styles4 = props.styles;
    var serialized = serializeStyles([styles4], void 0, (0, import_react2.useContext)(ThemeContext));
    var sheetRef = (0, import_react2.useRef)();
    useInsertionEffect5(function() {
      var key = cache2.key + "-global";
      var sheet = new cache2.sheet.constructor({
        key,
        nonce: cache2.sheet.nonce,
        container: cache2.sheet.container,
        speedy: cache2.sheet.isSpeedy
      });
      var rehydrating = false;
      var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
      if (cache2.sheet.tags.length) {
        sheet.before = cache2.sheet.tags[0];
      }
      if (node2 !== null) {
        rehydrating = true;
        node2.setAttribute("data-emotion", key);
        sheet.hydrate([node2]);
      }
      sheetRef.current = [sheet, rehydrating];
      return function() {
        sheet.flush();
      };
    }, [cache2]);
    useInsertionEffect5(function() {
      var sheetRefCurrent = sheetRef.current;
      var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }
      if (serialized.next !== void 0) {
        insertStyles(cache2, serialized.next, true);
      }
      if (sheet.tags.length) {
        var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
        sheet.before = element;
        sheet.flush();
      }
      cache2.insert("", serialized, sheet, false);
    }, [cache2, serialized.name]);
    return null;
  });
  if (true) {
    Global.displayName = "EmotionGlobal";
  }
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  var keyframes = function keyframes2() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name;
    return {
      name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  };
  var classnames = function classnames2(args) {
    var len = args.length;
    var i = 0;
    var cls = "";
    for (; i < len; i++) {
      var arg = args[i];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            if (arg.styles !== void 0 && arg.name !== void 0) {
              console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
            }
            toAdd = "";
            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += " ");
                toAdd += k;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  function merge(registered, css2, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css2(registeredStyles);
  }
  var Insertion3 = function Insertion4(_ref) {
    var cache2 = _ref.cache, serializedArr = _ref.serializedArr;
    var rules = useInsertionEffectMaybe(function() {
      for (var i = 0; i < serializedArr.length; i++) {
        var res = insertStyles(cache2, serializedArr[i], false);
      }
    });
    return null;
  };
  var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache2) {
    var hasRendered = false;
    var serializedArr = [];
    var css2 = function css3() {
      if (hasRendered && true) {
        throw new Error("css can only be used during render");
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache2.registered);
      serializedArr.push(serialized);
      registerStyles(cache2, serialized, false);
      return cache2.key + "-" + serialized.name;
    };
    var cx = function cx2() {
      if (hasRendered && true) {
        throw new Error("cx can only be used during render");
      }
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return merge(cache2.registered, css2, classnames(args));
    };
    var content = {
      css: css2,
      cx,
      theme: (0, import_react2.useContext)(ThemeContext)
    };
    var ele = props.children(content);
    hasRendered = true;
    return /* @__PURE__ */ (0, import_react2.createElement)(import_react2.Fragment, null, /* @__PURE__ */ (0, import_react2.createElement)(Insertion3, {
      cache: cache2,
      serializedArr
    }), ele);
  });
  if (true) {
    ClassNames.displayName = "EmotionClassNames";
  }
  if (true) {
    isBrowser2 = true;
    isJest = typeof jest !== "undefined";
    if (isBrowser2 && !isJest) {
      globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser2 ? window : global;
      globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
      if (globalContext[globalKey]) {
        console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
      }
      globalContext[globalKey] = true;
    }
  }
  var isBrowser2;
  var isJest;
  var globalContext;
  var globalKey;

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var testOmitPropsOnStringTag = emotion_is_prop_valid_browser_esm_default;
  var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
    return key !== "theme";
  };
  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
    return typeof tag === "string" && tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };
  var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
    var shouldForwardProp2;
    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
        return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp2 !== "function" && isReal) {
      shouldForwardProp2 = tag.__emotion_forwardProp;
    }
    return shouldForwardProp2;
  };
  var useInsertionEffect7 = React3["useInsertionEffect"] ? React3["useInsertionEffect"] : function useInsertionEffect8(create) {
    create();
  };
  function useInsertionEffectMaybe2(create) {
    useInsertionEffect7(create);
  }
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var Insertion5 = function Insertion6(_ref) {
    var cache2 = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    registerStyles(cache2, serialized, isStringTag);
    var rules = useInsertionEffectMaybe2(function() {
      return insertStyles(cache2, serialized, isStringTag);
    });
    return null;
  };
  var createStyled = function createStyled2(tag, options) {
    if (true) {
      if (tag === void 0) {
        throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
      }
    }
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== void 0) {
      identifierName = options.label;
      targetClassName = options.target;
    }
    var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
      var args = arguments;
      var styles4 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
      if (identifierName !== void 0) {
        styles4.push("label:" + identifierName + ";");
      }
      if (args[0] == null || args[0].raw === void 0) {
        styles4.push.apply(styles4, args);
      } else {
        if (args[0][0] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
        }
        styles4.push(args[0][0]);
        var len = args.length;
        var i = 1;
        for (; i < len; i++) {
          if (args[0][i] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
          }
          styles4.push(args[i], args[0][i]);
        }
      }
      var Styled = withEmotionCache(function(props, cache2, ref) {
        var FinalTag = shouldUseAs && props.as || baseTag;
        var className = "";
        var classInterpolations = [];
        var mergedProps = props;
        if (props.theme == null) {
          mergedProps = {};
          for (var key in props) {
            mergedProps[key] = props[key];
          }
          mergedProps.theme = (0, import_react3.useContext)(ThemeContext);
        }
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache2.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(styles4.concat(classInterpolations), cache2.registered, mergedProps);
        className += cache2.key + "-" + serialized.name;
        if (targetClassName !== void 0) {
          className += " " + targetClassName;
        }
        var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
        var newProps = {};
        for (var _key in props) {
          if (shouldUseAs && _key === "as")
            continue;
          if (finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }
        newProps.className = className;
        newProps.ref = ref;
        return /* @__PURE__ */ (0, import_react3.createElement)(import_react3.Fragment, null, /* @__PURE__ */ (0, import_react3.createElement)(Insertion5, {
          cache: cache2,
          serialized,
          isStringTag: typeof FinalTag === "string"
        }), /* @__PURE__ */ (0, import_react3.createElement)(FinalTag, newProps));
      });
      Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
      Styled.defaultProps = tag.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles4;
      Styled.__emotion_forwardProp = shouldForwardProp2;
      Object.defineProperty(Styled, "toString", {
        value: function value() {
          if (targetClassName === void 0 && true) {
            return "NO_COMPONENT_SELECTOR";
          }
          return "." + targetClassName;
        }
      });
      Styled.withComponent = function(nextTag, nextOptions) {
        return createStyled2(nextTag, _extends({}, options, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        })).apply(void 0, styles4);
      };
      return Styled;
    };
  };
  var emotion_styled_base_browser_esm_default = createStyled;

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  var newStyled = emotion_styled_base_browser_esm_default.bind();
  tags.forEach(function(tagName) {
    newStyled[tagName] = newStyled(tagName);
  });
  var emotion_styled_browser_esm_default = newStyled;

  // node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js
  var React4 = __toModule(require_react());
  var import_prop_types = __toModule(require_prop_types());
  var import_jsx_runtime = __toModule(require_jsx_runtime());
  function isEmpty(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0;
  }
  function GlobalStyles(props) {
    const {
      styles: styles4,
      defaultTheme: defaultTheme3 = {}
    } = props;
    const globalStyles = typeof styles4 === "function" ? (themeInput) => styles4(isEmpty(themeInput) ? defaultTheme3 : themeInput) : styles4;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Global, {
      styles: globalStyles
    });
  }
  true ? GlobalStyles.propTypes = {
    defaultTheme: import_prop_types.default.object,
    styles: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.object, import_prop_types.default.func])
  } : void 0;

  // node_modules/@mui/styled-engine/index.js
  function styled(tag, options) {
    const stylesFactory = emotion_styled_browser_esm_default(tag, options);
    if (true) {
      return (...styles4) => {
        const component = typeof tag === "string" ? `"${tag}"` : "component";
        if (styles4.length === 0) {
          console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
        } else if (styles4.some((style3) => style3 === void 0)) {
          console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        }
        return stylesFactory(...styles4);
      };
    }
    return stylesFactory;
  }

  // node_modules/@mui/system/esm/responsivePropType.js
  var import_prop_types2 = __toModule(require_prop_types());
  var responsivePropType = true ? import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string, import_prop_types2.default.object, import_prop_types2.default.array]) : {};
  var responsivePropType_default = responsivePropType;

  // node_modules/@mui/utils/esm/chainPropTypes.js
  function chainPropTypes(propType1, propType2) {
    if (false) {
      return () => null;
    }
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }

  // node_modules/@mui/utils/esm/deepmerge.js
  function isPlainObject(item) {
    return item !== null && typeof item === "object" && item.constructor === Object;
  }
  function deepmerge(target, source, options = {
    clone: true
  }) {
    const output = options.clone ? _extends({}, target) : target;
    if (isPlainObject(target) && isPlainObject(source)) {
      Object.keys(source).forEach((key) => {
        if (key === "__proto__") {
          return;
        }
        if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
          output[key] = deepmerge(target[key], source[key], options);
        } else {
          output[key] = source[key];
        }
      });
    }
    return output;
  }

  // node_modules/@mui/utils/esm/elementAcceptingRef.js
  var import_prop_types3 = __toModule(require_prop_types());
  function isClassComponent(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementAcceptingRef = chainPropTypes(import_prop_types3.default.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(import_prop_types3.default.element.isRequired, acceptingRef);
  var elementAcceptingRef_default = elementAcceptingRef;

  // node_modules/@mui/utils/esm/elementTypeAcceptingRef.js
  var import_prop_types4 = __toModule(require_prop_types());
  function isClassComponent2(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent2(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementTypeAcceptingRef_default = chainPropTypes(import_prop_types4.default.elementType, elementTypeAcceptingRef);

  // node_modules/@mui/utils/esm/exactProp.js
  var specialProperty = "exact-prop: \u200B";
  function exactProp(propTypes) {
    if (false) {
      return propTypes;
    }
    return _extends({}, propTypes, {
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    });
  }

  // node_modules/@mui/utils/esm/getDisplayName.js
  var import_react_is = __toModule(require_react_is3());
  var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn2) {
    const match2 = `${fn2}`.match(fnNameMatchRegex);
    const name = match2 && match2[1];
    return name || "";
  }
  function getFunctionComponentName(Component2, fallback = "") {
    return Component2.displayName || Component2.name || getFunctionName(Component2) || fallback;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
  }
  function getDisplayName(Component2) {
    if (Component2 == null) {
      return void 0;
    }
    if (typeof Component2 === "string") {
      return Component2;
    }
    if (typeof Component2 === "function") {
      return getFunctionComponentName(Component2, "Component");
    }
    if (typeof Component2 === "object") {
      switch (Component2.$$typeof) {
        case import_react_is.ForwardRef:
          return getWrappedName(Component2, Component2.render, "ForwardRef");
        case import_react_is.Memo:
          return getWrappedName(Component2, Component2.type, "memo");
        default:
          return void 0;
      }
    }
    return void 0;
  }

  // node_modules/@mui/utils/esm/HTMLElementType.js
  function HTMLElementType(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
    }
    return null;
  }

  // node_modules/@mui/utils/esm/refType.js
  var import_prop_types5 = __toModule(require_prop_types());
  var refType = import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]);
  var refType_default = refType;

  // node_modules/@mui/utils/esm/capitalize.js
  function capitalize(string) {
    if (typeof string !== "string") {
      throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : formatMuiErrorMessage(7));
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // node_modules/@mui/utils/esm/createChainedFunction.js
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }

  // node_modules/@mui/utils/esm/debounce.js
  function debounce(func, wait = 166) {
    let timeout2;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout2);
      timeout2 = setTimeout(later, wait);
    }
    debounced.clear = () => {
      clearTimeout(timeout2);
    };
    return debounced;
  }

  // node_modules/@mui/utils/esm/isMuiElement.js
  var React5 = __toModule(require_react());
  function isMuiElement(element, muiNames) {
    return /* @__PURE__ */ React5.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }

  // node_modules/@mui/utils/esm/ownerDocument.js
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }

  // node_modules/@mui/utils/esm/ownerWindow.js
  function ownerWindow(node2) {
    const doc = ownerDocument(node2);
    return doc.defaultView || window;
  }

  // node_modules/@mui/utils/esm/requirePropFactory.js
  function requirePropFactory(componentNameInError, Component2) {
    if (false) {
      return () => null;
    }
    const prevPropTypes = Component2 ? _extends({}, Component2.propTypes) : null;
    const requireProp = (requiredProp) => (props, propName, componentName, location, propFullName, ...args) => {
      const propFullNameSafe = propFullName || propName;
      const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
      if (defaultTypeChecker) {
        const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
        if (typeCheckerResult) {
          return typeCheckerResult;
        }
      }
      if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
        return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
      }
      return null;
    };
    return requireProp;
  }

  // node_modules/@mui/utils/esm/setRef.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // node_modules/@mui/utils/esm/useEnhancedEffect.js
  var React6 = __toModule(require_react());
  var useEnhancedEffect = typeof window !== "undefined" ? React6.useLayoutEffect : React6.useEffect;
  var useEnhancedEffect_default = useEnhancedEffect;

  // node_modules/@mui/utils/esm/useId.js
  var React7 = __toModule(require_react());
  var globalId = 0;
  function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = React7.useState(idOverride);
    const id = idOverride || defaultId;
    React7.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }
  var maybeReactUseId = React7["useId"];
  function useId2(idOverride) {
    if (maybeReactUseId !== void 0) {
      const reactId = maybeReactUseId();
      return idOverride != null ? idOverride : reactId;
    }
    return useGlobalId(idOverride);
  }

  // node_modules/@mui/utils/esm/unsupportedProp.js
  function unsupportedProp(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    }
    return null;
  }

  // node_modules/@mui/utils/esm/useControlled.js
  var React8 = __toModule(require_react());
  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = "value"
  }) {
    const {
      current: isControlled
    } = React8.useRef(controlled !== void 0);
    const [valueState, setValue] = React8.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    if (true) {
      React8.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = React8.useRef(defaultProp);
      React8.useEffect(() => {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = React8.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // node_modules/@mui/utils/esm/useEventCallback.js
  var React9 = __toModule(require_react());
  function useEventCallback(fn2) {
    const ref = React9.useRef(fn2);
    useEnhancedEffect_default(() => {
      ref.current = fn2;
    });
    return React9.useCallback((...args) => (0, ref.current)(...args), []);
  }

  // node_modules/@mui/utils/esm/useForkRef.js
  var React10 = __toModule(require_react());
  function useForkRef(refA, refB) {
    return React10.useMemo(() => {
      if (refA == null && refB == null) {
        return null;
      }
      return (refValue) => {
        setRef(refA, refValue);
        setRef(refB, refValue);
      };
    }, [refA, refB]);
  }

  // node_modules/@mui/utils/esm/useIsFocusVisible.js
  var React11 = __toModule(require_react());
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var hadFocusVisibleRecentlyTimeout;
  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node2) {
    const {
      type,
      tagName
    } = node2;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node2.readOnly) {
      return true;
    }
    if (node2.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    const {
      target
    } = event;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function useIsFocusVisible() {
    const ref = React11.useCallback((node2) => {
      if (node2 != null) {
        prepare(node2.ownerDocument);
      }
    }, []);
    const isFocusVisibleRef = React11.useRef(false);
    function handleBlurVisible() {
      if (isFocusVisibleRef.current) {
        hadFocusVisibleRecently = true;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
        hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
          hadFocusVisibleRecently = false;
        }, 100);
        isFocusVisibleRef.current = false;
        return true;
      }
      return false;
    }
    function handleFocusVisible(event) {
      if (isFocusVisible(event)) {
        isFocusVisibleRef.current = true;
        return true;
      }
      return false;
    }
    return {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref
    };
  }

  // node_modules/@mui/utils/esm/getScrollbarSize.js
  function getScrollbarSize(doc) {
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  // node_modules/@mui/utils/esm/usePreviousProps.js
  var React12 = __toModule(require_react());
  var usePreviousProps = (value) => {
    const ref = React12.useRef({});
    React12.useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  };
  var usePreviousProps_default = usePreviousProps;

  // node_modules/@mui/utils/esm/integerPropType.js
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function ponyfillIsInteger(x) {
    return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
  }
  var isInteger = Number.isInteger || ponyfillIsInteger;
  function requiredInteger(props, propName, componentName, location) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  var integerPropType_default = false ? validatorNoop : validator;

  // node_modules/@mui/utils/esm/resolveProps.js
  function resolveProps(defaultProps2, props) {
    const output = _extends({}, props);
    Object.keys(defaultProps2).forEach((propName) => {
      if (output[propName] === void 0) {
        output[propName] = defaultProps2[propName];
      }
    });
    return output;
  }

  // node_modules/@mui/system/esm/merge.js
  function merge2(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge(acc, item, {
      clone: false
    });
  }
  var merge_default = merge2;

  // node_modules/@mui/system/esm/breakpoints.js
  var values = {
    xs: 0,
    sm: 600,
    md: 900,
    lg: 1200,
    xl: 1536
  };
  var defaultBreakpoints = {
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = breakpointsInput == null ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys, style3) {
    return breakpointKeys.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style3);
  }
  function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    if (typeof breakpointValues !== "object") {
      return {};
    }
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) {
      breakpointsKeys.forEach((breakpoint, i) => {
        if (i < breakpointValues.length) {
          base[breakpoint] = true;
        }
      });
    } else {
      breakpointsKeys.forEach((breakpoint) => {
        if (breakpointValues[breakpoint] != null) {
          base[breakpoint] = true;
        }
      });
    }
    return base;
  }
  function resolveBreakpointValues({
    values: breakpointValues,
    breakpoints: themeBreakpoints,
    base: customBase
  }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys = Object.keys(base);
    if (keys.length === 0) {
      return breakpointValues;
    }
    let previous;
    return keys.reduce((acc, breakpoint, i) => {
      if (Array.isArray(breakpointValues)) {
        acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
        previous = i;
      } else {
        acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous] || breakpointValues;
        previous = breakpoint;
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/system/esm/style.js
  function getPath(obj, path) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getValue(themeMapping, transform2, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform2) {
      value = transform2(value);
    }
    return value;
  }
  function style(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform: transform2
    } = options;
    const fn2 = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getValue(themeMapping, transform2, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getValue(themeMapping, transform2, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn2.propTypes = true ? {
      [prop]: responsivePropType_default
    } : {};
    fn2.filterProps = [prop];
    return fn2;
  }
  var style_default = style;

  // node_modules/@mui/system/esm/compose.js
  function compose(...styles4) {
    const handlers = styles4.reduce((acc, style3) => {
      style3.filterProps.forEach((prop) => {
        acc[prop] = style3;
      });
      return acc;
    }, {});
    const fn2 = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge_default(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn2.propTypes = true ? styles4.reduce((acc, style3) => Object.assign(acc, style3.propTypes), {}) : {};
    fn2.filterProps = styles4.reduce((acc, style3) => acc.concat(style3.filterProps), []);
    return fn2;
  }
  var compose_default = compose;

  // node_modules/@mui/system/esm/memoize.js
  function memoize2(fn2) {
    const cache2 = {};
    return (arg) => {
      if (cache2[arg] === void 0) {
        cache2[arg] = fn2(arg);
      }
      return cache2[arg];
    };
  }

  // node_modules/@mui/system/esm/spacing.js
  var properties = {
    m: "margin",
    p: "padding"
  };
  var directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties = memoize2((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a, b] = prop.split("");
    const property = properties[a];
    const direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
  });
  var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  var spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    var _getPath;
    const themeSpacing = (_getPath = getPath(theme, themeKey)) != null ? _getPath : defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (typeof abs2 !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
          }
        }
        return themeSpacing * abs2;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs2];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, "spacing", 8, "spacing");
  }
  function getValue2(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs2 = Math.abs(propValue);
    const transformed = transformer(abs2);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue2(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys, prop, transformer) {
    if (keys.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style2(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge_default, {});
  }
  function margin(props) {
    return style2(props, marginKeys);
  }
  margin.propTypes = true ? marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  margin.filterProps = marginKeys;
  function padding(props) {
    return style2(props, paddingKeys);
  }
  padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  padding.filterProps = paddingKeys;
  function spacing(props) {
    return style2(props, spacingKeys);
  }
  spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;
  var spacing_default = spacing;

  // node_modules/@mui/system/esm/borders.js
  function getBorder(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  var border = style_default({
    prop: "border",
    themeKey: "borders",
    transform: getBorder
  });
  var borderTop = style_default({
    prop: "borderTop",
    themeKey: "borders",
    transform: getBorder
  });
  var borderRight = style_default({
    prop: "borderRight",
    themeKey: "borders",
    transform: getBorder
  });
  var borderBottom = style_default({
    prop: "borderBottom",
    themeKey: "borders",
    transform: getBorder
  });
  var borderLeft = style_default({
    prop: "borderLeft",
    themeKey: "borders",
    transform: getBorder
  });
  var borderColor = style_default({
    prop: "borderColor",
    themeKey: "palette"
  });
  var borderTopColor = style_default({
    prop: "borderTopColor",
    themeKey: "palette"
  });
  var borderRightColor = style_default({
    prop: "borderRightColor",
    themeKey: "palette"
  });
  var borderBottomColor = style_default({
    prop: "borderBottomColor",
    themeKey: "palette"
  });
  var borderLeftColor = style_default({
    prop: "borderLeftColor",
    themeKey: "palette"
  });
  var borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue2(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = true ? {
    borderRadius: responsivePropType_default
  } : {};
  borderRadius.filterProps = ["borderRadius"];
  var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
  var borders_default = borders;

  // node_modules/@mui/system/esm/display.js
  var displayPrint = style_default({
    prop: "displayPrint",
    cssProperty: false,
    transform: (value) => ({
      "@media print": {
        display: value
      }
    })
  });
  var displayRaw = style_default({
    prop: "display"
  });
  var overflow = style_default({
    prop: "overflow"
  });
  var textOverflow = style_default({
    prop: "textOverflow"
  });
  var visibility = style_default({
    prop: "visibility"
  });
  var whiteSpace = style_default({
    prop: "whiteSpace"
  });
  var display_default = compose_default(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

  // node_modules/@mui/system/esm/flexbox.js
  var flexBasis = style_default({
    prop: "flexBasis"
  });
  var flexDirection = style_default({
    prop: "flexDirection"
  });
  var flexWrap = style_default({
    prop: "flexWrap"
  });
  var justifyContent = style_default({
    prop: "justifyContent"
  });
  var alignItems = style_default({
    prop: "alignItems"
  });
  var alignContent = style_default({
    prop: "alignContent"
  });
  var order = style_default({
    prop: "order"
  });
  var flex = style_default({
    prop: "flex"
  });
  var flexGrow = style_default({
    prop: "flexGrow"
  });
  var flexShrink = style_default({
    prop: "flexShrink"
  });
  var alignSelf = style_default({
    prop: "alignSelf"
  });
  var justifyItems = style_default({
    prop: "justifyItems"
  });
  var justifySelf = style_default({
    prop: "justifySelf"
  });
  var flexbox = compose_default(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
  var flexbox_default = flexbox;

  // node_modules/@mui/system/esm/grid.js
  var gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue2(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = true ? {
    gap: responsivePropType_default
  } : {};
  gap.filterProps = ["gap"];
  var columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue2(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = true ? {
    columnGap: responsivePropType_default
  } : {};
  columnGap.filterProps = ["columnGap"];
  var rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue2(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = true ? {
    rowGap: responsivePropType_default
  } : {};
  rowGap.filterProps = ["rowGap"];
  var gridColumn = style_default({
    prop: "gridColumn"
  });
  var gridRow = style_default({
    prop: "gridRow"
  });
  var gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  var gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  var gridArea = style_default({
    prop: "gridArea"
  });
  var grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
  var grid_default = grid;

  // node_modules/@mui/system/esm/palette.js
  var color = style_default({
    prop: "color",
    themeKey: "palette"
  });
  var bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette"
  });
  var backgroundColor = style_default({
    prop: "backgroundColor",
    themeKey: "palette"
  });
  var palette = compose_default(color, bgcolor, backgroundColor);
  var palette_default = palette;

  // node_modules/@mui/system/esm/positions.js
  var position2 = style_default({
    prop: "position"
  });
  var zIndex = style_default({
    prop: "zIndex",
    themeKey: "zIndex"
  });
  var top = style_default({
    prop: "top"
  });
  var right = style_default({
    prop: "right"
  });
  var bottom = style_default({
    prop: "bottom"
  });
  var left = style_default({
    prop: "left"
  });
  var positions_default = compose_default(position2, zIndex, top, right, bottom, left);

  // node_modules/@mui/system/esm/shadows.js
  var boxShadow = style_default({
    prop: "boxShadow",
    themeKey: "shadows"
  });
  var shadows_default = boxShadow;

  // node_modules/@mui/system/esm/sizing.js
  function transform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  var width = style_default({
    prop: "width",
    transform
  });
  var maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
        const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values[propValue];
        return {
          maxWidth: breakpoint || transform(propValue)
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  var minWidth = style_default({
    prop: "minWidth",
    transform
  });
  var height = style_default({
    prop: "height",
    transform
  });
  var maxHeight = style_default({
    prop: "maxHeight",
    transform
  });
  var minHeight = style_default({
    prop: "minHeight",
    transform
  });
  var sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform
  });
  var sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform
  });
  var boxSizing = style_default({
    prop: "boxSizing"
  });
  var sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
  var sizing_default = sizing;

  // node_modules/@mui/system/esm/typography.js
  var fontFamily = style_default({
    prop: "fontFamily",
    themeKey: "typography"
  });
  var fontSize = style_default({
    prop: "fontSize",
    themeKey: "typography"
  });
  var fontStyle = style_default({
    prop: "fontStyle",
    themeKey: "typography"
  });
  var fontWeight = style_default({
    prop: "fontWeight",
    themeKey: "typography"
  });
  var letterSpacing = style_default({
    prop: "letterSpacing"
  });
  var textTransform = style_default({
    prop: "textTransform"
  });
  var lineHeight = style_default({
    prop: "lineHeight"
  });
  var textAlign = style_default({
    prop: "textAlign"
  });
  var typographyVariant = style_default({
    prop: "typography",
    cssProperty: false,
    themeKey: "typography"
  });
  var typography = compose_default(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
  var typography_default = typography;

  // node_modules/@mui/system/esm/getThemeValue.js
  var filterPropsMapping = {
    borders: borders_default.filterProps,
    display: display_default.filterProps,
    flexbox: flexbox_default.filterProps,
    grid: grid_default.filterProps,
    positions: positions_default.filterProps,
    palette: palette_default.filterProps,
    shadows: shadows_default.filterProps,
    sizing: sizing_default.filterProps,
    spacing: spacing_default.filterProps,
    typography: typography_default.filterProps
  };
  var styleFunctionMapping = {
    borders: borders_default,
    display: display_default,
    flexbox: flexbox_default,
    grid: grid_default,
    positions: positions_default,
    palette: palette_default,
    shadows: shadows_default,
    sizing: sizing_default,
    spacing: spacing_default,
    typography: typography_default
  };
  var propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
    filterPropsMapping[styleFnName].forEach((propName) => {
      acc[propName] = styleFunctionMapping[styleFnName];
    });
    return acc;
  }, {});

  // node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx(styleFunctionMapping2 = styleFunctionMapping) {
    const propToStyleFunction2 = Object.keys(styleFunctionMapping2).reduce((acc, styleFnName) => {
      styleFunctionMapping2[styleFnName].filterProps.forEach((propName) => {
        acc[propName] = styleFunctionMapping2[styleFnName];
      });
      return acc;
    }, {});
    function getThemeValue(prop, value, theme) {
      const inputProps = {
        [prop]: value,
        theme
      };
      const styleFunction = propToStyleFunction2[prop];
      return styleFunction ? styleFunction(inputProps) : {
        [prop]: value
      };
    }
    function styleFunctionSx2(props) {
      const {
        sx,
        theme = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css2 = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (propToStyleFunction2[styleKey]) {
                css2 = merge_default(css2, getThemeValue(styleKey, value, theme));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme
                }, value, (x) => ({
                  [styleKey]: x
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css2[styleKey] = styleFunctionSx2({
                    sx: value,
                    theme
                  });
                } else {
                  css2 = merge_default(css2, breakpointsValues);
                }
              }
            } else {
              css2 = merge_default(css2, getThemeValue(styleKey, value, theme));
            }
          }
        });
        return removeUnusedBreakpoints(breakpointsKeys, css2);
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx2;
  }
  var styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ["sx"];
  var styleFunctionSx_default = styleFunctionSx;

  // node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js
  var _excluded = ["sx"];
  var splitProps = (props) => {
    const result = {
      systemProps: {},
      otherProps: {}
    };
    Object.keys(props).forEach((prop) => {
      if (propToStyleFunction[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };
  function extendSxProp(props) {
    const {
      sx: inSx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === "function") {
      finalSx = (...args) => {
        const result = inSx(...args);
        if (!isPlainObject(result)) {
          return systemProps;
        }
        return _extends({}, systemProps, result);
      };
    } else {
      finalSx = _extends({}, systemProps, inSx);
    }
    return _extends({}, otherProps, {
      sx: finalSx
    });
  }

  // node_modules/@mui/system/esm/createBox.js
  var React15 = __toModule(require_react());

  // node_modules/clsx/dist/clsx.m.js
  function toVal(mix) {
    var k, y, str = "";
    if (typeof mix === "string" || typeof mix === "number") {
      str += mix;
    } else if (typeof mix === "object") {
      if (Array.isArray(mix)) {
        for (k = 0; k < mix.length; k++) {
          if (mix[k]) {
            if (y = toVal(mix[k])) {
              str && (str += " ");
              str += y;
            }
          }
        }
      } else {
        for (k in mix) {
          if (mix[k]) {
            str && (str += " ");
            str += k;
          }
        }
      }
    }
    return str;
  }
  function clsx_m_default() {
    var i = 0, tmp, x, str = "";
    while (i < arguments.length) {
      if (tmp = arguments[i++]) {
        if (x = toVal(tmp)) {
          str && (str += " ");
          str += x;
        }
      }
    }
    return str;
  }

  // node_modules/@mui/system/esm/createTheme/createBreakpoints.js
  var _excluded2 = ["values", "unit", "step"];
  var sortBreakpointsValues = (values3) => {
    const breakpointsAsArray = Object.keys(values3).map((key) => ({
      key,
      val: values3[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return _extends({}, acc, {
        [obj.key]: obj.val
      });
    }, {});
  };
  function createBreakpoints(breakpoints) {
    const {
      values: values3 = {
        xs: 0,
        sm: 600,
        md: 900,
        lg: 1200,
        xl: 1536
      },
      unit = "px",
      step = 5
    } = breakpoints, other = _objectWithoutPropertiesLoose(breakpoints, _excluded2);
    const sortedValues = sortBreakpointsValues(values3);
    const keys = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start2, end2) {
      const endIndex = keys.indexOf(end2);
      return `@media (min-width:${typeof values3[start2] === "number" ? values3[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values3[keys[endIndex]] === "number" ? values3[keys[endIndex]] : end2) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between(key, keys[keys.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys.indexOf(key);
      if (keyIndex === 0) {
        return up(keys[1]);
      }
      if (keyIndex === keys.length - 1) {
        return down(keys[keyIndex]);
      }
      return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends({
      keys,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit
    }, other);
  }

  // node_modules/@mui/system/esm/createTheme/shape.js
  var shape = {
    borderRadius: 4
  };
  var shape_default = shape;

  // node_modules/@mui/system/esm/createTheme/createSpacing.js
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform2 = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing2 = (...argsInput) => {
      if (true) {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform2(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing2.mui = true;
    return spacing2;
  }

  // node_modules/@mui/system/esm/createTheme/createTheme.js
  var _excluded3 = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded3);
    const breakpoints = createBreakpoints(breakpointsInput);
    const spacing2 = createSpacing(spacingInput);
    let muiTheme = deepmerge({
      breakpoints,
      direction: "ltr",
      components: {},
      palette: _extends({
        mode: "light"
      }, paletteInput),
      spacing: spacing2,
      shape: _extends({}, shape_default, shapeInput)
    }, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@mui/private-theming/useTheme/ThemeContext.js
  var React13 = __toModule(require_react());
  var ThemeContext2 = /* @__PURE__ */ React13.createContext(null);
  if (true) {
    ThemeContext2.displayName = "ThemeContext";
  }
  var ThemeContext_default = ThemeContext2;

  // node_modules/@mui/private-theming/useTheme/useTheme.js
  var React14 = __toModule(require_react());
  function useTheme2() {
    const theme = React14.useContext(ThemeContext_default);
    if (true) {
      React14.useDebugValue(theme);
    }
    return theme;
  }

  // node_modules/@mui/system/esm/useThemeWithoutDefault.js
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme3(defaultTheme3 = null) {
    const contextTheme = useTheme2();
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme3 : contextTheme;
  }
  var useThemeWithoutDefault_default = useTheme3;

  // node_modules/@mui/system/esm/useTheme.js
  var systemDefaultTheme = createTheme_default();
  function useTheme4(defaultTheme3 = systemDefaultTheme) {
    return useThemeWithoutDefault_default(defaultTheme3);
  }
  var useTheme_default = useTheme4;

  // node_modules/@mui/system/esm/createBox.js
  var import_jsx_runtime2 = __toModule(require_jsx_runtime());
  var _excluded4 = ["className", "component"];
  function createBox(options = {}) {
    const {
      defaultTheme: defaultTheme3,
      defaultClassName = "MuiBox-root",
      generateClassName,
      styleFunctionSx: styleFunctionSx2 = styleFunctionSx_default
    } = options;
    const BoxRoot = styled("div")(styleFunctionSx2);
    const Box2 = /* @__PURE__ */ React15.forwardRef(function Box3(inProps, ref) {
      const theme = useTheme_default(defaultTheme3);
      const _extendSxProp = extendSxProp(inProps), {
        className,
        component = "div"
      } = _extendSxProp, other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded4);
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(BoxRoot, _extends({
        as: component,
        ref,
        className: clsx_m_default(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme
      }, other));
    });
    return Box2;
  }

  // node_modules/@mui/system/esm/propsToClassKey.js
  var _excluded5 = ["variant"];
  function isEmpty2(string) {
    return string.length === 0;
  }
  function propsToClassKey(props) {
    const {
      variant
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
    let classKey = variant || "";
    Object.keys(other).sort().forEach((key) => {
      if (key === "color") {
        classKey += isEmpty2(classKey) ? props[key] : capitalize(props[key]);
      } else {
        classKey += `${isEmpty2(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
      }
    });
    return classKey;
  }

  // node_modules/@mui/system/esm/createStyled.js
  var _excluded6 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
  var _excluded22 = ["theme"];
  var _excluded32 = ["theme"];
  function isEmpty3(obj) {
    return Object.keys(obj).length === 0;
  }
  var getStyleOverrides = (name, theme) => {
    if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
      return theme.components[name].styleOverrides;
    }
    return null;
  };
  var getVariantStyles = (name, theme) => {
    let variants = [];
    if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
      variants = theme.components[name].variants;
    }
    const variantsStyles = {};
    variants.forEach((definition) => {
      const key = propsToClassKey(definition.props);
      variantsStyles[key] = definition.style;
    });
    return variantsStyles;
  };
  var variantsResolver = (props, styles4, theme, name) => {
    var _theme$components, _theme$components$nam;
    const {
      ownerState = {}
    } = props;
    const variantsStyles = [];
    const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
    if (themeVariants) {
      themeVariants.forEach((themeVariant) => {
        let isMatch = true;
        Object.keys(themeVariant.props).forEach((key) => {
          if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
            isMatch = false;
          }
        });
        if (isMatch) {
          variantsStyles.push(styles4[propsToClassKey(themeVariant.props)]);
        }
      });
    }
    return variantsStyles;
  };
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var systemDefaultTheme2 = createTheme_default();
  var lowercaseFirstLetter = (string) => {
    return string.charAt(0).toLowerCase() + string.slice(1);
  };
  function createStyled3(input = {}) {
    const {
      defaultTheme: defaultTheme3 = systemDefaultTheme2,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp,
      styleFunctionSx: styleFunctionSx2 = styleFunctionSx_default
    } = input;
    return (tag, inputOptions = {}) => {
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        overridesResolver: overridesResolver2
      } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded6);
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : componentSlot && componentSlot !== "Root" || false;
      const skipSx = inputSkipSx || false;
      let label;
      if (true) {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp2;
      }
      const defaultStyledResolver = styled(tag, _extends({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));
      const muiStyledResolver = (styleArg, ...expressions) => {
        const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
          return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? (_ref) => {
            let {
              theme: themeInput
            } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded22);
            return stylesArg(_extends({
              theme: isEmpty3(themeInput) ? defaultTheme3 : themeInput
            }, other));
          } : stylesArg;
        }) : [];
        let transformedStyleArg = styleArg;
        if (componentName && overridesResolver2) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = isEmpty3(props.theme) ? defaultTheme3 : props.theme;
            const styleOverrides = getStyleOverrides(componentName, theme);
            if (styleOverrides) {
              const resolvedStyleOverrides = {};
              Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle(_extends({}, props, {
                  theme
                })) : slotStyle;
              });
              return overridesResolver2(props, resolvedStyleOverrides);
            }
            return null;
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = isEmpty3(props.theme) ? defaultTheme3 : props.theme;
            return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
          });
        }
        if (!skipSx) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = isEmpty3(props.theme) ? defaultTheme3 : props.theme;
            return styleFunctionSx2(_extends({}, props, {
              theme
            }));
          });
        }
        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill("");
          transformedStyleArg = [...styleArg, ...placeholders];
          transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
        } else if (typeof styleArg === "function" && styleArg.__emotion_real !== styleArg) {
          transformedStyleArg = (_ref2) => {
            let {
              theme: themeInput
            } = _ref2, other = _objectWithoutPropertiesLoose(_ref2, _excluded32);
            return styleArg(_extends({
              theme: isEmpty3(themeInput) ? defaultTheme3 : themeInput
            }, other));
          };
        }
        const Component2 = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
        if (true) {
          let displayName;
          if (componentName) {
            displayName = `${componentName}${componentSlot || ""}`;
          }
          if (displayName === void 0) {
            displayName = `Styled(${getDisplayName(tag)})`;
          }
          Component2.displayName = displayName;
        }
        return Component2;
      };
      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }
      return muiStyledResolver;
    };
  }

  // node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
  function getThemeProps(params) {
    const {
      theme,
      name,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }
    return resolveProps(theme.components[name].defaultProps, props);
  }

  // node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
  function useThemeProps({
    props,
    name,
    defaultTheme: defaultTheme3
  }) {
    const theme = useTheme_default(defaultTheme3);
    const mergedProps = getThemeProps({
      theme,
      name,
      props
    });
    return mergedProps;
  }

  // node_modules/@mui/system/esm/colorManipulator.js
  function clamp(value, min2 = 0, max2 = 1) {
    if (true) {
      if (value < min2 || value > max2) {
        console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
      }
    }
    return Math.min(Math.max(min2, value), max2);
  }
  function hexToRgb(color2) {
    color2 = color2.slice(1);
    const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
    let colors = color2.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n) => n + n);
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
      return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    const marker = color2.indexOf("(");
    const type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
      throw new Error(true ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage(9, color2));
    }
    let values3 = color2.substring(marker + 1, color2.length - 1);
    let colorSpace;
    if (type === "color") {
      values3 = values3.split(" ");
      colorSpace = values3.shift();
      if (values3.length === 4 && values3[3].charAt(0) === "/") {
        values3[3] = values3[3].slice(1);
      }
      if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
        throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage(10, colorSpace));
      }
    } else {
      values3 = values3.split(",");
    }
    values3 = values3.map((value) => parseFloat(value));
    return {
      type,
      values: values3,
      colorSpace
    };
  }
  function recomposeColor(color2) {
    const {
      type,
      colorSpace
    } = color2;
    let {
      values: values3
    } = color2;
    if (type.indexOf("rgb") !== -1) {
      values3 = values3.map((n, i) => i < 3 ? parseInt(n, 10) : n);
    } else if (type.indexOf("hsl") !== -1) {
      values3[1] = `${values3[1]}%`;
      values3[2] = `${values3[2]}%`;
    }
    if (type.indexOf("color") !== -1) {
      values3 = `${colorSpace} ${values3.join(" ")}`;
    } else {
      values3 = `${values3.join(", ")}`;
    }
    return `${type}(${values3})`;
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    const {
      values: values3
    } = color2;
    const h = values3[0];
    const s = values3[1] / 100;
    const l = values3[2] / 100;
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    let type = "rgb";
    const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values3[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    let rgb = color2.type === "hsl" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map((val) => {
      if (color2.type !== "color") {
        val /= 255;
      }
      return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clamp(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    if (color2.type === "color") {
      color2.values[3] = `/${value}`;
    } else {
      color2.values[3] = value;
    }
    return recomposeColor(color2);
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (255 - color2.values[i]) * coefficient;
      }
    } else if (color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (1 - color2.values[i]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }

  // node_modules/@mui/base/utils/isHostComponent.js
  function isHostComponent(element) {
    return typeof element === "string";
  }
  var isHostComponent_default = isHostComponent;

  // node_modules/@mui/base/utils/appendOwnerState.js
  function appendOwnerState(elementType, existingProps = {}, ownerState) {
    if (isHostComponent_default(elementType)) {
      return existingProps;
    }
    return _extends({}, existingProps, {
      ownerState: _extends({}, existingProps.ownerState, ownerState)
    });
  }

  // node_modules/@mui/base/AutocompleteUnstyled/useAutocomplete.js
  var React16 = __toModule(require_react());
  function stripDiacritics(string) {
    return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
  }
  function createFilterOptions(config = {}) {
    const {
      ignoreAccents = true,
      ignoreCase = true,
      limit,
      matchFrom = "any",
      stringify: stringify2,
      trim: trim2 = false
    } = config;
    return (options, {
      inputValue,
      getOptionLabel
    }) => {
      let input = trim2 ? inputValue.trim() : inputValue;
      if (ignoreCase) {
        input = input.toLowerCase();
      }
      if (ignoreAccents) {
        input = stripDiacritics(input);
      }
      const filteredOptions = options.filter((option) => {
        let candidate = (stringify2 || getOptionLabel)(option);
        if (ignoreCase) {
          candidate = candidate.toLowerCase();
        }
        if (ignoreAccents) {
          candidate = stripDiacritics(candidate);
        }
        return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
      });
      return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
    };
  }
  function findIndex(array, comp) {
    for (let i = 0; i < array.length; i += 1) {
      if (comp(array[i])) {
        return i;
      }
    }
    return -1;
  }
  var defaultFilterOptions = createFilterOptions();
  var pageSize = 5;
  function useAutocomplete(props) {
    const {
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      disabled: disabledProp,
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      componentName = "useAutocomplete",
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabledItemsFocusable = false,
      disableListWrap = false,
      filterOptions = defaultFilterOptions,
      filterSelectedOptions = false,
      freeSolo = false,
      getOptionDisabled,
      getOptionLabel: getOptionLabelProp = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      isOptionEqualToValue: isOptionEqualToValue2 = (option, value2) => option === value2,
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      id: idProp,
      includeInputInList = false,
      inputValue: inputValueProp,
      multiple = false,
      onChange,
      onClose,
      onHighlightChange,
      onInputChange,
      onOpen,
      open: openProp,
      openOnFocus = false,
      options,
      readOnly = false,
      selectOnFocus = !props.freeSolo,
      value: valueProp
    } = props;
    const id = useId2(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option) => {
      const optionLabel = getOptionLabelProp(option);
      if (typeof optionLabel !== "string") {
        if (true) {
          const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
          console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
        }
        return String(optionLabel);
      }
      return optionLabel;
    };
    const ignoreFocus = React16.useRef(false);
    const firstFocus = React16.useRef(true);
    const inputRef = React16.useRef(null);
    const listboxRef = React16.useRef(null);
    const [anchorEl, setAnchorEl] = React16.useState(null);
    const [focusedTag, setFocusedTag] = React16.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = React16.useRef(defaultHighlighted);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: componentName
    });
    const [inputValue, setInputValueState] = useControlled({
      controlled: inputValueProp,
      default: "",
      name: componentName,
      state: "inputValue"
    });
    const [focused, setFocused] = React16.useState(false);
    const resetInputValue = React16.useCallback((event, newValue) => {
      const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
      if (!isOptionSelected && !clearOnBlur) {
        return;
      }
      let newInputValue;
      if (multiple) {
        newInputValue = "";
      } else if (newValue == null) {
        newInputValue = "";
      } else {
        const optionLabel = getOptionLabel(newValue);
        newInputValue = typeof optionLabel === "string" ? optionLabel : "";
      }
      if (inputValue === newInputValue) {
        return;
      }
      setInputValueState(newInputValue);
      if (onInputChange) {
        onInputChange(event, newInputValue, "reset");
      }
    }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
    const prevValue = React16.useRef();
    React16.useEffect(() => {
      const valueChange = value !== prevValue.current;
      prevValue.current = value;
      if (focused && !valueChange) {
        return;
      }
      if (freeSolo && !valueChange) {
        return;
      }
      resetInputValue(null, value);
    }, [value, resetInputValue, focused, prevValue, freeSolo]);
    const [open, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: componentName,
      state: "open"
    });
    const [inputPristine, setInputPristine] = React16.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open && !readOnly;
    const filteredOptions = popupOpen ? filterOptions(options.filter((option) => {
      if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue2(option, value2))) {
        return false;
      }
      return true;
    }), {
      inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
      getOptionLabel
    }) : [];
    const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
    if (true) {
      if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue2(option, value2)));
        if (missingValue.length > 0) {
          console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
        }
      }
    }
    const focusTag = useEventCallback((tagToFocus) => {
      if (tagToFocus === -1) {
        inputRef.current.focus();
      } else {
        anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
      }
    });
    React16.useEffect(() => {
      if (multiple && focusedTag > value.length - 1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
    }, [value, multiple, focusedTag, focusTag]);
    function validOptionIndex(index, direction) {
      if (!listboxRef.current || index === -1) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        if (direction === "next" && nextFocus === filteredOptions.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
        const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
        if (option && !option.hasAttribute("tabindex") || nextFocusDisabled) {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const setHighlightedIndex = useEventCallback(({
      event,
      index,
      reason = "auto"
    }) => {
      highlightedIndexRef.current = index;
      if (index === -1) {
        inputRef.current.removeAttribute("aria-activedescendant");
      } else {
        inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index}`);
      }
      if (onHighlightChange) {
        onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
      }
      if (!listboxRef.current) {
        return;
      }
      const prev2 = listboxRef.current.querySelector('[role="option"].Mui-focused');
      if (prev2) {
        prev2.classList.remove("Mui-focused");
        prev2.classList.remove("Mui-focusVisible");
      }
      const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
      if (!listboxNode) {
        return;
      }
      if (index === -1) {
        listboxNode.scrollTop = 0;
        return;
      }
      const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
      if (!option) {
        return;
      }
      option.classList.add("Mui-focused");
      if (reason === "keyboard") {
        option.classList.add("Mui-focusVisible");
      }
      if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse") {
        const element = option;
        const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
        const elementBottom = element.offsetTop + element.offsetHeight;
        if (elementBottom > scrollBottom) {
          listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
        } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
          listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
      }
    });
    const changeHighlightedIndex = useEventCallback(({
      event,
      diff,
      direction = "next",
      reason = "auto"
    }) => {
      if (!popupOpen) {
        return;
      }
      const getNextIndex = () => {
        const maxIndex = filteredOptions.length - 1;
        if (diff === "reset") {
          return defaultHighlighted;
        }
        if (diff === "start") {
          return 0;
        }
        if (diff === "end") {
          return maxIndex;
        }
        const newIndex = highlightedIndexRef.current + diff;
        if (newIndex < 0) {
          if (newIndex === -1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
            return 0;
          }
          return maxIndex;
        }
        if (newIndex > maxIndex) {
          if (newIndex === maxIndex + 1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap || Math.abs(diff) > 1) {
            return maxIndex;
          }
          return 0;
        }
        return newIndex;
      };
      const nextIndex = validOptionIndex(getNextIndex(), direction);
      setHighlightedIndex({
        index: nextIndex,
        reason,
        event
      });
      if (autoComplete && diff !== "reset") {
        if (nextIndex === -1) {
          inputRef.current.value = inputValue;
        } else {
          const option = getOptionLabel(filteredOptions[nextIndex]);
          inputRef.current.value = option;
          const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
          if (index === 0 && inputValue.length > 0) {
            inputRef.current.setSelectionRange(inputValue.length, option.length);
          }
        }
      }
    });
    const syncHighlightedIndex = React16.useCallback(() => {
      if (!popupOpen) {
        return;
      }
      const valueItem = multiple ? value[0] : value;
      if (filteredOptions.length === 0 || valueItem == null) {
        changeHighlightedIndex({
          diff: "reset"
        });
        return;
      }
      if (!listboxRef.current) {
        return;
      }
      if (valueItem != null) {
        const currentOption = filteredOptions[highlightedIndexRef.current];
        if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue2(currentOption, val)) !== -1) {
          return;
        }
        const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue2(optionItem, valueItem));
        if (itemIndex === -1) {
          changeHighlightedIndex({
            diff: "reset"
          });
        } else {
          setHighlightedIndex({
            index: itemIndex
          });
        }
        return;
      }
      if (highlightedIndexRef.current >= filteredOptions.length - 1) {
        setHighlightedIndex({
          index: filteredOptions.length - 1
        });
        return;
      }
      setHighlightedIndex({
        index: highlightedIndexRef.current
      });
    }, [
      filteredOptions.length,
      multiple ? false : value,
      filterSelectedOptions,
      changeHighlightedIndex,
      setHighlightedIndex,
      popupOpen,
      inputValue,
      multiple
    ]);
    const handleListboxRef = useEventCallback((node2) => {
      setRef(listboxRef, node2);
      if (!node2) {
        return;
      }
      syncHighlightedIndex();
    });
    if (true) {
      React16.useEffect(() => {
        if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
          if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
            console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
          } else {
            console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
          }
        }
      }, [componentName]);
    }
    React16.useEffect(() => {
      syncHighlightedIndex();
    }, [syncHighlightedIndex]);
    const handleOpen = (event) => {
      if (open) {
        return;
      }
      setOpenState(true);
      setInputPristine(true);
      if (onOpen) {
        onOpen(event);
      }
    };
    const handleClose = (event, reason) => {
      if (!open) {
        return;
      }
      setOpenState(false);
      if (onClose) {
        onClose(event, reason);
      }
    };
    const handleValue = (event, newValue, reason, details) => {
      if (Array.isArray(value)) {
        if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
          return;
        }
      } else if (value === newValue) {
        return;
      }
      if (onChange) {
        onChange(event, newValue, reason, details);
      }
      setValueState(newValue);
    };
    const isTouch = React16.useRef(false);
    const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
      let reason = reasonProp;
      let newValue = option;
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        if (true) {
          const matches = newValue.filter((val) => isOptionEqualToValue2(option, val));
          if (matches.length > 1) {
            console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
          }
        }
        const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue2(option, valueItem));
        if (itemIndex === -1) {
          newValue.push(option);
        } else if (origin !== "freeSolo") {
          newValue.splice(itemIndex, 1);
          reason = "removeOption";
        }
      }
      resetInputValue(event, newValue);
      handleValue(event, newValue, reason, {
        option
      });
      if (!disableCloseOnSelect && !event.ctrlKey && !event.metaKey) {
        handleClose(event, reason);
      }
      if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
        inputRef.current.blur();
      }
    };
    function validTagIndex(index, direction) {
      if (index === -1) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
        if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const handleFocusTag = (event, direction) => {
      if (!multiple) {
        return;
      }
      handleClose(event, "toggleInput");
      let nextTag = focusedTag;
      if (focusedTag === -1) {
        if (inputValue === "" && direction === "previous") {
          nextTag = value.length - 1;
        }
      } else {
        nextTag += direction === "next" ? 1 : -1;
        if (nextTag < 0) {
          nextTag = 0;
        }
        if (nextTag === value.length) {
          nextTag = -1;
        }
      }
      nextTag = validTagIndex(nextTag, direction);
      setFocusedTag(nextTag);
      focusTag(nextTag);
    };
    const handleClear = (event) => {
      ignoreFocus.current = true;
      setInputValueState("");
      if (onInputChange) {
        onInputChange(event, "", "clear");
      }
      handleValue(event, multiple ? [] : null, "clear");
    };
    const handleKeyDown2 = (other) => (event) => {
      if (other.onKeyDown) {
        other.onKeyDown(event);
      }
      if (event.defaultMuiPrevented) {
        return;
      }
      if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
      if (event.which !== 229) {
        switch (event.key) {
          case "Home":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "start",
                direction: "next",
                reason: "keyboard",
                event
              });
            }
            break;
          case "End":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "end",
                direction: "previous",
                reason: "keyboard",
                event
              });
            }
            break;
          case "PageUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -pageSize,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "PageDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: pageSize,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: 1,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -1,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowLeft":
            handleFocusTag(event, "previous");
            break;
          case "ArrowRight":
            handleFocusTag(event, "next");
            break;
          case "Enter":
            if (highlightedIndexRef.current !== -1 && popupOpen) {
              const option = filteredOptions[highlightedIndexRef.current];
              const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
              event.preventDefault();
              if (disabled) {
                return;
              }
              selectNewValue(event, option, "selectOption");
              if (autoComplete) {
                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
              }
            } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
              if (multiple) {
                event.preventDefault();
              }
              selectNewValue(event, inputValue, "createOption", "freeSolo");
            }
            break;
          case "Escape":
            if (popupOpen) {
              event.preventDefault();
              event.stopPropagation();
              handleClose(event, "escape");
            } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
              event.preventDefault();
              event.stopPropagation();
              handleClear(event);
            }
            break;
          case "Backspace":
            if (multiple && !readOnly && inputValue === "" && value.length > 0) {
              const index = focusedTag === -1 ? value.length - 1 : focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index]
              });
            }
            break;
          default:
        }
      }
    };
    const handleFocus = (event) => {
      setFocused(true);
      if (openOnFocus && !ignoreFocus.current) {
        handleOpen(event);
      }
    };
    const handleBlur = (event) => {
      if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {
        inputRef.current.focus();
        return;
      }
      setFocused(false);
      firstFocus.current = true;
      ignoreFocus.current = false;
      if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
        selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
      } else if (autoSelect && freeSolo && inputValue !== "") {
        selectNewValue(event, inputValue, "blur", "freeSolo");
      } else if (clearOnBlur) {
        resetInputValue(event, value);
      }
      handleClose(event, "blur");
    };
    const handleInputChange = (event) => {
      const newValue = event.target.value;
      if (inputValue !== newValue) {
        setInputValueState(newValue);
        setInputPristine(false);
        if (onInputChange) {
          onInputChange(event, newValue, "input");
        }
      }
      if (newValue === "") {
        if (!disableClearable && !multiple) {
          handleValue(event, null, "clear");
        }
      } else {
        handleOpen(event);
      }
    };
    const handleOptionMouseOver = (event) => {
      setHighlightedIndex({
        event,
        index: Number(event.currentTarget.getAttribute("data-option-index")),
        reason: "mouse"
      });
    };
    const handleOptionTouchStart = () => {
      isTouch.current = true;
    };
    const handleOptionClick = (event) => {
      const index = Number(event.currentTarget.getAttribute("data-option-index"));
      selectNewValue(event, filteredOptions[index], "selectOption");
      isTouch.current = false;
    };
    const handleTagDelete = (index) => (event) => {
      const newValue = value.slice();
      newValue.splice(index, 1);
      handleValue(event, newValue, "removeOption", {
        option: value[index]
      });
    };
    const handlePopupIndicator = (event) => {
      if (open) {
        handleClose(event, "toggleInput");
      } else {
        handleOpen(event);
      }
    };
    const handleMouseDown = (event) => {
      if (event.target.getAttribute("id") !== id) {
        event.preventDefault();
      }
    };
    const handleClick = () => {
      inputRef.current.focus();
      if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
        inputRef.current.select();
      }
      firstFocus.current = false;
    };
    const handleInputMouseDown = (event) => {
      if (inputValue === "" || !open) {
        handlePopupIndicator(event);
      }
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;
    if (groupBy) {
      const indexBy = new Map();
      let warn = false;
      groupedOptions = filteredOptions.reduce((acc, option, index) => {
        const group = groupBy(option);
        if (acc.length > 0 && acc[acc.length - 1].group === group) {
          acc[acc.length - 1].options.push(option);
        } else {
          if (true) {
            if (indexBy.get(group) && !warn) {
              console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
              warn = true;
            }
            indexBy.set(group, true);
          }
          acc.push({
            key: index,
            index,
            group,
            options: [option]
          });
        }
        return acc;
      }, []);
    }
    if (disabledProp && focused) {
      handleBlur();
    }
    return {
      getRootProps: (other = {}) => _extends({
        "aria-owns": listboxAvailable ? `${id}-listbox` : null
      }, other, {
        onKeyDown: handleKeyDown2(other),
        onMouseDown: handleMouseDown,
        onClick: handleClick
      }),
      getInputLabelProps: () => ({
        id: `${id}-label`,
        htmlFor: id
      }),
      getInputProps: () => ({
        id,
        value: inputValue,
        onBlur: handleBlur,
        onFocus: handleFocus,
        onChange: handleInputChange,
        onMouseDown: handleInputMouseDown,
        "aria-activedescendant": popupOpen ? "" : null,
        "aria-autocomplete": autoComplete ? "both" : "list",
        "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
        "aria-expanded": listboxAvailable,
        autoComplete: "off",
        ref: inputRef,
        autoCapitalize: "none",
        spellCheck: "false",
        role: "combobox"
      }),
      getClearProps: () => ({
        tabIndex: -1,
        onClick: handleClear
      }),
      getPopupIndicatorProps: () => ({
        tabIndex: -1,
        onClick: handlePopupIndicator
      }),
      getTagProps: ({
        index
      }) => _extends({
        key: index,
        "data-tag-index": index,
        tabIndex: -1
      }, !readOnly && {
        onDelete: handleTagDelete(index)
      }),
      getListboxProps: () => ({
        role: "listbox",
        id: `${id}-listbox`,
        "aria-labelledby": `${id}-label`,
        ref: handleListboxRef,
        onMouseDown: (event) => {
          event.preventDefault();
        }
      }),
      getOptionProps: ({
        index,
        option
      }) => {
        const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue2(option, value2));
        const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
        return {
          key: getOptionLabel(option),
          tabIndex: -1,
          role: "option",
          id: `${id}-option-${index}`,
          onMouseOver: handleOptionMouseOver,
          onClick: handleOptionClick,
          onTouchStart: handleOptionTouchStart,
          "data-option-index": index,
          "aria-disabled": disabled,
          "aria-selected": selected
        };
      },
      id,
      inputValue,
      value,
      dirty,
      popupOpen,
      focused: focused || focusedTag !== -1,
      anchorEl,
      setAnchorEl,
      focusedTag,
      groupedOptions
    };
  }

  // node_modules/@mui/base/BadgeUnstyled/BadgeUnstyled.js
  var React17 = __toModule(require_react());
  var import_prop_types6 = __toModule(require_prop_types());

  // node_modules/@mui/base/composeClasses/composeClasses.js
  function composeClasses(slots, getUtilityClass, classes) {
    const output = {};
    Object.keys(slots).forEach((slot) => {
      output[slot] = slots[slot].reduce((acc, key) => {
        if (key) {
          if (classes && classes[key]) {
            acc.push(classes[key]);
          }
          acc.push(getUtilityClass(key));
        }
        return acc;
      }, []).join(" ");
    });
    return output;
  }

  // node_modules/@mui/base/BadgeUnstyled/useBadge.js
  function useBadge(props) {
    const {
      badgeContent: badgeContentProp,
      invisible: invisibleProp = false,
      max: maxProp = 99,
      showZero = false
    } = props;
    const prevProps = usePreviousProps_default({
      badgeContent: badgeContentProp,
      max: maxProp
    });
    let invisible = invisibleProp;
    if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
      invisible = true;
    }
    const {
      badgeContent,
      max: max2 = maxProp
    } = invisible ? prevProps : props;
    const displayValue = badgeContent && Number(badgeContent) > max2 ? `${max2}+` : badgeContent;
    return {
      badgeContent,
      invisible,
      max: max2,
      displayValue
    };
  }

  // node_modules/@mui/base/className/ClassNameGenerator.js
  var defaultGenerator = (componentName) => componentName;
  var createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  var ClassNameGenerator = createClassNameGenerator();
  var ClassNameGenerator_default = ClassNameGenerator;

  // node_modules/@mui/base/generateUtilityClass/generateUtilityClass.js
  var globalStateClassesMapping = {
    active: "Mui-active",
    checked: "Mui-checked",
    completed: "Mui-completed",
    disabled: "Mui-disabled",
    error: "Mui-error",
    expanded: "Mui-expanded",
    focused: "Mui-focused",
    focusVisible: "Mui-focusVisible",
    required: "Mui-required",
    selected: "Mui-selected"
  };
  function generateUtilityClass(componentName, slot) {
    const globalStateClass = globalStateClassesMapping[slot];
    return globalStateClass || `${ClassNameGenerator_default.generate(componentName)}-${slot}`;
  }

  // node_modules/@mui/base/generateUtilityClasses/generateUtilityClasses.js
  function generateUtilityClasses(componentName, slots) {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass(componentName, slot);
    });
    return result;
  }

  // node_modules/@mui/base/BadgeUnstyled/badgeUnstyledClasses.js
  function getBadgeUnstyledUtilityClass(slot) {
    return generateUtilityClass("BaseBadge", slot);
  }
  var badgeUnstyledClasses = generateUtilityClasses("BaseBadge", ["root", "badge", "invisible"]);

  // node_modules/@mui/base/BadgeUnstyled/BadgeUnstyled.js
  var import_jsx_runtime3 = __toModule(require_jsx_runtime());
  var import_jsx_runtime4 = __toModule(require_jsx_runtime());
  var _excluded7 = ["badgeContent", "component", "children", "className", "components", "componentsProps", "invisible", "max", "showZero"];
  var useUtilityClasses = (ownerState) => {
    const {
      invisible
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", invisible && "invisible"]
    };
    return composeClasses(slots, getBadgeUnstyledUtilityClass, void 0);
  };
  var BadgeUnstyled = /* @__PURE__ */ React17.forwardRef(function BadgeUnstyled2(props, ref) {
    const {
      component,
      children,
      className,
      components = {},
      componentsProps = {},
      max: maxProp = 99,
      showZero = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
    const {
      badgeContent,
      max: max2,
      displayValue,
      invisible
    } = useBadge(_extends({}, props, {
      max: maxProp
    }));
    const ownerState = _extends({}, props, {
      badgeContent,
      invisible,
      max: max2,
      showZero
    });
    const classes = useUtilityClasses(ownerState);
    const Root = component || components.Root || "span";
    const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);
    const Badge3 = components.Badge || "span";
    const badgeProps = appendOwnerState(Badge3, componentsProps.badge, ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(Root, _extends({}, rootProps, {
      ref
    }, other, {
      className: clsx_m_default(classes.root, rootProps.className, className),
      children: [children, /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Badge3, _extends({}, badgeProps, {
        className: clsx_m_default(classes.badge, badgeProps.className),
        children: displayValue
      }))]
    }));
  });
  true ? BadgeUnstyled.propTypes = {
    badgeContent: import_prop_types6.default.node,
    children: import_prop_types6.default.node,
    className: import_prop_types6.default.string,
    component: import_prop_types6.default.elementType,
    components: import_prop_types6.default.shape({
      Badge: import_prop_types6.default.elementType,
      Root: import_prop_types6.default.elementType
    }),
    componentsProps: import_prop_types6.default.shape({
      badge: import_prop_types6.default.object,
      root: import_prop_types6.default.object
    }),
    invisible: import_prop_types6.default.bool,
    max: import_prop_types6.default.number,
    showZero: import_prop_types6.default.bool
  } : void 0;
  var BadgeUnstyled_default = BadgeUnstyled;

  // node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js
  var React18 = __toModule(require_react());
  var import_prop_types7 = __toModule(require_prop_types());
  var import_jsx_runtime5 = __toModule(require_jsx_runtime());
  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }
  function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }
  function ClickAwayListener(props) {
    const {
      children,
      disableReactTree = false,
      mouseEvent = "onClick",
      onClickAway,
      touchEvent = "onTouchEnd"
    } = props;
    const movedRef = React18.useRef(false);
    const nodeRef = React18.useRef(null);
    const activatedRef = React18.useRef(false);
    const syntheticEventRef = React18.useRef(false);
    React18.useEffect(() => {
      setTimeout(() => {
        activatedRef.current = true;
      }, 0);
      return () => {
        activatedRef.current = false;
      };
    }, []);
    const handleRef = useForkRef(children.ref, nodeRef);
    const handleClickAway = useEventCallback((event) => {
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = ownerDocument(nodeRef.current);
      if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      let insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
      }
      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    });
    const createHandleSynthetic = (handlerName) => (event) => {
      syntheticEventRef.current = true;
      const childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const childrenProps = {
      ref: handleRef
    };
    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }
    React18.useEffect(() => {
      if (touchEvent !== false) {
        const mappedTouchEvent = mapEventPropToEvent(touchEvent);
        const doc = ownerDocument(nodeRef.current);
        const handleTouchMove = () => {
          movedRef.current = true;
        };
        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return () => {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [handleClickAway, touchEvent]);
    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }
    React18.useEffect(() => {
      if (mouseEvent !== false) {
        const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        const doc = ownerDocument(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return () => {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }
      return void 0;
    }, [handleClickAway, mouseEvent]);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(React18.Fragment, {
      children: /* @__PURE__ */ React18.cloneElement(children, childrenProps)
    });
  }
  true ? ClickAwayListener.propTypes = {
    children: elementAcceptingRef_default.isRequired,
    disableReactTree: import_prop_types7.default.bool,
    mouseEvent: import_prop_types7.default.oneOf(["onClick", "onMouseDown", "onMouseUp", false]),
    onClickAway: import_prop_types7.default.func.isRequired,
    touchEvent: import_prop_types7.default.oneOf(["onTouchEnd", "onTouchStart", false])
  } : void 0;
  if (true) {
    ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
  }
  var ClickAwayListener_default = ClickAwayListener;

  // node_modules/@popperjs/core/lib/enums.js
  var top2 = "top";
  var bottom2 = "bottom";
  var right2 = "right";
  var left2 = "left";
  var auto = "auto";
  var basePlacements = [top2, bottom2, right2, left2];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node2) {
    if (node2 == null) {
      return window;
    }
    if (node2.toString() !== "[object Window]") {
      var ownerDocument2 = node2.ownerDocument;
      return ownerDocument2 ? ownerDocument2.defaultView || window : window;
    }
    return node2;
  }

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node2) {
    var OwnElement = getWindow(node2).Element;
    return node2 instanceof OwnElement || node2 instanceof Element;
  }
  function isHTMLElement(node2) {
    var OwnElement = getWindow(node2).HTMLElement;
    return node2 instanceof OwnElement || node2 instanceof HTMLElement;
  }
  function isShadowRoot(node2) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node2).ShadowRoot;
    return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
  }

  // node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style3 = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style3);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style3 = styleProperties.reduce(function(style4, property) {
          style4[property] = "";
          return style4;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style3);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth;
      if (offsetWidth > 0) {
        scaleX = round(rect.width) / offsetWidth || 1;
      }
      if (offsetHeight > 0) {
        scaleY = round(rect.height) / offsetHeight || 1;
      }
    }
    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width2 = element.offsetWidth;
    var height2 = element.offsetHeight;
    if (Math.abs(clientRect.width - width2) <= 1) {
      width2 = clientRect.width;
    }
    if (Math.abs(clientRect.height - height2) <= 1) {
      height2 = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width2,
      height: height2
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next2 = child;
      do {
        if (next2 && parent.isSameNode(next2)) {
          return true;
        }
        next2 = next2.parentNode || next2.host;
      } while (next2);
    }
    return false;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
    var isIE = navigator.userAgent.indexOf("Trident") !== -1;
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css2 = getComputedStyle(currentNode);
      if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding2, state) {
    padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding2;
    return mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left2, right2].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top2 : left2;
    var maxProp = axis === "y" ? bottom2 : right2;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (true) {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      if (true) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position3 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left2;
    var sideY = top2;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle(offsetParent).position !== "static" && position3 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top2 || (placement === left2 || placement === right2) && variation === end) {
        sideY = bottom2;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left2 || (placement === top2 || placement === bottom2) && variation === end) {
        sideX = right2;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position3
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    if (true) {
      var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
      }
    }
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash2 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash2[matched];
    });
  }

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash3 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash3[matched];
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node2) {
    var win = getWindow(node2);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width2 = html.clientWidth;
    var height2 = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width2 = visualViewport.width;
      height2 = visualViewport.height;
      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width: width2,
      height: height2,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width2 = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height2 = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width2;
    }
    return {
      width: width2,
      height: height2,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle(element), overflow2 = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow2 + overflowY + overflowX);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node2) {
    if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
      return node2.ownerDocument.body;
    }
    if (isHTMLElement(node2) && isScrollParent(node2)) {
      return node2;
    }
    return getScrollParent(getParentNode(node2));
  }

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
  }

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top2:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom2:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right2:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left2:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right2, bottom2].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top2, bottom2].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
      if (true) {
        console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
      }
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding2 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top2, bottom2].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow2 = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding: padding2
      });
      var mainVariationSide = isVertical ? isStartVariation ? right2 : left2 : isStartVariation ? bottom2 : top2;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow2[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow2[mainVariationSide] <= 0, overflow2[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow2, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow2.top - rect.height - preventedOffsets.y,
      right: overflow2.right - rect.width + preventedOffsets.x,
      bottom: overflow2.bottom - rect.height + preventedOffsets.y,
      left: overflow2.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow2) {
    return [top2, right2, bottom2, left2].some(function(side) {
      return overflow2[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left2, top2].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left2, right2].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding2 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow2 = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding: padding2,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top2 : left2;
      var altSide = mainAxis === "y" ? bottom2 : right2;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow2[mainSide];
      var max2 = offset2 - overflow2[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top2 : left2;
      var _altSide = mainAxis === "x" ? bottom2 : right2;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow2[_mainSide];
      var _max = _offset - overflow2[_altSide];
      var isOriginSide = [top2, left2].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node2) {
    if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
      return getWindowScroll(node2);
    } else {
      return getHTMLElementScroll(node2);
    }
  }

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order2(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order2(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce2(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@popperjs/core/lib/utils/format.js
  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function(p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  // node_modules/@popperjs/core/lib/utils/validateModifiers.js
  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
  function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
        return self2.indexOf(value) === index;
      }).forEach(function(key) {
        switch (key) {
          case "name":
            if (typeof modifier.name !== "string") {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
            }
            break;
          case "enabled":
            if (typeof modifier.enabled !== "boolean") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
            }
            break;
          case "phase":
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
            }
            break;
          case "fn":
            if (typeof modifier.fn !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "effect":
            if (modifier.effect != null && typeof modifier.effect !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "requires":
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
            }
            break;
          case "requiresIfExists":
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
            }
            break;
          case "options":
          case "data":
            break;
          default:
            console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
              return '"' + s + '"';
            }).join(", ") + '; but "' + key + '" was provided.');
        }
        modifier.requires && modifier.requires.forEach(function(requirement) {
          if (modifiers.find(function(mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  // node_modules/@popperjs/core/lib/utils/uniqueBy.js
  function uniqueBy(arr, fn2) {
    var identifiers = new Set();
    return arr.filter(function(item) {
      var identifier2 = fn2(item);
      if (!identifiers.has(identifier2)) {
        identifiers.add(identifier2);
        return true;
      }
    });
  }

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // node_modules/@popperjs/core/lib/createPopper.js
  var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
  var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          if (true) {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);
            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function(_ref2) {
                var name = _ref2.name;
                return name === "flip";
              });
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
            if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin2) {
              return parseFloat(margin2);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (true) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        update: debounce2(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        if (true) {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref3) {
          var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  // node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // node_modules/@mui/base/PopperUnstyled/PopperUnstyled.js
  var import_prop_types9 = __toModule(require_prop_types());
  var React20 = __toModule(require_react());

  // node_modules/@mui/base/Portal/Portal.js
  var React19 = __toModule(require_react());
  var ReactDOM = __toModule(require_react_dom());
  var import_prop_types8 = __toModule(require_prop_types());
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  var Portal = /* @__PURE__ */ React19.forwardRef(function Portal2(props, ref) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React19.useState(null);
    const handleRef = useForkRef(/* @__PURE__ */ React19.isValidElement(children) ? children.ref : null, ref);
    useEnhancedEffect_default(() => {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect_default(() => {
      if (mountNode && !disablePortal) {
        setRef(ref, mountNode);
        return () => {
          setRef(ref, null);
        };
      }
      return void 0;
    }, [ref, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React19.isValidElement(children)) {
        return /* @__PURE__ */ React19.cloneElement(children, {
          ref: handleRef
        });
      }
      return children;
    }
    return mountNode ? /* @__PURE__ */ ReactDOM.createPortal(children, mountNode) : mountNode;
  });
  true ? Portal.propTypes = {
    children: import_prop_types8.default.node,
    container: import_prop_types8.default.oneOfType([HTMLElementType, import_prop_types8.default.func]),
    disablePortal: import_prop_types8.default.bool
  } : void 0;
  if (true) {
    Portal["propTypes"] = exactProp(Portal.propTypes);
  }
  var Portal_default = Portal;

  // node_modules/@mui/base/PopperUnstyled/PopperUnstyled.js
  var import_jsx_runtime6 = __toModule(require_jsx_runtime());
  var _excluded8 = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "TransitionProps"];
  var _excluded23 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];
  function flipPlacement(placement, direction) {
    if (direction === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var defaultPopperOptions = {};
  var PopperTooltip = /* @__PURE__ */ React20.forwardRef(function PopperTooltip2(props, ref) {
    const {
      anchorEl,
      children,
      direction,
      disablePortal,
      modifiers,
      open,
      placement: initialPlacement,
      popperOptions,
      popperRef: popperRefProp,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
    const tooltipRef = React20.useRef(null);
    const ownRef = useForkRef(tooltipRef, ref);
    const popperRef = React20.useRef(null);
    const handlePopperRef = useForkRef(popperRef, popperRefProp);
    const handlePopperRefRef = React20.useRef(handlePopperRef);
    useEnhancedEffect_default(() => {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React20.useImperativeHandle(popperRefProp, () => popperRef.current, []);
    const rtlPlacement = flipPlacement(initialPlacement, direction);
    const [placement, setPlacement] = React20.useState(rtlPlacement);
    React20.useEffect(() => {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    useEnhancedEffect_default(() => {
      if (!anchorEl || !open) {
        return void 0;
      }
      const handlePopperUpdate = (data) => {
        setPlacement(data.placement);
      };
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      if (true) {
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      let popperModifiers = [{
        name: "preventOverflow",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "flip",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "onUpdate",
        enabled: true,
        phase: "afterWrite",
        fn: ({
          state
        }) => {
          handlePopperUpdate(state);
        }
      }];
      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }
      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }
      const popper2 = createPopper(resolveAnchorEl(anchorEl), tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper2);
      return () => {
        popper2.destroy();
        handlePopperRefRef.current(null);
      };
    }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    const childProps = {
      placement
    };
    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", _extends({
      ref: ownRef,
      role: "tooltip"
    }, other, {
      children: typeof children === "function" ? children(childProps) : children
    }));
  });
  var PopperUnstyled = /* @__PURE__ */ React20.forwardRef(function PopperUnstyled2(props, ref) {
    const {
      anchorEl,
      children,
      container: containerProp,
      direction = "ltr",
      disablePortal = false,
      keepMounted = false,
      modifiers,
      open,
      placement = "bottom",
      popperOptions = defaultPopperOptions,
      popperRef,
      style: style3,
      transition = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded23);
    const [exited, setExited] = React20.useState(true);
    const handleEnter = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    if (!keepMounted && !open && (!transition || exited)) {
      return null;
    }
    const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : void 0);
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Portal_default, {
      disablePortal,
      container,
      children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(PopperTooltip, _extends({
        anchorEl,
        direction,
        disablePortal,
        modifiers,
        ref,
        open: transition ? !exited : open,
        placement,
        popperOptions,
        popperRef
      }, other, {
        style: _extends({
          position: "fixed",
          top: 0,
          left: 0,
          display: !open && keepMounted && (!transition || exited) ? "none" : null
        }, style3),
        TransitionProps: transition ? {
          in: open,
          onEnter: handleEnter,
          onExited: handleExited
        } : null,
        children
      }))
    });
  });
  true ? PopperUnstyled.propTypes = {
    anchorEl: chainPropTypes(import_prop_types9.default.oneOfType([HTMLElementType, import_prop_types9.default.object, import_prop_types9.default.func]), (props) => {
      if (props.open) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
        }
      }
      return null;
    }),
    children: import_prop_types9.default.oneOfType([import_prop_types9.default.node, import_prop_types9.default.func]),
    container: import_prop_types9.default.oneOfType([HTMLElementType, import_prop_types9.default.func]),
    direction: import_prop_types9.default.oneOf(["ltr", "rtl"]),
    disablePortal: import_prop_types9.default.bool,
    keepMounted: import_prop_types9.default.bool,
    modifiers: import_prop_types9.default.arrayOf(import_prop_types9.default.shape({
      data: import_prop_types9.default.object,
      effect: import_prop_types9.default.func,
      enabled: import_prop_types9.default.bool,
      fn: import_prop_types9.default.func,
      name: import_prop_types9.default.any,
      options: import_prop_types9.default.object,
      phase: import_prop_types9.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types9.default.arrayOf(import_prop_types9.default.string),
      requiresIfExists: import_prop_types9.default.arrayOf(import_prop_types9.default.string)
    })),
    open: import_prop_types9.default.bool.isRequired,
    placement: import_prop_types9.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    popperOptions: import_prop_types9.default.shape({
      modifiers: import_prop_types9.default.array,
      onFirstUpdate: import_prop_types9.default.func,
      placement: import_prop_types9.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types9.default.oneOf(["absolute", "fixed"])
    }),
    popperRef: refType_default,
    style: import_prop_types9.default.object,
    transition: import_prop_types9.default.bool
  } : void 0;
  var PopperUnstyled_default = PopperUnstyled;

  // node_modules/@mui/base/ModalUnstyled/ModalUnstyled.js
  var React22 = __toModule(require_react());
  var import_prop_types11 = __toModule(require_prop_types());

  // node_modules/@mui/base/ModalUnstyled/ModalManager.js
  function isOverflowing(container) {
    const doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude = [], show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    const blacklistTagNames = ["TEMPLATE", "SCRIPT", "STYLE"];
    [].forEach.call(container.children, (element) => {
      if (blacklist.indexOf(element) === -1 && blacklistTagNames.indexOf(element.tagName) === -1) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index) => {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      const parent = container.parentElement;
      const containerWindow = ownerWindow(container);
      const scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property
      }) => {
        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = class {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, true);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  };

  // node_modules/@mui/base/TrapFocus/TrapFocus.js
  var React21 = __toModule(require_react());
  var import_prop_types10 = __toModule(require_prop_types());
  var import_jsx_runtime7 = __toModule(require_jsx_runtime());
  var import_jsx_runtime8 = __toModule(require_jsx_runtime());
  var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex"), 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function TrapFocus(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled: isEnabled2 = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React21.useRef();
    const sentinelStart = React21.useRef(null);
    const sentinelEnd = React21.useRef(null);
    const nodeToRestore = React21.useRef(null);
    const reactFocusEventTarget = React21.useRef(null);
    const activated = React21.useRef(false);
    const rootRef = React21.useRef(null);
    const handleRef = useForkRef(children.ref, rootRef);
    const lastKeydown = React21.useRef(null);
    React21.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React21.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", -1);
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React21.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      const contain = (nativeEvent) => {
        const {
          current: rootElement
        } = rootRef;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || disableEnforceFocus || !isEnabled2() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (!rootElement.contains(doc.activeElement)) {
          if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
            reactFocusEventTarget.current = null;
          } else if (reactFocusEventTarget.current !== null) {
            return;
          }
          if (!activated.current) {
            return;
          }
          let tabbable = [];
          if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
            tabbable = getTabbable(rootRef.current);
          }
          if (tabbable.length > 0) {
            var _lastKeydown$current, _lastKeydown$current2;
            const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
            const focusNext = tabbable[0];
            const focusPrevious = tabbable[tabbable.length - 1];
            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          } else {
            rootElement.focus();
          }
        }
      };
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled2() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          sentinelEnd.current.focus();
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement.tagName === "BODY") {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled2, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(React21.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-test": "sentinelStart"
      }), /* @__PURE__ */ React21.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-test": "sentinelEnd"
      })]
    });
  }
  true ? TrapFocus.propTypes = {
    children: elementAcceptingRef_default,
    disableAutoFocus: import_prop_types10.default.bool,
    disableEnforceFocus: import_prop_types10.default.bool,
    disableRestoreFocus: import_prop_types10.default.bool,
    getTabbable: import_prop_types10.default.func,
    isEnabled: import_prop_types10.default.func,
    open: import_prop_types10.default.bool.isRequired
  } : void 0;
  if (true) {
    TrapFocus["propTypes"] = exactProp(TrapFocus.propTypes);
  }
  var TrapFocus_default = TrapFocus;

  // node_modules/@mui/base/ModalUnstyled/modalUnstyledClasses.js
  function getModalUtilityClass(slot) {
    return generateUtilityClass("MuiModal", slot);
  }
  var modalUnstyledClasses = generateUtilityClasses("MuiModal", ["root", "hidden"]);

  // node_modules/@mui/base/ModalUnstyled/ModalUnstyled.js
  var import_jsx_runtime9 = __toModule(require_jsx_runtime());
  var import_jsx_runtime10 = __toModule(require_jsx_runtime());
  var _excluded9 = ["BackdropComponent", "BackdropProps", "children", "classes", "className", "closeAfterTransition", "component", "components", "componentsProps", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "theme", "onTransitionEnter", "onTransitionExited"];
  var useUtilityClasses2 = (ownerState) => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"]
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };
  function getContainer2(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager();
  var ModalUnstyled = /* @__PURE__ */ React22.forwardRef(function ModalUnstyled2(props, ref) {
    const {
      BackdropComponent,
      BackdropProps,
      children,
      classes: classesProp,
      className,
      closeAfterTransition = false,
      component = "div",
      components = {},
      componentsProps = {},
      container,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      manager = defaultManager,
      onBackdropClick,
      onClose,
      onKeyDown,
      open,
      theme,
      onTransitionEnter,
      onTransitionExited
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
    const [exited, setExited] = React22.useState(true);
    const modal = React22.useRef({});
    const mountNodeRef = React22.useRef(null);
    const modalRef = React22.useRef(null);
    const handleRef = useForkRef(modalRef, ref);
    const hasTransition = getHasTransition(props);
    const getDoc = () => ownerDocument(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mountNode = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      modalRef.current.scrollTop = 0;
    };
    const handleOpen = useEventCallback(() => {
      const resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React22.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = useEventCallback((node2) => {
      mountNodeRef.current = node2;
      if (!node2) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else {
        ariaHidden(modalRef.current, true);
      }
    });
    const handleClose = React22.useCallback(() => {
      manager.remove(getModal());
    }, [manager]);
    React22.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React22.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const ownerState = _extends({}, props, {
      classes: classesProp,
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      exited,
      hideBackdrop,
      keepMounted
    });
    const classes = useUtilityClasses2(ownerState);
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    const handleEnter = () => {
      setExited(false);
      if (onTransitionEnter) {
        onTransitionEnter();
      }
    };
    const handleExited = () => {
      setExited(true);
      if (onTransitionExited) {
        onTransitionExited();
      }
      if (closeAfterTransition) {
        handleClose();
      }
    };
    const handleBackdropClick = (event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const handleKeyDown2 = (event) => {
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.key !== "Escape" || !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
      childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
    }
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {};
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Portal_default, {
      ref: handlePortalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(Root, _extends({
        role: "presentation"
      }, rootProps, !isHostComponent_default(Root) && {
        as: component,
        ownerState: _extends({}, ownerState, rootProps.ownerState),
        theme
      }, other, {
        ref: handleRef,
        onKeyDown: handleKeyDown2,
        className: clsx_m_default(classes.root, rootProps.className, className),
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(BackdropComponent, _extends({
          "aria-hidden": true,
          open,
          onClick: handleBackdropClick
        }, BackdropProps)) : null, /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(TrapFocus_default, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React22.cloneElement(children, childProps)
        })]
      }))
    });
  });
  true ? ModalUnstyled.propTypes = {
    BackdropComponent: import_prop_types11.default.elementType,
    BackdropProps: import_prop_types11.default.object,
    children: elementAcceptingRef_default.isRequired,
    classes: import_prop_types11.default.object,
    className: import_prop_types11.default.string,
    closeAfterTransition: import_prop_types11.default.bool,
    component: import_prop_types11.default.elementType,
    components: import_prop_types11.default.shape({
      Root: import_prop_types11.default.elementType
    }),
    componentsProps: import_prop_types11.default.shape({
      root: import_prop_types11.default.object
    }),
    container: import_prop_types11.default.oneOfType([HTMLElementType, import_prop_types11.default.func]),
    disableAutoFocus: import_prop_types11.default.bool,
    disableEnforceFocus: import_prop_types11.default.bool,
    disableEscapeKeyDown: import_prop_types11.default.bool,
    disablePortal: import_prop_types11.default.bool,
    disableRestoreFocus: import_prop_types11.default.bool,
    disableScrollLock: import_prop_types11.default.bool,
    hideBackdrop: import_prop_types11.default.bool,
    keepMounted: import_prop_types11.default.bool,
    onBackdropClick: import_prop_types11.default.func,
    onClose: import_prop_types11.default.func,
    onKeyDown: import_prop_types11.default.func,
    open: import_prop_types11.default.bool.isRequired
  } : void 0;
  var ModalUnstyled_default = ModalUnstyled;

  // node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js
  var React23 = __toModule(require_react());
  var import_prop_types12 = __toModule(require_prop_types());
  var import_jsx_runtime11 = __toModule(require_jsx_runtime());
  var import_jsx_runtime12 = __toModule(require_jsx_runtime());
  var _excluded10 = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
  }
  var styles = {
    shadow: {
      visibility: "hidden",
      position: "absolute",
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      transform: "translateZ(0)"
    }
  };
  var TextareaAutosize = /* @__PURE__ */ React23.forwardRef(function TextareaAutosize2(props, ref) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style3,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
    const {
      current: isControlled
    } = React23.useRef(value != null);
    const inputRef = React23.useRef(null);
    const handleRef = useForkRef(ref, inputRef);
    const shadowRef = React23.useRef(null);
    const renders = React23.useRef(0);
    const [state, setState] = React23.useState({});
    const syncHeight = React23.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      const computedStyle = containerWindow.getComputedStyle(input);
      if (computedStyle.width === "0px") {
        return;
      }
      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      const boxSizing2 = computedStyle["box-sizing"];
      const padding2 = getStyleValue(computedStyle, "padding-bottom") + getStyleValue(computedStyle, "padding-top");
      const border2 = getStyleValue(computedStyle, "border-bottom-width") + getStyleValue(computedStyle, "border-top-width");
      const innerHeight = inputShallow.scrollHeight;
      inputShallow.value = "x";
      const singleRowHeight = inputShallow.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
      const overflow2 = Math.abs(outerHeight - innerHeight) <= 1;
      setState((prevState) => {
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow2)) {
          renders.current += 1;
          return {
            overflow: overflow2,
            outerHeightStyle
          };
        }
        if (true) {
          if (renders.current === 20) {
            console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
          }
        }
        return prevState;
      });
    }, [maxRows, minRows, props.placeholder]);
    React23.useEffect(() => {
      const handleResize = debounce(() => {
        renders.current = 0;
        syncHeight();
      });
      const containerWindow = ownerWindow(inputRef.current);
      containerWindow.addEventListener("resize", handleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(handleResize);
        resizeObserver.observe(inputRef.current);
      }
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [syncHeight]);
    useEnhancedEffect_default(() => {
      syncHeight();
    });
    React23.useEffect(() => {
      renders.current = 0;
    }, [value]);
    const handleChange = (event) => {
      renders.current = 0;
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(React23.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime11.jsx)("textarea", _extends({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: _extends({
          height: state.outerHeightStyle,
          overflow: state.overflow ? "hidden" : null
        }, style3)
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends({}, styles.shadow, style3, {
          padding: 0
        })
      })]
    });
  });
  true ? TextareaAutosize.propTypes = {
    className: import_prop_types12.default.string,
    maxRows: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    minRows: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    onChange: import_prop_types12.default.func,
    placeholder: import_prop_types12.default.string,
    style: import_prop_types12.default.object,
    value: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.string), import_prop_types12.default.number, import_prop_types12.default.string])
  } : void 0;
  var TextareaAutosize_default = TextareaAutosize;

  // node_modules/@mui/material/styles/createMixins.js
  function createMixins(breakpoints, spacing2, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [`${breakpoints.up("xs")} and (orientation: landscape)`]: {
          minHeight: 48
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  // node_modules/@mui/material/styles/createPalette.js
  var _excluded11 = ["mode", "contrastThreshold", "tonalOffset"];
  var light = {
    text: {
      primary: "rgba(0, 0, 0, 0.87)",
      secondary: "rgba(0, 0, 0, 0.6)",
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    divider: "rgba(0, 0, 0, 0.12)",
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    action: {
      active: "rgba(0, 0, 0, 0.54)",
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      disabled: "rgba(0, 0, 0, 0.26)",
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette2) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette2, other = _objectWithoutPropertiesLoose(palette2, _excluded11);
    const primary = palette2.primary || getDefaultPrimary(mode);
    const secondary = palette2.secondary || getDefaultSecondary(mode);
    const error = palette2.error || getDefaultError(mode);
    const info = palette2.info || getDefaultInfo(mode);
    const success = palette2.success || getDefaultSuccess(mode);
    const warning = palette2.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = _extends({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color2.main !== "string") {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    const modes = {
      dark,
      light
    };
    if (true) {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = deepmerge(_extends({
      common: common_default,
      mode,
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      error: augmentColor({
        color: error,
        name: "error"
      }),
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      info: augmentColor({
        color: info,
        name: "info"
      }),
      success: augmentColor({
        color: success,
        name: "success"
      }),
      grey: grey_default,
      contrastThreshold,
      getContrastText,
      augmentColor,
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  // node_modules/@mui/material/styles/createTypography.js
  var _excluded12 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round2(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography2) {
    const _ref = typeof typography2 === "function" ? typography2(palette2) : typography2, {
      fontFamily: fontFamily2 = defaultFontFamily,
      fontSize: fontSize2 = 14,
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      htmlFontSize = 16,
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded12);
    if (true) {
      if (typeof fontSize2 !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize2 / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight2, size, lineHeight2, letterSpacing2, casing) => _extends({
      fontFamily: fontFamily2,
      fontWeight: fontWeight2,
      fontSize: pxToRem(size),
      lineHeight: lineHeight2
    }, fontFamily2 === defaultFontFamily ? {
      letterSpacing: `${round2(letterSpacing2 / size)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return deepmerge(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily: fontFamily2,
      fontSize: fontSize2,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
    });
  }

  // node_modules/@mui/material/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default2 = shadows;

  // node_modules/@mui/material/styles/createTransitions.js
  var _excluded13 = ["duration", "easing", "delay"];
  var easing = {
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    standard: 300,
    complex: 375,
    enteringScreen: 225,
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant = height2 / 36;
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded13);
      if (true) {
        const isString = (value) => typeof value === "string";
        const isNumber2 = (value) => !isNaN(parseFloat(value));
        if (!isString(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber2(durationOption) && !isString(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber2(delay) && !isString(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // node_modules/@mui/material/styles/zIndex.js
  var zIndex2 = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex2;

  // node_modules/@mui/material/styles/createTheme.js
  var _excluded14 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme2(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded14);
    const palette2 = createPalette(paletteInput);
    const systemTheme = createTheme_default(options);
    let muiTheme = deepmerge(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, systemTheme.spacing, mixinsInput),
      palette: palette2,
      shadows: shadows_default2.slice(),
      typography: createTypography(palette2, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex_default)
    });
    muiTheme = deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = generateUtilityClass("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    return muiTheme;
  }
  var createTheme_default2 = createTheme2;

  // node_modules/@mui/material/styles/useTheme.js
  var React24 = __toModule(require_react());

  // node_modules/@mui/material/styles/defaultTheme.js
  var defaultTheme = createTheme_default2();
  var defaultTheme_default = defaultTheme;

  // node_modules/@mui/material/styles/useTheme.js
  function useTheme5() {
    const theme = useTheme_default(defaultTheme_default);
    if (true) {
      React24.useDebugValue(theme);
    }
    return theme;
  }

  // node_modules/@mui/material/styles/useThemeProps.js
  function useThemeProps2({
    props,
    name
  }) {
    return useThemeProps({
      props,
      name,
      defaultTheme: defaultTheme_default
    });
  }

  // node_modules/@mui/material/styles/styled.js
  var rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
  var slotShouldForwardProp = shouldForwardProp;
  var styled2 = createStyled3({
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp
  });
  var styled_default = styled2;

  // node_modules/@mui/material/utils/capitalize.js
  var capitalize_default = capitalize;

  // node_modules/@mui/material/utils/createSvgIcon.js
  var React26 = __toModule(require_react());

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  var React25 = __toModule(require_react());
  var import_prop_types13 = __toModule(require_prop_types());

  // node_modules/@mui/material/SvgIcon/svgIconClasses.js
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass("MuiSvgIcon", slot);
  }
  var svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  var import_jsx_runtime13 = __toModule(require_jsx_runtime());
  var import_jsx_runtime14 = __toModule(require_jsx_runtime());
  var _excluded15 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  var useUtilityClasses3 = (ownerState) => {
    const {
      color: color2,
      fontSize: fontSize2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize_default(color2)}`, `fontSize${capitalize_default(fontSize2)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };
  var SvgIconRoot = styled_default("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.color !== "inherit" && styles4[`color${capitalize_default(ownerState.color)}`], styles4[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _theme$palette$ownerS, _theme$palette, _theme$palette$ownerS2, _theme$palette2, _theme$palette2$actio, _theme$palette3, _theme$palette3$actio;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      fill: "currentColor",
      flexShrink: 0,
      transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
        duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
        medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
        large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875"
      }[ownerState.fontSize],
      color: (_theme$palette$ownerS = (_theme$palette = theme.palette) == null ? void 0 : (_theme$palette$ownerS2 = _theme$palette[ownerState.color]) == null ? void 0 : _theme$palette$ownerS2.main) != null ? _theme$palette$ownerS : {
        action: (_theme$palette2 = theme.palette) == null ? void 0 : (_theme$palette2$actio = _theme$palette2.action) == null ? void 0 : _theme$palette2$actio.active,
        disabled: (_theme$palette3 = theme.palette) == null ? void 0 : (_theme$palette3$actio = _theme$palette3.action) == null ? void 0 : _theme$palette3$actio.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  var SvgIcon = /* @__PURE__ */ React25.forwardRef(function SvgIcon2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color: color2 = "inherit",
      component = "svg",
      fontSize: fontSize2 = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      fontSize: fontSize2,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses3(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(SvgIconRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className),
      ownerState,
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, {
      children: [children, titleAccess ? /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("title", {
        children: titleAccess
      }) : null]
    }));
  });
  true ? SvgIcon.propTypes = {
    children: import_prop_types13.default.node,
    classes: import_prop_types13.default.object,
    className: import_prop_types13.default.string,
    color: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types13.default.string]),
    component: import_prop_types13.default.elementType,
    fontSize: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types13.default.string]),
    htmlColor: import_prop_types13.default.string,
    inheritViewBox: import_prop_types13.default.bool,
    shapeRendering: import_prop_types13.default.string,
    sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
    titleAccess: import_prop_types13.default.string,
    viewBox: import_prop_types13.default.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  var SvgIcon_default = SvgIcon;

  // node_modules/@mui/material/utils/createSvgIcon.js
  var import_jsx_runtime15 = __toModule(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    const Component2 = (props, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(SvgIcon_default, _extends({
      "data-testid": `${displayName}Icon`,
      ref
    }, props, {
      children: path
    }));
    if (true) {
      Component2.displayName = `${displayName}Icon`;
    }
    Component2.muiName = SvgIcon_default.muiName;
    return /* @__PURE__ */ React26.memo(/* @__PURE__ */ React26.forwardRef(Component2));
  }

  // node_modules/@mui/material/utils/debounce.js
  var debounce_default = debounce;

  // node_modules/@mui/material/utils/isMuiElement.js
  var isMuiElement_default = isMuiElement;

  // node_modules/@mui/material/utils/ownerDocument.js
  var ownerDocument_default = ownerDocument;

  // node_modules/@mui/material/utils/ownerWindow.js
  var ownerWindow_default = ownerWindow;

  // node_modules/@mui/material/utils/requirePropFactory.js
  var requirePropFactory_default = requirePropFactory;

  // node_modules/@mui/material/utils/useEnhancedEffect.js
  var useEnhancedEffect_default2 = useEnhancedEffect_default;

  // node_modules/@mui/material/utils/useId.js
  var useId_default = useId2;

  // node_modules/@mui/material/utils/unsupportedProp.js
  var unsupportedProp_default = unsupportedProp;

  // node_modules/@mui/material/utils/useControlled.js
  var useControlled_default = useControlled;

  // node_modules/@mui/material/utils/useEventCallback.js
  var useEventCallback_default = useEventCallback;

  // node_modules/@mui/material/utils/useForkRef.js
  var useForkRef_default = useForkRef;

  // node_modules/@mui/material/utils/useIsFocusVisible.js
  var useIsFocusVisible_default = useIsFocusVisible;

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types15 = __toModule(require_prop_types());
  var import_react9 = __toModule(require_react());
  var import_react_dom = __toModule(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types14 = __toModule(require_prop_types());
  var timeoutsShape = true ? import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.shape({
    enter: import_prop_types14.default.number,
    exit: import_prop_types14.default.number,
    appear: import_prop_types14.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types14.default.oneOfType([import_prop_types14.default.string, import_prop_types14.default.shape({
    enter: import_prop_types14.default.string,
    exit: import_prop_types14.default.string,
    active: import_prop_types14.default.string
  }), import_prop_types14.default.shape({
    enter: import_prop_types14.default.string,
    enterDone: import_prop_types14.default.string,
    enterActive: import_prop_types14.default.string,
    exit: import_prop_types14.default.string,
    exitDone: import_prop_types14.default.string,
    exitActive: import_prop_types14.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react8 = __toModule(require_react());
  var TransitionGroupContext_default = import_react8.default.createContext(null);

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return /* @__PURE__ */ import_react9.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : import_react9.default.cloneElement(import_react9.default.Children.only(children), childProps));
    };
    return Transition2;
  }(import_react9.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    nodeRef: import_prop_types15.default.shape({
      current: typeof Element === "undefined" ? import_prop_types15.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types15.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    children: import_prop_types15.default.oneOfType([import_prop_types15.default.func.isRequired, import_prop_types15.default.element.isRequired]).isRequired,
    in: import_prop_types15.default.bool,
    mountOnEnter: import_prop_types15.default.bool,
    unmountOnExit: import_prop_types15.default.bool,
    appear: import_prop_types15.default.bool,
    enter: import_prop_types15.default.bool,
    exit: import_prop_types15.default.bool,
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    addEndListener: import_prop_types15.default.func,
    onEnter: import_prop_types15.default.func,
    onEntering: import_prop_types15.default.func,
    onEntered: import_prop_types15.default.func,
    onExit: import_prop_types15.default.func,
    onExiting: import_prop_types15.default.func,
    onExited: import_prop_types15.default.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var import_prop_types16 = __toModule(require_prop_types());
  var import_react11 = __toModule(require_react());

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  var import_react10 = __toModule(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react10.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children)
      import_react10.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return (0, import_react10.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react10.isValidElement)(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react10.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react10.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react10.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react10.isValidElement)(prevChild)) {
        children[key] = (0, import_react10.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var values2 = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node2) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node2);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component2 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values2(this.state.children).map(childFactory2);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component2 === null) {
        return /* @__PURE__ */ import_react11.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ import_react11.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react11.default.createElement(Component2, props, children));
    };
    return TransitionGroup2;
  }(import_react11.default.Component);
  TransitionGroup.propTypes = true ? {
    component: import_prop_types16.default.any,
    children: import_prop_types16.default.node,
    appear: import_prop_types16.default.bool,
    enter: import_prop_types16.default.bool,
    exit: import_prop_types16.default.bool,
    childFactory: import_prop_types16.default.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup_default = TransitionGroup;

  // node_modules/@mui/material/transitions/utils.js
  var reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout: timeout2,
      easing: easing2,
      style: style3 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style3.transitionDuration) != null ? _style$transitionDura : typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
      easing: (_style$transitionTimi = style3.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style3.transitionDelay
    };
  }

  // node_modules/@mui/material/Paper/Paper.js
  var React30 = __toModule(require_react());
  var import_prop_types17 = __toModule(require_prop_types());

  // node_modules/@mui/material/Paper/paperClasses.js
  function getPaperUtilityClass(slot) {
    return generateUtilityClass("MuiPaper", slot);
  }
  var paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);

  // node_modules/@mui/material/Paper/Paper.js
  var import_jsx_runtime16 = __toModule(require_jsx_runtime());
  var _excluded16 = ["className", "component", "elevation", "square", "variant"];
  var getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  var useUtilityClasses4 = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };
  var PaperRoot = styled_default("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], !ownerState.square && styles4.rounded, ownerState.variant === "elevation" && styles4[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    backgroundColor: theme.palette.background.paper,
    color: theme.palette.text.primary,
    transition: theme.transitions.create("box-shadow")
  }, !ownerState.square && {
    borderRadius: theme.shape.borderRadius
  }, ownerState.variant === "outlined" && {
    border: `1px solid ${theme.palette.divider}`
  }, ownerState.variant === "elevation" && _extends({
    boxShadow: theme.shadows[ownerState.elevation]
  }, theme.palette.mode === "dark" && {
    backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha(ownerState.elevation))})`
  })));
  var Paper = /* @__PURE__ */ React30.forwardRef(function Paper2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses4(ownerState);
    if (true) {
      const theme = useTheme5();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PaperRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    children: import_prop_types17.default.node,
    classes: import_prop_types17.default.object,
    className: import_prop_types17.default.string,
    component: import_prop_types17.default.elementType,
    elevation: chainPropTypes(integerPropType_default, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    square: import_prop_types17.default.bool,
    sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object]),
    variant: import_prop_types17.default.oneOfType([import_prop_types17.default.oneOf(["elevation", "outlined"]), import_prop_types17.default.string])
  } : void 0;
  var Paper_default = Paper;

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  var React33 = __toModule(require_react());
  var import_prop_types20 = __toModule(require_prop_types());

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  var React32 = __toModule(require_react());
  var import_prop_types19 = __toModule(require_prop_types());

  // node_modules/@mui/material/ButtonBase/Ripple.js
  var React31 = __toModule(require_react());
  var import_prop_types18 = __toModule(require_prop_types());
  var import_jsx_runtime17 = __toModule(require_jsx_runtime());
  function Ripple(props) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout: timeout2
    } = props;
    const [leaving, setLeaving] = React31.useState(false);
    const rippleClassName = clsx_m_default(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx_m_default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React31.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout2);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout2]);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", {
        className: childClassName
      })
    });
  }
  true ? Ripple.propTypes = {
    classes: import_prop_types18.default.object.isRequired,
    className: import_prop_types18.default.string,
    in: import_prop_types18.default.bool,
    onExited: import_prop_types18.default.func,
    pulsate: import_prop_types18.default.bool,
    rippleSize: import_prop_types18.default.number,
    rippleX: import_prop_types18.default.number,
    rippleY: import_prop_types18.default.number,
    timeout: import_prop_types18.default.number.isRequired
  } : void 0;
  var Ripple_default = Ripple;

  // node_modules/@mui/material/ButtonBase/touchRippleClasses.js
  var touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  var touchRippleClasses_default = touchRippleClasses;

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  var import_jsx_runtime18 = __toModule(require_jsx_runtime());
  var _excluded17 = ["center", "classes", "className"];
  var _ = (t) => t;
  var _t;
  var _t2;
  var _t3;
  var _t4;
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var enterKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  var exitKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  var pulsateKeyframe = keyframes(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  var TouchRippleRoot = styled_default("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  var TouchRippleRipple = styled_default(Ripple_default, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses_default.rippleVisible, enterKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.ripplePulsate, ({
    theme
  }) => theme.transitions.duration.shorter, touchRippleClasses_default.child, touchRippleClasses_default.childLeaving, exitKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.childPulsate, pulsateKeyframe, ({
    theme
  }) => theme.transitions.easing.easeInOut);
  var TouchRipple = /* @__PURE__ */ React32.forwardRef(function TouchRipple2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
    const [ripples, setRipples] = React32.useState([]);
    const nextKey = React32.useRef(0);
    const rippleCallback = React32.useRef(null);
    React32.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React32.useRef(false);
    const startTimer = React32.useRef(null);
    const startTimerCommit = React32.useRef(null);
    const container = React32.useRef(null);
    React32.useEffect(() => {
      return () => {
        clearTimeout(startTimer.current);
      };
    }, []);
    const startCommit = React32.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(TouchRippleRipple, {
        classes: {
          ripple: clsx_m_default(classes.ripple, touchRippleClasses_default.ripple),
          rippleVisible: clsx_m_default(classes.rippleVisible, touchRippleClasses_default.rippleVisible),
          ripplePulsate: clsx_m_default(classes.ripplePulsate, touchRippleClasses_default.ripplePulsate),
          child: clsx_m_default(classes.child, touchRippleClasses_default.child),
          childLeaving: clsx_m_default(classes.childLeaving, touchRippleClasses_default.childLeaving),
          childPulsate: clsx_m_default(classes.childPulsate, touchRippleClasses_default.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start2 = React32.useCallback((event = {}, options = {}, cb) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
      } = options;
      if (event.type === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if (event.type === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      }
      if (event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(() => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    const pulsate = React32.useCallback(() => {
      start2({}, {
        pulsate: true
      });
    }, [start2]);
    const stop = React32.useCallback((event, cb) => {
      clearTimeout(startTimer.current);
      if (event.type === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(() => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React32.useImperativeHandle(ref, () => ({
      pulsate,
      start: start2,
      stop
    }), [pulsate, start2, stop]);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(TouchRippleRoot, _extends({
      className: clsx_m_default(classes.root, touchRippleClasses_default.root, className),
      ref: container
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(TransitionGroup_default, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  true ? TouchRipple.propTypes = {
    center: import_prop_types19.default.bool,
    classes: import_prop_types19.default.object,
    className: import_prop_types19.default.string
  } : void 0;
  var TouchRipple_default = TouchRipple;

  // node_modules/@mui/material/ButtonBase/buttonBaseClasses.js
  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass("MuiButtonBase", slot);
  }
  var buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  var buttonBaseClasses_default = buttonBaseClasses;

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  var import_jsx_runtime19 = __toModule(require_jsx_runtime());
  var import_jsx_runtime20 = __toModule(require_jsx_runtime());
  var _excluded18 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  var useUtilityClasses5 = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  var ButtonBaseRoot = styled_default("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    outline: 0,
    border: 0,
    margin: 0,
    borderRadius: 0,
    padding: 0,
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    WebkitAppearance: "none",
    textDecoration: "none",
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
    },
    [`&.${buttonBaseClasses_default.disabled}`]: {
      pointerEvents: "none",
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  var ButtonBase = /* @__PURE__ */ React33.forwardRef(function ButtonBase2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
    const buttonRef = React33.useRef(null);
    const rippleRef = React33.useRef(null);
    const handleRippleRef = useForkRef_default(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [focusVisible, setFocusVisible] = React33.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React33.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = React33.useState(false);
    React33.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    React33.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback_default((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback_default((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = React33.useRef(false);
    const handleKeyDown2 = useEventCallback_default((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback_default((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleOwnRef = useForkRef_default(focusVisibleRef, buttonRef);
    const handleRef = useForkRef_default(ref, handleOwnRef);
    if (true) {
      React33.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes = useUtilityClasses5(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: clsx_m_default(classes.root, className),
      ownerState,
      onBlur: handleBlur,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TouchRipple_default, _extends({
        ref: handleRippleRef,
        center: centerRipple
      }, TouchRippleProps)) : null]
    }));
  });
  true ? ButtonBase.propTypes = {
    action: refType_default,
    centerRipple: import_prop_types20.default.bool,
    children: import_prop_types20.default.node,
    classes: import_prop_types20.default.object,
    className: import_prop_types20.default.string,
    component: elementTypeAcceptingRef_default,
    disabled: import_prop_types20.default.bool,
    disableRipple: import_prop_types20.default.bool,
    disableTouchRipple: import_prop_types20.default.bool,
    focusRipple: import_prop_types20.default.bool,
    focusVisibleClassName: import_prop_types20.default.string,
    href: import_prop_types20.default.any,
    LinkComponent: import_prop_types20.default.elementType,
    onBlur: import_prop_types20.default.func,
    onClick: import_prop_types20.default.func,
    onContextMenu: import_prop_types20.default.func,
    onDragLeave: import_prop_types20.default.func,
    onFocus: import_prop_types20.default.func,
    onFocusVisible: import_prop_types20.default.func,
    onKeyDown: import_prop_types20.default.func,
    onKeyUp: import_prop_types20.default.func,
    onMouseDown: import_prop_types20.default.func,
    onMouseLeave: import_prop_types20.default.func,
    onMouseUp: import_prop_types20.default.func,
    onTouchEnd: import_prop_types20.default.func,
    onTouchMove: import_prop_types20.default.func,
    onTouchStart: import_prop_types20.default.func,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tabIndex: import_prop_types20.default.number,
    TouchRippleProps: import_prop_types20.default.object,
    touchRippleRef: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.shape({
      current: import_prop_types20.default.shape({
        pulsate: import_prop_types20.default.func.isRequired,
        start: import_prop_types20.default.func.isRequired,
        stop: import_prop_types20.default.func.isRequired
      })
    })]),
    type: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["button", "reset", "submit"]), import_prop_types20.default.string])
  } : void 0;
  var ButtonBase_default = ButtonBase;

  // node_modules/@mui/material/Alert/Alert.js
  var React40 = __toModule(require_react());
  var import_prop_types22 = __toModule(require_prop_types());

  // node_modules/@mui/material/Alert/alertClasses.js
  function getAlertUtilityClass(slot) {
    return generateUtilityClass("MuiAlert", slot);
  }
  var alertClasses = generateUtilityClasses("MuiAlert", ["root", "action", "icon", "message", "filled", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  var alertClasses_default = alertClasses;

  // node_modules/@mui/material/IconButton/IconButton.js
  var React34 = __toModule(require_react());
  var import_prop_types21 = __toModule(require_prop_types());

  // node_modules/@mui/material/IconButton/iconButtonClasses.js
  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass("MuiIconButton", slot);
  }
  var iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  var iconButtonClasses_default = iconButtonClasses;

  // node_modules/@mui/material/IconButton/IconButton.js
  var import_jsx_runtime21 = __toModule(require_jsx_runtime());
  var _excluded19 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  var useUtilityClasses6 = (ownerState) => {
    const {
      classes,
      disabled,
      color: color2,
      edge,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color2 !== "default" && `color${capitalize_default(color2)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`]
    };
    return composeClasses(slots, getIconButtonUtilityClass, classes);
  };
  var IconButtonRoot = styled_default(ButtonBase_default, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles4[`edge${capitalize_default(ownerState.edge)}`], styles4[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    color: theme.palette.action.active,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.color === "inherit" && {
    color: "inherit"
  }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
    color: theme.palette[ownerState.color].main
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }), ownerState.size === "small" && {
    padding: 5,
    fontSize: theme.typography.pxToRem(18)
  }, ownerState.size === "large" && {
    padding: 12,
    fontSize: theme.typography.pxToRem(28)
  }, {
    [`&.${iconButtonClasses_default.disabled}`]: {
      backgroundColor: "transparent",
      color: theme.palette.action.disabled
    }
  }));
  var IconButton = /* @__PURE__ */ React34.forwardRef(function IconButton2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color: color2 = "default",
      disabled = false,
      disableFocusRipple = false,
      size = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
    const ownerState = _extends({}, props, {
      edge,
      color: color2,
      disabled,
      disableFocusRipple,
      size
    });
    const classes = useUtilityClasses6(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(IconButtonRoot, _extends({
      className: clsx_m_default(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref,
      ownerState
    }, other, {
      children
    }));
  });
  true ? IconButton.propTypes = {
    children: chainPropTypes(import_prop_types21.default.node, (props) => {
      const found = React34.Children.toArray(props.children).some((child) => /* @__PURE__ */ React34.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    classes: import_prop_types21.default.object,
    className: import_prop_types21.default.string,
    color: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types21.default.string]),
    disabled: import_prop_types21.default.bool,
    disableFocusRipple: import_prop_types21.default.bool,
    disableRipple: import_prop_types21.default.bool,
    edge: import_prop_types21.default.oneOf(["end", "start", false]),
    size: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["small", "medium", "large"]), import_prop_types21.default.string]),
    sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object])
  } : void 0;
  var IconButton_default = IconButton;

  // node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js
  var React35 = __toModule(require_react());
  var import_jsx_runtime22 = __toModule(require_jsx_runtime());
  var SuccessOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime22.jsx)("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), "SuccessOutlined");

  // node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js
  var React36 = __toModule(require_react());
  var import_jsx_runtime23 = __toModule(require_jsx_runtime());
  var ReportProblemOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), "ReportProblemOutlined");

  // node_modules/@mui/material/internal/svg-icons/ErrorOutline.js
  var React37 = __toModule(require_react());
  var import_jsx_runtime24 = __toModule(require_jsx_runtime());
  var ErrorOutline_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime24.jsx)("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "ErrorOutline");

  // node_modules/@mui/material/internal/svg-icons/InfoOutlined.js
  var React38 = __toModule(require_react());
  var import_jsx_runtime25 = __toModule(require_jsx_runtime());
  var InfoOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime25.jsx)("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), "InfoOutlined");

  // node_modules/@mui/material/internal/svg-icons/Close.js
  var React39 = __toModule(require_react());
  var import_jsx_runtime26 = __toModule(require_jsx_runtime());
  var Close_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime26.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");

  // node_modules/@mui/material/Alert/Alert.js
  var import_jsx_runtime27 = __toModule(require_jsx_runtime());
  var import_jsx_runtime28 = __toModule(require_jsx_runtime());
  var _CloseIcon;
  var _excluded20 = ["action", "children", "className", "closeText", "color", "icon", "iconMapping", "onClose", "role", "severity", "variant"];
  var useUtilityClasses7 = (ownerState) => {
    const {
      variant,
      color: color2,
      severity,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${variant}${capitalize_default(color2 || severity)}`, `${variant}`],
      icon: ["icon"],
      message: ["message"],
      action: ["action"]
    };
    return composeClasses(slots, getAlertUtilityClass, classes);
  };
  var AlertRoot = styled_default(Paper_default, {
    name: "MuiAlert",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], styles4[`${ownerState.variant}${capitalize_default(ownerState.color || ownerState.severity)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const getColor = theme.palette.mode === "light" ? darken : lighten;
    const getBackgroundColor = theme.palette.mode === "light" ? lighten : darken;
    const color2 = ownerState.color || ownerState.severity;
    return _extends({}, theme.typography.body2, {
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px"
    }, color2 && ownerState.variant === "standard" && {
      color: getColor(theme.palette[color2].light, 0.6),
      backgroundColor: getBackgroundColor(theme.palette[color2].light, 0.9),
      [`& .${alertClasses_default.icon}`]: {
        color: theme.palette.mode === "dark" ? theme.palette[color2].main : theme.palette[color2].light
      }
    }, color2 && ownerState.variant === "outlined" && {
      color: getColor(theme.palette[color2].light, 0.6),
      border: `1px solid ${theme.palette[color2].light}`,
      [`& .${alertClasses_default.icon}`]: {
        color: theme.palette.mode === "dark" ? theme.palette[color2].main : theme.palette[color2].light
      }
    }, color2 && ownerState.variant === "filled" && {
      color: "#fff",
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.mode === "dark" ? theme.palette[color2].dark : theme.palette[color2].main
    });
  });
  var AlertIcon = styled_default("div", {
    name: "MuiAlert",
    slot: "Icon",
    overridesResolver: (props, styles4) => styles4.icon
  })({
    marginRight: 12,
    padding: "7px 0",
    display: "flex",
    fontSize: 22,
    opacity: 0.9
  });
  var AlertMessage = styled_default("div", {
    name: "MuiAlert",
    slot: "Message",
    overridesResolver: (props, styles4) => styles4.message
  })({
    padding: "8px 0"
  });
  var AlertAction = styled_default("div", {
    name: "MuiAlert",
    slot: "Action",
    overridesResolver: (props, styles4) => styles4.action
  })({
    display: "flex",
    alignItems: "flex-start",
    padding: "4px 0 0 16px",
    marginLeft: "auto",
    marginRight: -8
  });
  var defaultIconMapping = {
    success: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(SuccessOutlined_default, {
      fontSize: "inherit"
    }),
    warning: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ReportProblemOutlined_default, {
      fontSize: "inherit"
    }),
    error: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ErrorOutline_default, {
      fontSize: "inherit"
    }),
    info: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(InfoOutlined_default, {
      fontSize: "inherit"
    })
  };
  var Alert = /* @__PURE__ */ React40.forwardRef(function Alert2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiAlert"
    });
    const {
      action,
      children,
      className,
      closeText = "Close",
      color: color2,
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = "alert",
      severity = "success",
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
    const ownerState = _extends({}, props, {
      color: color2,
      severity,
      variant
    });
    const classes = useUtilityClasses7(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(AlertRoot, _extends({
      role,
      elevation: 0,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other, {
      children: [icon !== false ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(AlertIcon, {
        ownerState,
        className: classes.icon,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(AlertMessage, {
        ownerState,
        className: classes.message,
        children
      }), action != null ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(AlertAction, {
        className: classes.action,
        children: action
      }) : null, action == null && onClose ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(AlertAction, {
        ownerState,
        className: classes.action,
        children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(IconButton_default, {
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose,
          children: _CloseIcon || (_CloseIcon = /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Close_default, {
            fontSize: "small"
          }))
        })
      }) : null]
    }));
  });
  true ? Alert.propTypes = {
    action: import_prop_types22.default.node,
    children: import_prop_types22.default.node,
    classes: import_prop_types22.default.object,
    className: import_prop_types22.default.string,
    closeText: import_prop_types22.default.string,
    color: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["error", "info", "success", "warning"]), import_prop_types22.default.string]),
    icon: import_prop_types22.default.node,
    iconMapping: import_prop_types22.default.shape({
      error: import_prop_types22.default.node,
      info: import_prop_types22.default.node,
      success: import_prop_types22.default.node,
      warning: import_prop_types22.default.node
    }),
    onClose: import_prop_types22.default.func,
    role: import_prop_types22.default.string,
    severity: import_prop_types22.default.oneOf(["error", "info", "success", "warning"]),
    sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object]),
    variant: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["filled", "outlined", "standard"]), import_prop_types22.default.string])
  } : void 0;
  var Alert_default = Alert;

  // node_modules/@mui/material/Typography/Typography.js
  var React41 = __toModule(require_react());
  var import_prop_types23 = __toModule(require_prop_types());

  // node_modules/@mui/material/Typography/typographyClasses.js
  function getTypographyUtilityClass(slot) {
    return generateUtilityClass("MuiTypography", slot);
  }
  var typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);

  // node_modules/@mui/material/Typography/Typography.js
  var import_jsx_runtime29 = __toModule(require_jsx_runtime());
  var _excluded21 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  var useUtilityClasses8 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return composeClasses(slots, getTypographyUtilityClass, classes);
  };
  var TypographyRoot = styled_default("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.variant && styles4[ownerState.variant], ownerState.align !== "inherit" && styles4[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles4.noWrap, ownerState.gutterBottom && styles4.gutterBottom, ownerState.paragraph && styles4.paragraph];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  var colorTransformations = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  var transformDeprecatedColors = (color2) => {
    return colorTransformations[color2] || color2;
  };
  var Typography = /* @__PURE__ */ React41.forwardRef(function Typography2(inProps, ref) {
    const themeProps = useThemeProps2({
      props: inProps,
      name: "MuiTypography"
    });
    const color2 = transformDeprecatedColors(themeProps.color);
    const props = extendSxProp(_extends({}, themeProps, {
      color: color2
    }));
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
    const ownerState = _extends({}, props, {
      align,
      color: color2,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component2 = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses8(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TypographyRoot, _extends({
      as: Component2,
      ref,
      ownerState,
      className: clsx_m_default(classes.root, className)
    }, other));
  });
  true ? Typography.propTypes = {
    align: import_prop_types23.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    children: import_prop_types23.default.node,
    classes: import_prop_types23.default.object,
    className: import_prop_types23.default.string,
    component: import_prop_types23.default.elementType,
    gutterBottom: import_prop_types23.default.bool,
    noWrap: import_prop_types23.default.bool,
    paragraph: import_prop_types23.default.bool,
    sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object]),
    variant: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types23.default.string]),
    variantMapping: import_prop_types23.default.object
  } : void 0;
  var Typography_default = Typography;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  var React51 = __toModule(require_react());
  var import_prop_types29 = __toModule(require_prop_types());

  // node_modules/@mui/material/Popper/Popper.js
  var import_prop_types24 = __toModule(require_prop_types());
  var React42 = __toModule(require_react());
  var import_jsx_runtime30 = __toModule(require_jsx_runtime());
  var PopperRoot = styled_default(PopperUnstyled_default, {
    name: "MuiPopper",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var Popper = /* @__PURE__ */ React42.forwardRef(function Popper2(inProps, ref) {
    const theme = useThemeWithoutDefault_default();
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPopper"
    });
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(PopperRoot, _extends({
      direction: theme == null ? void 0 : theme.direction
    }, props, {
      ref
    }));
  });
  true ? Popper.propTypes = {
    anchorEl: import_prop_types24.default.oneOfType([HTMLElementType, import_prop_types24.default.object, import_prop_types24.default.func]),
    children: import_prop_types24.default.oneOfType([import_prop_types24.default.node, import_prop_types24.default.func]),
    container: import_prop_types24.default.oneOfType([HTMLElementType, import_prop_types24.default.func]),
    disablePortal: import_prop_types24.default.bool,
    keepMounted: import_prop_types24.default.bool,
    modifiers: import_prop_types24.default.arrayOf(import_prop_types24.default.shape({
      data: import_prop_types24.default.object,
      effect: import_prop_types24.default.func,
      enabled: import_prop_types24.default.bool,
      fn: import_prop_types24.default.func,
      name: import_prop_types24.default.any,
      options: import_prop_types24.default.object,
      phase: import_prop_types24.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types24.default.arrayOf(import_prop_types24.default.string),
      requiresIfExists: import_prop_types24.default.arrayOf(import_prop_types24.default.string)
    })),
    open: import_prop_types24.default.bool.isRequired,
    placement: import_prop_types24.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    popperOptions: import_prop_types24.default.shape({
      modifiers: import_prop_types24.default.array,
      onFirstUpdate: import_prop_types24.default.func,
      placement: import_prop_types24.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types24.default.oneOf(["absolute", "fixed"])
    }),
    popperRef: refType_default,
    sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object]),
    transition: import_prop_types24.default.bool
  } : void 0;
  var Popper_default = Popper;

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  var React43 = __toModule(require_react());
  var import_prop_types25 = __toModule(require_prop_types());

  // node_modules/@mui/material/ListSubheader/listSubheaderClasses.js
  function getListSubheaderUtilityClass(slot) {
    return generateUtilityClass("MuiListSubheader", slot);
  }
  var listSubheaderClasses = generateUtilityClasses("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  var import_jsx_runtime31 = __toModule(require_jsx_runtime());
  var _excluded24 = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
  var useUtilityClasses9 = (ownerState) => {
    const {
      classes,
      color: color2,
      disableGutters,
      inset,
      disableSticky
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "default" && `color${capitalize_default(color2)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
    };
    return composeClasses(slots, getListSubheaderUtilityClass, classes);
  };
  var ListSubheaderRoot = styled_default("li", {
    name: "MuiListSubheader",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`], !ownerState.disableGutters && styles4.gutters, ownerState.inset && styles4.inset, !ownerState.disableSticky && styles4.sticky];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    boxSizing: "border-box",
    lineHeight: "48px",
    listStyle: "none",
    color: theme.palette.text.secondary,
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(14)
  }, ownerState.color === "primary" && {
    color: theme.palette.primary.main
  }, ownerState.color === "inherit" && {
    color: "inherit"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.inset && {
    paddingLeft: 72
  }, !ownerState.disableSticky && {
    position: "sticky",
    top: 0,
    zIndex: 1,
    backgroundColor: theme.palette.background.paper
  }));
  var ListSubheader = /* @__PURE__ */ React43.forwardRef(function ListSubheader2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListSubheader"
    });
    const {
      className,
      color: color2 = "default",
      component = "li",
      disableGutters = false,
      disableSticky = false,
      inset = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disableGutters,
      disableSticky,
      inset
    });
    const classes = useUtilityClasses9(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(ListSubheaderRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? ListSubheader.propTypes = {
    children: import_prop_types25.default.node,
    classes: import_prop_types25.default.object,
    className: import_prop_types25.default.string,
    color: import_prop_types25.default.oneOf(["default", "inherit", "primary"]),
    component: import_prop_types25.default.elementType,
    disableGutters: import_prop_types25.default.bool,
    disableSticky: import_prop_types25.default.bool,
    inset: import_prop_types25.default.bool,
    sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object])
  } : void 0;
  var ListSubheader_default = ListSubheader;

  // node_modules/@mui/material/Chip/Chip.js
  var React45 = __toModule(require_react());
  var import_prop_types26 = __toModule(require_prop_types());

  // node_modules/@mui/material/internal/svg-icons/Cancel.js
  var React44 = __toModule(require_react());
  var import_jsx_runtime32 = __toModule(require_jsx_runtime());
  var Cancel_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime32.jsx)("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");

  // node_modules/@mui/material/Chip/chipClasses.js
  function getChipUtilityClass(slot) {
    return generateUtilityClass("MuiChip", slot);
  }
  var chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorPrimary", "colorSecondary", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "focusVisible"]);
  var chipClasses_default = chipClasses;

  // node_modules/@mui/material/Chip/Chip.js
  var import_jsx_runtime33 = __toModule(require_jsx_runtime());
  var import_jsx_runtime34 = __toModule(require_jsx_runtime());
  var _excluded25 = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant"];
  var useUtilityClasses10 = (ownerState) => {
    const {
      classes,
      disabled,
      size,
      color: color2,
      onDelete,
      clickable,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, disabled && "disabled", `size${capitalize_default(size)}`, `color${capitalize_default(color2)}`, clickable && "clickable", clickable && `clickableColor${capitalize_default(color2)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize_default(color2)}`, `${variant}${capitalize_default(color2)}`],
      label: ["label", `label${capitalize_default(size)}`],
      avatar: ["avatar", `avatar${capitalize_default(size)}`, `avatarColor${capitalize_default(color2)}`],
      icon: ["icon", `icon${capitalize_default(size)}`, `iconColor${capitalize_default(color2)}`],
      deleteIcon: ["deleteIcon", `deleteIcon${capitalize_default(size)}`, `deleteIconColor${capitalize_default(color2)}`, `deleteIconOutlinedColor${capitalize_default(color2)}`]
    };
    return composeClasses(slots, getChipUtilityClass, classes);
  };
  var ChipRoot = styled_default("div", {
    name: "MuiChip",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      const {
        color: color2,
        clickable,
        onDelete,
        size,
        variant
      } = ownerState;
      return [{
        [`& .${chipClasses_default.avatar}`]: styles4.avatar
      }, {
        [`& .${chipClasses_default.avatar}`]: styles4[`avatar${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.avatar}`]: styles4[`avatarColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles4.icon
      }, {
        [`& .${chipClasses_default.icon}`]: styles4[`icon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles4[`iconColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles4.deleteIcon
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles4[`deleteIcon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles4[`deleteIconColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles4[`deleteIconOutlinedColor${capitalize_default(color2)}`]
      }, styles4.root, styles4[`size${capitalize_default(size)}`], styles4[`color${capitalize_default(color2)}`], clickable && styles4.clickable, clickable && color2 !== "default" && styles4[`clickableColor${capitalize_default(color2)})`], onDelete && styles4.deletable, onDelete && color2 !== "default" && styles4[`deletableColor${capitalize_default(color2)}`], styles4[variant], variant === "outlined" && styles4[`outlined${capitalize_default(color2)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const deleteIconColor = alpha(theme.palette.text.primary, 0.26);
    return _extends({
      maxWidth: "100%",
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(13),
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      height: 32,
      color: theme.palette.text.primary,
      backgroundColor: theme.palette.action.selected,
      borderRadius: 32 / 2,
      whiteSpace: "nowrap",
      transition: theme.transitions.create(["background-color", "box-shadow"]),
      cursor: "default",
      outline: 0,
      textDecoration: "none",
      border: 0,
      padding: 0,
      verticalAlign: "middle",
      boxSizing: "border-box",
      [`&.${chipClasses_default.disabled}`]: {
        opacity: theme.palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`& .${chipClasses_default.avatar}`]: {
        marginLeft: 5,
        marginRight: -6,
        width: 24,
        height: 24,
        color: theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300],
        fontSize: theme.typography.pxToRem(12)
      },
      [`& .${chipClasses_default.avatarColorPrimary}`]: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.dark
      },
      [`& .${chipClasses_default.avatarColorSecondary}`]: {
        color: theme.palette.secondary.contrastText,
        backgroundColor: theme.palette.secondary.dark
      },
      [`& .${chipClasses_default.avatarSmall}`]: {
        marginLeft: 4,
        marginRight: -4,
        width: 18,
        height: 18,
        fontSize: theme.typography.pxToRem(10)
      },
      [`& .${chipClasses_default.icon}`]: _extends({
        color: theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300],
        marginLeft: 5,
        marginRight: -6
      }, ownerState.size === "small" && {
        fontSize: 18,
        marginLeft: 4,
        marginRight: -4
      }, ownerState.color !== "default" && {
        color: "inherit"
      }),
      [`& .${chipClasses_default.deleteIcon}`]: _extends({
        WebkitTapHighlightColor: "transparent",
        color: deleteIconColor,
        fontSize: 22,
        cursor: "pointer",
        margin: "0 5px 0 -6px",
        "&:hover": {
          color: alpha(deleteIconColor, 0.4)
        }
      }, ownerState.size === "small" && {
        fontSize: 16,
        marginRight: 4,
        marginLeft: -4
      }, ownerState.color !== "default" && {
        color: alpha(theme.palette[ownerState.color].contrastText, 0.7),
        "&:hover, &:active": {
          color: theme.palette[ownerState.color].contrastText
        }
      })
    }, ownerState.size === "small" && {
      height: 24
    }, ownerState.color !== "default" && {
      backgroundColor: theme.palette[ownerState.color].main,
      color: theme.palette[ownerState.color].contrastText
    }, ownerState.onDelete && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    }, ownerState.onDelete && ownerState.color !== "default" && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: theme.palette[ownerState.color].dark
      }
    });
  }, ({
    theme,
    ownerState
  }) => _extends({}, ownerState.clickable && {
    userSelect: "none",
    WebkitTapHighlightColor: "transparent",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    },
    "&:active": {
      boxShadow: theme.shadows[1]
    }
  }, ownerState.clickable && ownerState.color !== "default" && {
    [`&:hover, &.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.palette[ownerState.color].dark
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.variant === "outlined" && {
    backgroundColor: "transparent",
    border: `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: theme.palette.action.hover
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.palette.action.focus
    },
    [`& .${chipClasses_default.avatar}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.avatarSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.icon}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.iconSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      marginRight: 5
    },
    [`& .${chipClasses_default.deleteIconSmall}`]: {
      marginRight: 3
    }
  }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
    color: theme.palette[ownerState.color].main,
    border: `1px solid ${alpha(theme.palette[ownerState.color].main, 0.7)}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      color: alpha(theme.palette[ownerState.color].main, 0.7),
      "&:hover, &:active": {
        color: theme.palette[ownerState.color].main
      }
    }
  }));
  var ChipLabel = styled_default("span", {
    name: "MuiChip",
    slot: "Label",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      const {
        size
      } = ownerState;
      return [styles4.label, styles4[`label${capitalize_default(size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    overflow: "hidden",
    textOverflow: "ellipsis",
    paddingLeft: 12,
    paddingRight: 12,
    whiteSpace: "nowrap"
  }, ownerState.size === "small" && {
    paddingLeft: 8,
    paddingRight: 8
  }));
  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
  }
  var Chip = /* @__PURE__ */ React45.forwardRef(function Chip2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiChip"
    });
    const {
      avatar: avatarProp,
      className,
      clickable: clickableProp,
      color: color2 = "default",
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size = "medium",
      variant = "filled"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
    const chipRef = React45.useRef(null);
    const handleRef = useForkRef_default(chipRef, ref);
    const handleDeleteIconClick = (event) => {
      event.stopPropagation();
      if (onDelete) {
        onDelete(event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleKeyUp = (event) => {
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        } else if (event.key === "Escape" && chipRef.current) {
          chipRef.current.blur();
        }
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
    };
    const clickable = clickableProp !== false && onClick ? true : clickableProp;
    const small = size === "small";
    const component = clickable || onDelete ? ButtonBase_default : ComponentProp || "div";
    const ownerState = _extends({}, props, {
      component,
      disabled,
      size,
      color: color2,
      onDelete: !!onDelete,
      clickable,
      variant
    });
    const classes = useUtilityClasses10(ownerState);
    const moreProps = component === ButtonBase_default ? _extends({
      component: ComponentProp || "div",
      focusVisibleClassName: classes.focusVisible
    }, onDelete && {
      disableRipple: true
    }) : {};
    let deleteIcon = null;
    if (onDelete) {
      const customClasses = clsx_m_default(color2 !== "default" && (variant === "outlined" ? classes[`deleteIconOutlinedColor${capitalize_default(color2)}`] : classes[`deleteIconColor${capitalize_default(color2)}`]), small && classes.deleteIconSmall);
      deleteIcon = deleteIconProp && /* @__PURE__ */ React45.isValidElement(deleteIconProp) ? /* @__PURE__ */ React45.cloneElement(deleteIconProp, {
        className: clsx_m_default(deleteIconProp.props.className, classes.deleteIcon, customClasses),
        onClick: handleDeleteIconClick
      }) : /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Cancel_default, {
        className: clsx_m_default(classes.deleteIcon, customClasses),
        onClick: handleDeleteIconClick
      });
    }
    let avatar = null;
    if (avatarProp && /* @__PURE__ */ React45.isValidElement(avatarProp)) {
      avatar = /* @__PURE__ */ React45.cloneElement(avatarProp, {
        className: clsx_m_default(classes.avatar, avatarProp.props.className)
      });
    }
    let icon = null;
    if (iconProp && /* @__PURE__ */ React45.isValidElement(iconProp)) {
      icon = /* @__PURE__ */ React45.cloneElement(iconProp, {
        className: clsx_m_default(classes.icon, iconProp.props.className)
      });
    }
    if (true) {
      if (avatar && icon) {
        console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(ChipRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className),
      disabled: clickable && disabled ? true : void 0,
      onClick,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      ref: handleRef,
      ownerState
    }, moreProps, other, {
      children: [avatar || icon, /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ChipLabel, {
        className: clsx_m_default(classes.label),
        ownerState,
        children: label
      }), deleteIcon]
    }));
  });
  true ? Chip.propTypes = {
    avatar: import_prop_types26.default.element,
    children: unsupportedProp_default,
    classes: import_prop_types26.default.object,
    className: import_prop_types26.default.string,
    clickable: import_prop_types26.default.bool,
    color: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types26.default.string]),
    component: import_prop_types26.default.elementType,
    deleteIcon: import_prop_types26.default.element,
    disabled: import_prop_types26.default.bool,
    icon: import_prop_types26.default.element,
    label: import_prop_types26.default.node,
    onClick: import_prop_types26.default.func,
    onDelete: import_prop_types26.default.func,
    onKeyDown: import_prop_types26.default.func,
    onKeyUp: import_prop_types26.default.func,
    size: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["medium", "small"]), import_prop_types26.default.string]),
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    variant: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["filled", "outlined"]), import_prop_types26.default.string])
  } : void 0;
  var Chip_default = Chip;

  // node_modules/@mui/material/InputBase/InputBase.js
  var React49 = __toModule(require_react());
  var import_prop_types28 = __toModule(require_prop_types());

  // node_modules/@mui/material/FormControl/formControlState.js
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/FormControl/FormControlContext.js
  var React46 = __toModule(require_react());
  var FormControlContext = /* @__PURE__ */ React46.createContext();
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  var FormControlContext_default = FormControlContext;

  // node_modules/@mui/material/FormControl/useFormControl.js
  var React47 = __toModule(require_react());
  function useFormControl() {
    return React47.useContext(FormControlContext_default);
  }

  // node_modules/@mui/material/GlobalStyles/GlobalStyles.js
  var React48 = __toModule(require_react());
  var import_prop_types27 = __toModule(require_prop_types());
  var import_jsx_runtime35 = __toModule(require_jsx_runtime());
  function GlobalStyles2(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(GlobalStyles, _extends({}, props, {
      defaultTheme: defaultTheme_default
    }));
  }
  true ? GlobalStyles2.propTypes = {
    styles: import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.number, import_prop_types27.default.object, import_prop_types27.default.shape({
      __emotion_styles: import_prop_types27.default.any.isRequired
    }), import_prop_types27.default.string, import_prop_types27.default.bool])
  } : void 0;
  var GlobalStyles_default = GlobalStyles2;

  // node_modules/@mui/material/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@mui/material/InputBase/inputBaseClasses.js
  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass("MuiInputBase", slot);
  }
  var inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  var inputBaseClasses_default = inputBaseClasses;

  // node_modules/@mui/material/InputBase/InputBase.js
  var import_jsx_runtime36 = __toModule(require_jsx_runtime());
  var import_jsx_runtime37 = __toModule(require_jsx_runtime());
  var _excluded26 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "startAdornment", "type", "value"];
  var rootOverridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.root, ownerState.formControl && styles4.formControl, ownerState.startAdornment && styles4.adornedStart, ownerState.endAdornment && styles4.adornedEnd, ownerState.error && styles4.error, ownerState.size === "small" && styles4.sizeSmall, ownerState.multiline && styles4.multiline, ownerState.color && styles4[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles4.fullWidth, ownerState.hiddenLabel && styles4.hiddenLabel];
  };
  var inputOverridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.input, ownerState.size === "small" && styles4.inputSizeSmall, ownerState.multiline && styles4.inputMultiline, ownerState.type === "search" && styles4.inputTypeSearch, ownerState.startAdornment && styles4.inputAdornedStart, ownerState.endAdornment && styles4.inputAdornedEnd, ownerState.hiddenLabel && styles4.inputHiddenLabel];
  };
  var useUtilityClasses11 = (ownerState) => {
    const {
      classes,
      color: color2,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size === "small" && "sizeSmall", multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd"]
    };
    return composeClasses(slots, getInputBaseUtilityClass, classes);
  };
  var InputBaseRoot = styled_default("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    color: theme.palette.text.primary,
    lineHeight: "1.4375em",
    boxSizing: "border-box",
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses_default.disabled}`]: {
      color: theme.palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  var InputBaseComponent = styled_default("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const placeholder = {
      color: "currentColor",
      opacity: light2 ? 0.42 : 0.5,
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    };
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      margin: 0,
      WebkitTapHighlightColor: "transparent",
      display: "block",
      minWidth: 0,
      width: "100%",
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      "&:-ms-input-placeholder": placeholder,
      "&::-ms-input-placeholder": placeholder,
      "&:focus": {
        outline: 0
      },
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        WebkitAppearance: "none"
      },
      [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        "&:-ms-input-placeholder": placeholderHidden,
        "&::-ms-input-placeholder": placeholderHidden,
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        "&:focus:-ms-input-placeholder": placeholderVisible,
        "&:focus::-ms-input-placeholder": placeholderVisible
      },
      [`&.${inputBaseClasses_default.disabled}`]: {
        opacity: 1,
        WebkitTextFillColor: theme.palette.text.disabled
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      MozAppearance: "textfield"
    });
  });
  var inputGlobalStyles = /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(GlobalStyles_default, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  var InputBase = /* @__PURE__ */ React49.forwardRef(function InputBase2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React49.useRef(value != null);
    const inputRef = React49.useRef();
    const handleInputRefWarning = React49.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputPropsRefProp = useForkRef_default(inputPropsProp.ref, handleInputRefWarning);
    const handleInputRefProp = useForkRef_default(inputRefProp, handleInputPropsRefProp);
    const handleInputRef = useForkRef_default(inputRef, handleInputRefProp);
    const [focused, setFocused] = React49.useState(false);
    const muiFormControl = useFormControl();
    if (true) {
      React49.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React49.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React49.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect_default2(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React49.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (true) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends({
          type: void 0,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize_default;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React49.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes = useUtilityClasses11(ownerState);
    const Root = components.Root || InputBaseRoot;
    const rootProps = componentsProps.root || {};
    const Input3 = components.Input || InputBaseComponent;
    inputProps = _extends({}, inputProps, componentsProps.input);
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(React49.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(Root, _extends({}, rootProps, !isHostComponent_default(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx_m_default(classes.root, rootProps.className, className),
        children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(FormControlContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Input3, _extends({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent_default(Input3) && {
            as: InputComponent,
            ownerState: _extends({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx_m_default(classes.input, inputProps.className),
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  true ? InputBase.propTypes = {
    "aria-describedby": import_prop_types28.default.string,
    autoComplete: import_prop_types28.default.string,
    autoFocus: import_prop_types28.default.bool,
    classes: import_prop_types28.default.object,
    className: import_prop_types28.default.string,
    color: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types28.default.string]),
    components: import_prop_types28.default.shape({
      Input: import_prop_types28.default.elementType,
      Root: import_prop_types28.default.elementType
    }),
    componentsProps: import_prop_types28.default.shape({
      input: import_prop_types28.default.object,
      root: import_prop_types28.default.object
    }),
    defaultValue: import_prop_types28.default.any,
    disabled: import_prop_types28.default.bool,
    disableInjectingGlobalStyles: import_prop_types28.default.bool,
    endAdornment: import_prop_types28.default.node,
    error: import_prop_types28.default.bool,
    fullWidth: import_prop_types28.default.bool,
    id: import_prop_types28.default.string,
    inputComponent: elementTypeAcceptingRef_default,
    inputProps: import_prop_types28.default.object,
    inputRef: refType_default,
    margin: import_prop_types28.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.string]),
    minRows: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.string]),
    multiline: import_prop_types28.default.bool,
    name: import_prop_types28.default.string,
    onBlur: import_prop_types28.default.func,
    onChange: import_prop_types28.default.func,
    onClick: import_prop_types28.default.func,
    onFocus: import_prop_types28.default.func,
    onKeyDown: import_prop_types28.default.func,
    onKeyUp: import_prop_types28.default.func,
    placeholder: import_prop_types28.default.string,
    readOnly: import_prop_types28.default.bool,
    renderSuffix: import_prop_types28.default.func,
    required: import_prop_types28.default.bool,
    rows: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.string]),
    size: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["medium", "small"]), import_prop_types28.default.string]),
    startAdornment: import_prop_types28.default.node,
    sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object]),
    type: import_prop_types28.default.string,
    value: import_prop_types28.default.any
  } : void 0;
  var InputBase_default = InputBase;

  // node_modules/@mui/material/Input/inputClasses.js
  function getInputUtilityClass(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  var inputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiInput", ["root", "underline", "input"]));
  var inputClasses_default = inputClasses;

  // node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass("MuiOutlinedInput", slot);
  }
  var outlinedInputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
  var outlinedInputClasses_default = outlinedInputClasses;

  // node_modules/@mui/material/FilledInput/filledInputClasses.js
  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass("MuiFilledInput", slot);
  }
  var filledInputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiFilledInput", ["root", "underline", "input"]));
  var filledInputClasses_default = filledInputClasses;

  // node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  var React50 = __toModule(require_react());
  var import_jsx_runtime38 = __toModule(require_jsx_runtime());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime38.jsx)("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@mui/material/Autocomplete/autocompleteClasses.js
  function getAutocompleteUtilityClass(slot) {
    return generateUtilityClass("MuiAutocomplete", slot);
  }
  var autocompleteClasses = generateUtilityClasses("MuiAutocomplete", ["root", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
  var autocompleteClasses_default = autocompleteClasses;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  var import_jsx_runtime39 = __toModule(require_jsx_runtime());
  var import_jsx_runtime40 = __toModule(require_jsx_runtime());
  var _ClearIcon;
  var _ArrowDropDownIcon;
  var _excluded27 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "value"];
  var useUtilityClasses12 = (ownerState) => {
    const {
      classes,
      disablePortal,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused,
      popupOpen,
      size
    } = ownerState;
    const slots = {
      root: ["root", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
      inputRoot: ["inputRoot"],
      input: ["input", inputFocused && "inputFocused"],
      tag: ["tag", `tagSize${capitalize_default(size)}`],
      endAdornment: ["endAdornment"],
      clearIndicator: ["clearIndicator"],
      popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
      popper: ["popper", disablePortal && "popperDisablePortal"],
      paper: ["paper"],
      listbox: ["listbox"],
      loading: ["loading"],
      noOptions: ["noOptions"],
      option: ["option"],
      groupLabel: ["groupLabel"],
      groupUl: ["groupUl"]
    };
    return composeClasses(slots, getAutocompleteUtilityClass, classes);
  };
  var AutocompleteRoot = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      const {
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        size
      } = ownerState;
      return [{
        [`& .${autocompleteClasses_default.tag}`]: styles4.tag
      }, {
        [`& .${autocompleteClasses_default.tag}`]: styles4[`tagSize${capitalize_default(size)}`]
      }, {
        [`& .${autocompleteClasses_default.inputRoot}`]: styles4.inputRoot
      }, {
        [`& .${autocompleteClasses_default.input}`]: styles4.input
      }, {
        [`& .${autocompleteClasses_default.input}`]: inputFocused && styles4.inputFocused
      }, styles4.root, fullWidth && styles4.fullWidth, hasPopupIcon && styles4.hasPopupIcon, hasClearIcon && styles4.hasClearIcon];
    }
  })(({
    ownerState
  }) => _extends({
    [`&.${autocompleteClasses_default.focused} .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    },
    "@media (pointer: fine)": {
      [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
        visibility: "visible"
      }
    }
  }, ownerState.fullWidth && {
    width: "100%"
  }, {
    [`& .${autocompleteClasses_default.tag}`]: _extends({
      margin: 3,
      maxWidth: "calc(100% - 6px)"
    }, ownerState.size === "small" && {
      margin: 2,
      maxWidth: "calc(100% - 4px)"
    }),
    [`& .${autocompleteClasses_default.inputRoot}`]: {
      flexWrap: "wrap",
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4
      },
      [`& .${autocompleteClasses_default.input}`]: {
        width: 0,
        minWidth: 30
      }
    },
    [`& .${inputClasses_default.root}`]: {
      paddingBottom: 1,
      "& .MuiInput-input": {
        padding: "4px 4px 4px 0px"
      }
    },
    [`& .${inputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${inputClasses_default.input}`]: {
        padding: "2px 4px 3px 0"
      }
    },
    [`& .${outlinedInputClasses_default.root}`]: {
      padding: 9,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "7.5px 4px 7.5px 6px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${outlinedInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      padding: 6,
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "2.5px 4px 2.5px 6px"
      }
    },
    [`& .${filledInputClasses_default.root}`]: {
      paddingTop: 19,
      paddingLeft: 8,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${filledInputClasses_default.input}`]: {
        padding: "7px 4px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      paddingBottom: 1,
      [`& .${filledInputClasses_default.input}`]: {
        padding: "2.5px 4px"
      }
    },
    [`& .${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 8
    },
    [`& .${autocompleteClasses_default.input}`]: _extends({
      flexGrow: 1,
      textOverflow: "ellipsis",
      opacity: 0
    }, ownerState.inputFocused && {
      opacity: 1
    })
  }));
  var AutocompleteEndAdornment = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "EndAdornment",
    overridesResolver: (props, styles4) => styles4.endAdornment
  })({
    position: "absolute",
    right: 0,
    top: "calc(50% - 14px)"
  });
  var AutocompleteClearIndicator = styled_default(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "ClearIndicator",
    overridesResolver: (props, styles4) => styles4.clearIndicator
  })({
    marginRight: -2,
    padding: 4,
    visibility: "hidden"
  });
  var AutocompletePopupIndicator = styled_default(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "PopupIndicator",
    overridesResolver: ({
      ownerState
    }, styles4) => _extends({}, styles4.popupIndicator, ownerState.popupOpen && styles4.popupIndicatorOpen)
  })(({
    ownerState
  }) => _extends({
    padding: 2,
    marginRight: -2
  }, ownerState.popupOpen && {
    transform: "rotate(180deg)"
  }));
  var AutocompletePopper = styled_default(Popper_default, {
    name: "MuiAutocomplete",
    slot: "Popper",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${autocompleteClasses_default.option}`]: styles4.option
      }, styles4.popper, ownerState.disablePortal && styles4.popperDisablePortal];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    zIndex: theme.zIndex.modal
  }, ownerState.disablePortal && {
    position: "absolute"
  }));
  var AutocompletePaper = styled_default(Paper_default, {
    name: "MuiAutocomplete",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })(({
    theme
  }) => _extends({}, theme.typography.body1, {
    overflow: "auto"
  }));
  var AutocompleteLoading = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "Loading",
    overridesResolver: (props, styles4) => styles4.loading
  })(({
    theme
  }) => ({
    color: theme.palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteNoOptions = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "NoOptions",
    overridesResolver: (props, styles4) => styles4.noOptions
  })(({
    theme
  }) => ({
    color: theme.palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteListbox = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "Listbox",
    overridesResolver: (props, styles4) => styles4.listbox
  })(({
    theme
  }) => ({
    listStyle: "none",
    margin: 0,
    padding: "8px 0",
    maxHeight: "40vh",
    overflow: "auto",
    [`& .${autocompleteClasses_default.option}`]: {
      minHeight: 48,
      display: "flex",
      overflow: "hidden",
      justifyContent: "flex-start",
      alignItems: "center",
      cursor: "pointer",
      paddingTop: 6,
      boxSizing: "border-box",
      outline: "0",
      WebkitTapHighlightColor: "transparent",
      paddingBottom: 6,
      paddingLeft: 16,
      paddingRight: 16,
      [theme.breakpoints.up("sm")]: {
        minHeight: "auto"
      },
      [`&.${autocompleteClasses_default.focused}`]: {
        backgroundColor: theme.palette.action.hover,
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      '&[aria-disabled="true"]': {
        opacity: theme.palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`&.${autocompleteClasses_default.focusVisible}`]: {
        backgroundColor: theme.palette.action.focus
      },
      '&[aria-selected="true"]': {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${autocompleteClasses_default.focused}`]: {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: theme.palette.action.selected
          }
        },
        [`&.${autocompleteClasses_default.focusVisible}`]: {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }
    }
  }));
  var AutocompleteGroupLabel = styled_default(ListSubheader_default, {
    name: "MuiAutocomplete",
    slot: "GroupLabel",
    overridesResolver: (props, styles4) => styles4.groupLabel
  })(({
    theme
  }) => ({
    backgroundColor: theme.palette.background.paper,
    top: -8
  }));
  var AutocompleteGroupUl = styled_default("ul", {
    name: "MuiAutocomplete",
    slot: "GroupUl",
    overridesResolver: (props, styles4) => styles4.groupUl
  })({
    padding: 0,
    [`& .${autocompleteClasses_default.option}`]: {
      paddingLeft: 24
    }
  });
  var Autocomplete = /* @__PURE__ */ React51.forwardRef(function Autocomplete2(inProps, ref) {
    var _componentsProps$clea, _componentsProps$pape;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiAutocomplete"
    });
    const {
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      ChipProps,
      className,
      clearIcon = _ClearIcon || (_ClearIcon = /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Close_default, {
        fontSize: "small"
      })),
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      clearText = "Clear",
      closeText = "Close",
      componentsProps = {},
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled = false,
      disabledItemsFocusable = false,
      disableListWrap = false,
      disablePortal = false,
      filterSelectedOptions = false,
      forcePopupIcon = "auto",
      freeSolo = false,
      fullWidth = false,
      getLimitTagsText = (more) => `+${more}`,
      getOptionLabel = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      includeInputInList = false,
      limitTags = -1,
      ListboxComponent = "ul",
      ListboxProps,
      loading = false,
      loadingText = "Loading\u2026",
      multiple = false,
      noOptionsText = "No options",
      openOnFocus = false,
      openText = "Open",
      PaperComponent = Paper_default,
      PopperComponent = Popper_default,
      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(ArrowDropDown_default, {})),
      readOnly = false,
      renderGroup: renderGroupProp,
      renderInput,
      renderOption: renderOptionProp,
      renderTags,
      selectOnFocus = !props.freeSolo,
      size = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
    const {
      getRootProps,
      getInputProps,
      getInputLabelProps,
      getPopupIndicatorProps,
      getClearProps,
      getTagProps,
      getListboxProps,
      getOptionProps,
      value,
      dirty,
      id,
      popupOpen,
      focused,
      focusedTag,
      anchorEl,
      setAnchorEl,
      inputValue,
      groupedOptions
    } = useAutocomplete(_extends({}, props, {
      componentName: "Autocomplete"
    }));
    const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
    const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
    const ownerState = _extends({}, props, {
      disablePortal,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused: focusedTag === -1,
      popupOpen,
      size
    });
    const classes = useUtilityClasses12(ownerState);
    let startAdornment;
    if (multiple && value.length > 0) {
      const getCustomizedTagProps = (params) => _extends({
        className: clsx_m_default(classes.tag),
        disabled
      }, getTagProps(params));
      if (renderTags) {
        startAdornment = renderTags(value, getCustomizedTagProps);
      } else {
        startAdornment = value.map((option, index) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Chip_default, _extends({
          label: getOptionLabel(option),
          size
        }, getCustomizedTagProps({
          index
        }), ChipProps)));
      }
    }
    if (limitTags > -1 && Array.isArray(startAdornment)) {
      const more = startAdornment.length - limitTags;
      if (!focused && more > 0) {
        startAdornment = startAdornment.splice(0, limitTags);
        startAdornment.push(/* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", {
          className: classes.tag,
          children: getLimitTagsText(more)
        }, startAdornment.length));
      }
    }
    const defaultRenderGroup = (params) => /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("li", {
      children: [/* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AutocompleteGroupLabel, {
        className: classes.groupLabel,
        ownerState,
        component: "div",
        children: params.group
      }), /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AutocompleteGroupUl, {
        className: classes.groupUl,
        ownerState,
        children: params.children
      })]
    }, params.key);
    const renderGroup = renderGroupProp || defaultRenderGroup;
    const defaultRenderOption = (props2, option) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("li", _extends({}, props2, {
      children: getOptionLabel(option)
    }));
    const renderOption = renderOptionProp || defaultRenderOption;
    const renderListOption = (option, index) => {
      const optionProps = getOptionProps({
        option,
        index
      });
      return renderOption(_extends({}, optionProps, {
        className: classes.option
      }), option, {
        selected: optionProps["aria-selected"],
        inputValue
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(React51.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AutocompleteRoot, _extends({
        ref,
        className: clsx_m_default(classes.root, className),
        ownerState
      }, getRootProps(other), {
        children: renderInput({
          id,
          disabled,
          fullWidth: true,
          size: size === "small" ? "small" : void 0,
          InputLabelProps: getInputLabelProps(),
          InputProps: {
            ref: setAnchorEl,
            className: classes.inputRoot,
            startAdornment,
            endAdornment: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(AutocompleteEndAdornment, {
              className: classes.endAdornment,
              ownerState,
              children: [hasClearIcon ? /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AutocompleteClearIndicator, _extends({}, getClearProps(), {
                "aria-label": clearText,
                title: clearText,
                ownerState
              }, componentsProps.clearIndicator, {
                className: clsx_m_default(classes.clearIndicator, (_componentsProps$clea = componentsProps.clearIndicator) == null ? void 0 : _componentsProps$clea.className),
                children: clearIcon
              })) : null, hasPopupIcon ? /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
                disabled,
                "aria-label": popupOpen ? closeText : openText,
                title: popupOpen ? closeText : openText,
                className: clsx_m_default(classes.popupIndicator),
                ownerState,
                children: popupIcon
              })) : null]
            })
          },
          inputProps: _extends({
            className: clsx_m_default(classes.input),
            disabled,
            readOnly
          }, getInputProps())
        })
      })), popupOpen && anchorEl ? /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AutocompletePopper, {
        as: PopperComponent,
        className: clsx_m_default(classes.popper),
        disablePortal,
        style: {
          width: anchorEl ? anchorEl.clientWidth : null
        },
        ownerState,
        role: "presentation",
        anchorEl,
        open: true,
        children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(AutocompletePaper, _extends({
          ownerState,
          as: PaperComponent
        }, componentsProps.paper, {
          className: clsx_m_default(classes.paper, (_componentsProps$pape = componentsProps.paper) == null ? void 0 : _componentsProps$pape.className),
          children: [loading && groupedOptions.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AutocompleteLoading, {
            className: classes.loading,
            ownerState,
            children: loadingText
          }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AutocompleteNoOptions, {
            className: classes.noOptions,
            ownerState,
            role: "presentation",
            onMouseDown: (event) => {
              event.preventDefault();
            },
            children: noOptionsText
          }) : null, groupedOptions.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AutocompleteListbox, _extends({
            as: ListboxComponent,
            className: classes.listbox,
            ownerState
          }, getListboxProps(), ListboxProps, {
            children: groupedOptions.map((option, index) => {
              if (groupBy) {
                return renderGroup({
                  key: option.key,
                  group: option.group,
                  children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
                });
              }
              return renderListOption(option, index);
            })
          })) : null]
        }))
      }) : null]
    });
  });
  true ? Autocomplete.propTypes = {
    autoComplete: import_prop_types29.default.bool,
    autoHighlight: import_prop_types29.default.bool,
    autoSelect: import_prop_types29.default.bool,
    blurOnSelect: import_prop_types29.default.oneOfType([import_prop_types29.default.oneOf(["mouse", "touch"]), import_prop_types29.default.bool]),
    ChipProps: import_prop_types29.default.object,
    classes: import_prop_types29.default.object,
    className: import_prop_types29.default.string,
    clearIcon: import_prop_types29.default.node,
    clearOnBlur: import_prop_types29.default.bool,
    clearOnEscape: import_prop_types29.default.bool,
    clearText: import_prop_types29.default.string,
    closeText: import_prop_types29.default.string,
    componentsProps: import_prop_types29.default.shape({
      clearIndicator: import_prop_types29.default.object,
      paper: import_prop_types29.default.object
    }),
    defaultValue: chainPropTypes(import_prop_types29.default.any, (props) => {
      if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
        return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
      }
      return null;
    }),
    disableClearable: import_prop_types29.default.bool,
    disableCloseOnSelect: import_prop_types29.default.bool,
    disabled: import_prop_types29.default.bool,
    disabledItemsFocusable: import_prop_types29.default.bool,
    disableListWrap: import_prop_types29.default.bool,
    disablePortal: import_prop_types29.default.bool,
    filterOptions: import_prop_types29.default.func,
    filterSelectedOptions: import_prop_types29.default.bool,
    forcePopupIcon: import_prop_types29.default.oneOfType([import_prop_types29.default.oneOf(["auto"]), import_prop_types29.default.bool]),
    freeSolo: import_prop_types29.default.bool,
    fullWidth: import_prop_types29.default.bool,
    getLimitTagsText: import_prop_types29.default.func,
    getOptionDisabled: import_prop_types29.default.func,
    getOptionLabel: import_prop_types29.default.func,
    groupBy: import_prop_types29.default.func,
    handleHomeEndKeys: import_prop_types29.default.bool,
    id: import_prop_types29.default.string,
    includeInputInList: import_prop_types29.default.bool,
    inputValue: import_prop_types29.default.string,
    isOptionEqualToValue: import_prop_types29.default.func,
    limitTags: integerPropType_default,
    ListboxComponent: import_prop_types29.default.elementType,
    ListboxProps: import_prop_types29.default.object,
    loading: import_prop_types29.default.bool,
    loadingText: import_prop_types29.default.node,
    multiple: import_prop_types29.default.bool,
    noOptionsText: import_prop_types29.default.node,
    onChange: import_prop_types29.default.func,
    onClose: import_prop_types29.default.func,
    onHighlightChange: import_prop_types29.default.func,
    onInputChange: import_prop_types29.default.func,
    onOpen: import_prop_types29.default.func,
    open: import_prop_types29.default.bool,
    openOnFocus: import_prop_types29.default.bool,
    openText: import_prop_types29.default.string,
    options: import_prop_types29.default.array.isRequired,
    PaperComponent: import_prop_types29.default.elementType,
    PopperComponent: import_prop_types29.default.elementType,
    popupIcon: import_prop_types29.default.node,
    readOnly: import_prop_types29.default.bool,
    renderGroup: import_prop_types29.default.func,
    renderInput: import_prop_types29.default.func.isRequired,
    renderOption: import_prop_types29.default.func,
    renderTags: import_prop_types29.default.func,
    selectOnFocus: import_prop_types29.default.bool,
    size: import_prop_types29.default.oneOfType([import_prop_types29.default.oneOf(["small", "medium"]), import_prop_types29.default.string]),
    sx: import_prop_types29.default.oneOfType([import_prop_types29.default.arrayOf(import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object, import_prop_types29.default.bool])), import_prop_types29.default.func, import_prop_types29.default.object]),
    value: chainPropTypes(import_prop_types29.default.any, (props) => {
      if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
        return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
      }
      return null;
    })
  } : void 0;
  var Autocomplete_default = Autocomplete;

  // node_modules/@mui/material/Backdrop/Backdrop.js
  var React53 = __toModule(require_react());
  var import_prop_types31 = __toModule(require_prop_types());

  // node_modules/@mui/material/Fade/Fade.js
  var React52 = __toModule(require_react());
  var import_prop_types30 = __toModule(require_prop_types());
  var import_jsx_runtime41 = __toModule(require_jsx_runtime());
  var _excluded28 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles2 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var Fade = /* @__PURE__ */ React52.forwardRef(function Fade2(props, ref) {
    const theme = useTheme5();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style3,
      timeout: timeout2 = defaultTimeout,
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
    const enableStrictModeCompat = true;
    const nodeRef = React52.useRef(null);
    const foreignRef = useForkRef_default(children.ref, ref);
    const handleRef = useForkRef_default(nodeRef, foreignRef);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React52.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles2[state], style3, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Fade.propTypes = {
    addEndListener: import_prop_types30.default.func,
    appear: import_prop_types30.default.bool,
    children: elementAcceptingRef_default.isRequired,
    easing: import_prop_types30.default.oneOfType([import_prop_types30.default.shape({
      enter: import_prop_types30.default.string,
      exit: import_prop_types30.default.string
    }), import_prop_types30.default.string]),
    in: import_prop_types30.default.bool,
    onEnter: import_prop_types30.default.func,
    onEntered: import_prop_types30.default.func,
    onEntering: import_prop_types30.default.func,
    onExit: import_prop_types30.default.func,
    onExited: import_prop_types30.default.func,
    onExiting: import_prop_types30.default.func,
    style: import_prop_types30.default.object,
    timeout: import_prop_types30.default.oneOfType([import_prop_types30.default.number, import_prop_types30.default.shape({
      appear: import_prop_types30.default.number,
      enter: import_prop_types30.default.number,
      exit: import_prop_types30.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // node_modules/@mui/material/Backdrop/backdropClasses.js
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass("MuiBackdrop", slot);
  }
  var backdropClasses = generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);

  // node_modules/@mui/material/Backdrop/Backdrop.js
  var import_jsx_runtime42 = __toModule(require_jsx_runtime());
  var _excluded29 = ["children", "component", "components", "componentsProps", "className", "invisible", "open", "transitionDuration", "TransitionComponent"];
  var useUtilityClasses13 = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };
  var BackdropRoot = styled_default("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.invisible && styles4.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  var Backdrop = /* @__PURE__ */ React53.forwardRef(function Backdrop2(inProps, ref) {
    var _components$Root, _componentsProps$root;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      component = "div",
      components = {},
      componentsProps = {},
      className,
      invisible = false,
      open,
      transitionDuration,
      TransitionComponent = Fade_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
    const ownerState = _extends({}, props, {
      component,
      invisible
    });
    const classes = useUtilityClasses13(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(BackdropRoot, {
        "aria-hidden": true,
        as: (_components$Root = components.Root) != null ? _components$Root : component,
        className: clsx_m_default(classes.root, className),
        ownerState: _extends({}, ownerState, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState),
        classes,
        ref,
        children
      })
    }));
  });
  true ? Backdrop.propTypes = {
    children: import_prop_types31.default.node,
    classes: import_prop_types31.default.object,
    className: import_prop_types31.default.string,
    component: import_prop_types31.default.elementType,
    components: import_prop_types31.default.shape({
      Root: import_prop_types31.default.elementType
    }),
    componentsProps: import_prop_types31.default.shape({
      root: import_prop_types31.default.object
    }),
    invisible: import_prop_types31.default.bool,
    open: import_prop_types31.default.bool.isRequired,
    sx: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object, import_prop_types31.default.bool])), import_prop_types31.default.func, import_prop_types31.default.object]),
    transitionDuration: import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.shape({
      appear: import_prop_types31.default.number,
      enter: import_prop_types31.default.number,
      exit: import_prop_types31.default.number
    })])
  } : void 0;
  var Backdrop_default = Backdrop;

  // node_modules/@mui/material/Badge/Badge.js
  var React54 = __toModule(require_react());
  var import_prop_types32 = __toModule(require_prop_types());

  // node_modules/@mui/material/utils/shouldSpreadAdditionalProps.js
  var shouldSpreadAdditionalProps = (Slot) => {
    return !Slot || !isHostComponent_default(Slot);
  };
  var shouldSpreadAdditionalProps_default = shouldSpreadAdditionalProps;

  // node_modules/@mui/material/Badge/badgeClasses.js
  function getBadgeUtilityClass(slot) {
    return generateUtilityClass("MuiBadge", slot);
  }
  var badgeClasses = generateUtilityClasses("MuiBadge", [
    "root",
    "badge",
    "dot",
    "standard",
    "anchorOriginTopRight",
    "anchorOriginBottomRight",
    "anchorOriginTopLeft",
    "anchorOriginBottomLeft",
    "invisible",
    "colorError",
    "colorInfo",
    "colorPrimary",
    "colorSecondary",
    "colorSuccess",
    "colorWarning",
    "overlapRectangular",
    "overlapCircular",
    "anchorOriginTopLeftCircular",
    "anchorOriginTopLeftRectangular",
    "anchorOriginTopRightCircular",
    "anchorOriginTopRightRectangular",
    "anchorOriginBottomLeftCircular",
    "anchorOriginBottomLeftRectangular",
    "anchorOriginBottomRightCircular",
    "anchorOriginBottomRightRectangular"
  ]);
  var badgeClasses_default = badgeClasses;

  // node_modules/@mui/material/Badge/Badge.js
  var import_jsx_runtime43 = __toModule(require_jsx_runtime());
  var _excluded30 = ["anchorOrigin", "className", "component", "components", "componentsProps", "overlap", "color", "invisible", "max", "badgeContent", "showZero", "variant"];
  var RADIUS_STANDARD = 10;
  var RADIUS_DOT = 4;
  var useUtilityClasses14 = (ownerState) => {
    const {
      color: color2,
      anchorOrigin,
      invisible,
      overlap,
      variant,
      classes = {}
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", variant, invisible && "invisible", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}${capitalize_default(overlap)}`, `overlap${capitalize_default(overlap)}`, color2 !== "default" && `color${capitalize_default(color2)}`]
    };
    return composeClasses(slots, getBadgeUtilityClass, classes);
  };
  var BadgeRoot = styled_default("span", {
    name: "MuiBadge",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({
    position: "relative",
    display: "inline-flex",
    verticalAlign: "middle",
    flexShrink: 0
  });
  var BadgeBadge = styled_default("span", {
    name: "MuiBadge",
    slot: "Badge",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.badge, styles4[ownerState.variant], styles4[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}${capitalize_default(ownerState.overlap)}`], ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`], ownerState.invisible && styles4.invisible];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(12),
    minWidth: RADIUS_STANDARD * 2,
    lineHeight: 1,
    padding: "0 6px",
    height: RADIUS_STANDARD * 2,
    borderRadius: RADIUS_STANDARD,
    zIndex: 1,
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.enteringScreen
    })
  }, ownerState.color !== "default" && {
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
    color: (theme.vars || theme).palette[ownerState.color].contrastText
  }, ownerState.variant === "dot" && {
    borderRadius: RADIUS_DOT,
    height: RADIUS_DOT * 2,
    minWidth: RADIUS_DOT * 2,
    padding: 0
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
    top: 0,
    right: 0,
    transform: "scale(1) translate(50%, -50%)",
    transformOrigin: "100% 0%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
    bottom: 0,
    right: 0,
    transform: "scale(1) translate(50%, 50%)",
    transformOrigin: "100% 100%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
    top: 0,
    left: 0,
    transform: "scale(1) translate(-50%, -50%)",
    transformOrigin: "0% 0%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(-50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
    bottom: 0,
    left: 0,
    transform: "scale(1) translate(-50%, 50%)",
    transformOrigin: "0% 100%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(-50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
    top: "14%",
    right: "14%",
    transform: "scale(1) translate(50%, -50%)",
    transformOrigin: "100% 0%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
    bottom: "14%",
    right: "14%",
    transform: "scale(1) translate(50%, 50%)",
    transformOrigin: "100% 100%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
    top: "14%",
    left: "14%",
    transform: "scale(1) translate(-50%, -50%)",
    transformOrigin: "0% 0%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(-50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
    bottom: "14%",
    left: "14%",
    transform: "scale(1) translate(-50%, 50%)",
    transformOrigin: "0% 100%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(-50%, 50%)"
    }
  }, ownerState.invisible && {
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.leavingScreen
    })
  }));
  var Badge = /* @__PURE__ */ React54.forwardRef(function Badge2(inProps, ref) {
    var _componentsProps$root, _componentsProps$root2, _componentsProps$badg, _componentsProps$badg2;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBadge"
    });
    const {
      anchorOrigin: anchorOriginProp = {
        vertical: "top",
        horizontal: "right"
      },
      className,
      component = "span",
      components = {},
      componentsProps = {},
      overlap: overlapProp = "rectangular",
      color: colorProp = "default",
      invisible: invisibleProp = false,
      max: max2,
      badgeContent: badgeContentProp,
      showZero = false,
      variant: variantProp = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
    const prevProps = usePreviousProps_default({
      anchorOrigin: anchorOriginProp,
      color: colorProp,
      overlap: overlapProp,
      variant: variantProp
    });
    let invisible = invisibleProp;
    if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== "dot")) {
      invisible = true;
    }
    const {
      color: color2 = colorProp,
      overlap = overlapProp,
      anchorOrigin = anchorOriginProp,
      variant = variantProp
    } = invisible ? prevProps : props;
    const ownerState = _extends({}, props, {
      anchorOrigin,
      invisible,
      color: color2,
      overlap,
      variant
    });
    const classes = useUtilityClasses14(ownerState);
    let displayValue;
    if (variant !== "dot") {
      displayValue = badgeContentProp && Number(badgeContentProp) > max2 ? `${max2}+` : badgeContentProp;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(BadgeUnstyled_default, _extends({
      invisible: invisibleProp,
      badgeContent: displayValue,
      showZero,
      max: max2
    }, other, {
      components: _extends({
        Root: BadgeRoot,
        Badge: BadgeBadge
      }, components),
      className: clsx_m_default(className, classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className),
      componentsProps: {
        root: _extends({}, componentsProps.root, shouldSpreadAdditionalProps_default(components.Root) && {
          as: component,
          ownerState: _extends({}, (_componentsProps$root2 = componentsProps.root) == null ? void 0 : _componentsProps$root2.ownerState, {
            anchorOrigin,
            color: color2,
            overlap,
            variant
          })
        }),
        badge: _extends({}, componentsProps.badge, {
          className: clsx_m_default(classes.badge, (_componentsProps$badg = componentsProps.badge) == null ? void 0 : _componentsProps$badg.className)
        }, shouldSpreadAdditionalProps_default(components.Badge) && {
          ownerState: _extends({}, (_componentsProps$badg2 = componentsProps.badge) == null ? void 0 : _componentsProps$badg2.ownerState, {
            anchorOrigin,
            color: color2,
            overlap,
            variant
          })
        })
      },
      ref
    }));
  });
  true ? Badge.propTypes = {
    anchorOrigin: import_prop_types32.default.shape({
      horizontal: import_prop_types32.default.oneOf(["left", "right"]).isRequired,
      vertical: import_prop_types32.default.oneOf(["bottom", "top"]).isRequired
    }),
    badgeContent: import_prop_types32.default.node,
    children: import_prop_types32.default.node,
    classes: import_prop_types32.default.object,
    className: import_prop_types32.default.string,
    color: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types32.default.string]),
    component: import_prop_types32.default.elementType,
    components: import_prop_types32.default.shape({
      Badge: import_prop_types32.default.elementType,
      Root: import_prop_types32.default.elementType
    }),
    componentsProps: import_prop_types32.default.shape({
      badge: import_prop_types32.default.object,
      root: import_prop_types32.default.object
    }),
    invisible: import_prop_types32.default.bool,
    max: import_prop_types32.default.number,
    overlap: import_prop_types32.default.oneOf(["circular", "rectangular"]),
    showZero: import_prop_types32.default.bool,
    sx: import_prop_types32.default.oneOfType([import_prop_types32.default.arrayOf(import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object, import_prop_types32.default.bool])), import_prop_types32.default.func, import_prop_types32.default.object]),
    variant: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["dot", "standard"]), import_prop_types32.default.string])
  } : void 0;
  var Badge_default = Badge;

  // node_modules/@mui/material/Box/Box.js
  var import_prop_types33 = __toModule(require_prop_types());
  var defaultTheme2 = createTheme_default2();
  var Box = createBox({
    defaultTheme: defaultTheme2,
    defaultClassName: "MuiBox-root",
    generateClassName: ClassNameGenerator_default.generate
  });
  true ? Box.propTypes = {
    children: import_prop_types33.default.node,
    component: import_prop_types33.default.elementType,
    sx: import_prop_types33.default.oneOfType([import_prop_types33.default.arrayOf(import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.object, import_prop_types33.default.bool])), import_prop_types33.default.func, import_prop_types33.default.object])
  } : void 0;
  var Box_default = Box;

  // node_modules/@mui/material/Button/Button.js
  var React56 = __toModule(require_react());
  var import_prop_types34 = __toModule(require_prop_types());

  // node_modules/@mui/material/Button/buttonClasses.js
  function getButtonUtilityClass(slot) {
    return generateUtilityClass("MuiButton", slot);
  }
  var buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "contained", "containedInherit", "containedPrimary", "containedSecondary", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  var buttonClasses_default = buttonClasses;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupContext.js
  var React55 = __toModule(require_react());
  var ButtonGroupContext = /* @__PURE__ */ React55.createContext({});
  if (true) {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  var ButtonGroupContext_default = ButtonGroupContext;

  // node_modules/@mui/material/Button/Button.js
  var import_jsx_runtime44 = __toModule(require_jsx_runtime());
  var import_jsx_runtime45 = __toModule(require_jsx_runtime());
  var _excluded31 = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  var useUtilityClasses15 = (ownerState) => {
    const {
      color: color2,
      disableElevation,
      fullWidth,
      size,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize_default(color2)}`, `size${capitalize_default(size)}`, `${variant}Size${capitalize_default(size)}`, color2 === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["startIcon", `iconSize${capitalize_default(size)}`],
      endIcon: ["endIcon", `iconSize${capitalize_default(size)}`]
    };
    const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  var ButtonRoot = styled_default(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], styles4[`${ownerState.variant}${capitalize_default(ownerState.color)}`], styles4[`size${capitalize_default(ownerState.size)}`], styles4[`${ownerState.variant}Size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles4.colorInherit, ownerState.disableElevation && styles4.disableElevation, ownerState.fullWidth && styles4.fullWidth];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    return _extends({}, theme.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: (theme.vars || theme).palette.grey.A100,
        boxShadow: (theme.vars || theme).shadows[4],
        "@media (hover: none)": {
          boxShadow: (theme.vars || theme).shadows[2],
          backgroundColor: (theme.vars || theme).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[8]
      }),
      [`&.${buttonClasses_default.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[6]
      }),
      [`&.${buttonClasses_default.disabled}`]: _extends({
        color: (theme.vars || theme).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      }, ownerState.variant === "outlined" && ownerState.color === "secondary" && {
        border: `1px solid ${(theme.vars || theme).palette.action.disabled}`
      }, ownerState.variant === "contained" && {
        color: (theme.vars || theme).palette.action.disabled,
        boxShadow: (theme.vars || theme).shadows[0],
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme.vars ? theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: (theme.vars || theme).palette.grey[300],
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.disabled}`]: {
      boxShadow: "none"
    }
  });
  var ButtonStartIcon = styled_default("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.startIcon, styles4[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  var ButtonEndIcon = styled_default("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.endIcon, styles4[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  var Button = /* @__PURE__ */ React56.forwardRef(function Button2(inProps, ref) {
    const contextProps = React56.useContext(ButtonGroupContext_default);
    const resolvedProps = resolveProps(contextProps, inProps);
    const props = useThemeProps2({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color: color2 = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size = "medium",
      startIcon: startIconProp,
      type,
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size,
      type,
      variant
    });
    const classes = useUtilityClasses15(ownerState);
    const startIcon = startIconProp && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp
    });
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(ButtonRoot, _extends({
      ownerState,
      className: clsx_m_default(className, contextProps.className),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other, {
      classes,
      children: [startIcon, children, endIcon]
    }));
  });
  true ? Button.propTypes = {
    children: import_prop_types34.default.node,
    classes: import_prop_types34.default.object,
    className: import_prop_types34.default.string,
    color: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), import_prop_types34.default.string]),
    component: import_prop_types34.default.elementType,
    disabled: import_prop_types34.default.bool,
    disableElevation: import_prop_types34.default.bool,
    disableFocusRipple: import_prop_types34.default.bool,
    disableRipple: import_prop_types34.default.bool,
    endIcon: import_prop_types34.default.node,
    focusVisibleClassName: import_prop_types34.default.string,
    fullWidth: import_prop_types34.default.bool,
    href: import_prop_types34.default.string,
    size: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["small", "medium", "large"]), import_prop_types34.default.string]),
    startIcon: import_prop_types34.default.node,
    sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object]),
    type: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["button", "reset", "submit"]), import_prop_types34.default.string]),
    variant: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["contained", "outlined", "text"]), import_prop_types34.default.string])
  } : void 0;
  var Button_default = Button;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  var React61 = __toModule(require_react());
  var import_prop_types36 = __toModule(require_prop_types());

  // node_modules/@mui/material/internal/SwitchBase.js
  var React57 = __toModule(require_react());
  var import_prop_types35 = __toModule(require_prop_types());

  // node_modules/@mui/material/internal/switchBaseClasses.js
  function getSwitchBaseUtilityClass(slot) {
    return generateUtilityClass("PrivateSwitchBase", slot);
  }
  var switchBaseClasses = generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);

  // node_modules/@mui/material/internal/SwitchBase.js
  var import_jsx_runtime46 = __toModule(require_jsx_runtime());
  var import_jsx_runtime47 = __toModule(require_jsx_runtime());
  var _excluded33 = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
  var useUtilityClasses16 = (ownerState) => {
    const {
      classes,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
      input: ["input"]
    };
    return composeClasses(slots, getSwitchBaseUtilityClass, classes);
  };
  var SwitchBaseRoot = styled_default(ButtonBase_default)(({
    ownerState
  }) => _extends({
    padding: 9,
    borderRadius: "50%"
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }));
  var SwitchBaseInput = styled_default("input")({
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  var SwitchBase = /* @__PURE__ */ React57.forwardRef(function SwitchBase2(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      className,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required,
      tabIndex,
      type,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
    const [checked, setCheckedState] = useControlled_default({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    });
    const muiFormControl = useFormControl();
    const handleFocus = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    const handleInputChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    const hasLabelFor = type === "checkbox" || type === "radio";
    const ownerState = _extends({}, props, {
      checked,
      disabled,
      disableFocusRipple,
      edge
    });
    const classes = useUtilityClasses16(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(SwitchBaseRoot, _extends({
      component: "span",
      className: clsx_m_default(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus,
      onBlur: handleBlur,
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SwitchBaseInput, _extends({
        autoFocus,
        checked: checkedProp,
        defaultChecked,
        className: classes.input,
        disabled,
        id: hasLabelFor && id,
        name,
        onChange: handleInputChange,
        readOnly,
        ref: inputRef,
        required,
        ownerState,
        tabIndex,
        type
      }, type === "checkbox" && value === void 0 ? {} : {
        value
      }, inputProps)), checked ? checkedIcon : icon]
    }));
  });
  true ? SwitchBase.propTypes = {
    autoFocus: import_prop_types35.default.bool,
    checked: import_prop_types35.default.bool,
    checkedIcon: import_prop_types35.default.node.isRequired,
    classes: import_prop_types35.default.object,
    className: import_prop_types35.default.string,
    defaultChecked: import_prop_types35.default.bool,
    disabled: import_prop_types35.default.bool,
    disableFocusRipple: import_prop_types35.default.bool,
    edge: import_prop_types35.default.oneOf(["end", "start", false]),
    icon: import_prop_types35.default.node.isRequired,
    id: import_prop_types35.default.string,
    inputProps: import_prop_types35.default.object,
    inputRef: refType_default,
    name: import_prop_types35.default.string,
    onBlur: import_prop_types35.default.func,
    onChange: import_prop_types35.default.func,
    onFocus: import_prop_types35.default.func,
    readOnly: import_prop_types35.default.bool,
    required: import_prop_types35.default.bool,
    sx: import_prop_types35.default.object,
    tabIndex: import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.string]),
    type: import_prop_types35.default.string.isRequired,
    value: import_prop_types35.default.any
  } : void 0;
  var SwitchBase_default = SwitchBase;

  // node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js
  var React58 = __toModule(require_react());
  var import_jsx_runtime48 = __toModule(require_jsx_runtime());
  var CheckBoxOutlineBlank_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");

  // node_modules/@mui/material/internal/svg-icons/CheckBox.js
  var React59 = __toModule(require_react());
  var import_jsx_runtime49 = __toModule(require_jsx_runtime());
  var CheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime49.jsx)("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");

  // node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js
  var React60 = __toModule(require_react());
  var import_jsx_runtime50 = __toModule(require_jsx_runtime());
  var IndeterminateCheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime50.jsx)("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");

  // node_modules/@mui/material/Checkbox/checkboxClasses.js
  function getCheckboxUtilityClass(slot) {
    return generateUtilityClass("MuiCheckbox", slot);
  }
  var checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary"]);
  var checkboxClasses_default = checkboxClasses;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  var import_jsx_runtime51 = __toModule(require_jsx_runtime());
  var _excluded34 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"];
  var useUtilityClasses17 = (ownerState) => {
    const {
      classes,
      indeterminate,
      color: color2
    } = ownerState;
    const slots = {
      root: ["root", indeterminate && "indeterminate", `color${capitalize_default(color2)}`]
    };
    const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var CheckboxRoot = styled_default(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiCheckbox",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.indeterminate && styles4.indeterminate, ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: theme.palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: alpha(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
      color: theme.palette[ownerState.color].main
    },
    [`&.${checkboxClasses_default.disabled}`]: {
      color: theme.palette.action.disabled
    }
  }));
  var defaultCheckedIcon = /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(CheckBox_default, {});
  var defaultIcon = /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(CheckBoxOutlineBlank_default, {});
  var defaultIndeterminateIcon = /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(IndeterminateCheckBox_default, {});
  var Checkbox = /* @__PURE__ */ React61.forwardRef(function Checkbox2(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCheckbox"
    });
    const {
      checkedIcon = defaultCheckedIcon,
      color: color2 = "primary",
      icon: iconProp = defaultIcon,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = _extends({}, props, {
      color: color2,
      indeterminate,
      size
    });
    const classes = useUtilityClasses17(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(CheckboxRoot, _extends({
      type: "checkbox",
      inputProps: _extends({
        "data-indeterminate": indeterminate
      }, inputProps),
      icon: /* @__PURE__ */ React61.cloneElement(icon, {
        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
      }),
      checkedIcon: /* @__PURE__ */ React61.cloneElement(indeterminateIcon, {
        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
      }),
      ownerState,
      ref
    }, other, {
      classes
    }));
  });
  true ? Checkbox.propTypes = {
    checked: import_prop_types36.default.bool,
    checkedIcon: import_prop_types36.default.node,
    classes: import_prop_types36.default.object,
    color: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types36.default.string]),
    defaultChecked: import_prop_types36.default.bool,
    disabled: import_prop_types36.default.bool,
    disableRipple: import_prop_types36.default.bool,
    icon: import_prop_types36.default.node,
    id: import_prop_types36.default.string,
    indeterminate: import_prop_types36.default.bool,
    indeterminateIcon: import_prop_types36.default.node,
    inputProps: import_prop_types36.default.object,
    inputRef: refType_default,
    onChange: import_prop_types36.default.func,
    required: import_prop_types36.default.bool,
    size: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["medium", "small"]), import_prop_types36.default.string]),
    sx: import_prop_types36.default.oneOfType([import_prop_types36.default.arrayOf(import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object, import_prop_types36.default.bool])), import_prop_types36.default.func, import_prop_types36.default.object]),
    value: import_prop_types36.default.any
  } : void 0;
  var Checkbox_default = Checkbox;

  // node_modules/@mui/material/CircularProgress/CircularProgress.js
  var React62 = __toModule(require_react());
  var import_prop_types37 = __toModule(require_prop_types());

  // node_modules/@mui/material/CircularProgress/circularProgressClasses.js
  function getCircularProgressUtilityClass(slot) {
    return generateUtilityClass("MuiCircularProgress", slot);
  }
  var circularProgressClasses = generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);

  // node_modules/@mui/material/CircularProgress/CircularProgress.js
  var import_jsx_runtime52 = __toModule(require_jsx_runtime());
  var _excluded35 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
  var _2 = (t) => t;
  var _t5;
  var _t22;
  var _t32;
  var _t42;
  var SIZE = 44;
  var circularRotateKeyframe = keyframes(_t5 || (_t5 = _2`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
  var circularDashKeyframe = keyframes(_t22 || (_t22 = _2`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
  var useUtilityClasses18 = (ownerState) => {
    const {
      classes,
      variant,
      color: color2,
      disableShrink
    } = ownerState;
    const slots = {
      root: ["root", variant, `color${capitalize_default(color2)}`],
      svg: ["svg"],
      circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
    };
    return composeClasses(slots, getCircularProgressUtilityClass, classes);
  };
  var CircularProgressRoot = styled_default("span", {
    name: "MuiCircularProgress",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], styles4[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: "inline-block"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("transform")
  }, ownerState.color !== "inherit" && {
    color: (theme.vars || theme).palette[ownerState.color].main
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && css(_t32 || (_t32 = _2`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
  var CircularProgressSVG = styled_default("svg", {
    name: "MuiCircularProgress",
    slot: "Svg",
    overridesResolver: (props, styles4) => styles4.svg
  })({
    display: "block"
  });
  var CircularProgressCircle = styled_default("circle", {
    name: "MuiCircularProgress",
    slot: "Circle",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.circle, styles4[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles4.circleDisableShrink];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    stroke: "currentColor"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("stroke-dashoffset")
  }, ownerState.variant === "indeterminate" && {
    strokeDasharray: "80px, 200px",
    strokeDashoffset: 0
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t42 || (_t42 = _2`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
  var CircularProgress = /* @__PURE__ */ React62.forwardRef(function CircularProgress2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCircularProgress"
    });
    const {
      className,
      color: color2 = "primary",
      disableShrink = false,
      size = 40,
      style: style3,
      thickness = 3.6,
      value = 0,
      variant = "indeterminate"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
    const ownerState = _extends({}, props, {
      color: color2,
      disableShrink,
      size,
      thickness,
      value,
      variant
    });
    const classes = useUtilityClasses18(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};
    if (variant === "determinate") {
      const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps["aria-valuenow"] = Math.round(value);
      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
      rootStyle.transform = "rotate(-90deg)";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(CircularProgressRoot, _extends({
      className: clsx_m_default(classes.root, className),
      style: _extends({
        width: size,
        height: size
      }, rootStyle, style3),
      ownerState,
      ref,
      role: "progressbar"
    }, rootProps, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(CircularProgressSVG, {
        className: classes.svg,
        ownerState,
        viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
        children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(CircularProgressCircle, {
          className: classes.circle,
          style: circleStyle,
          ownerState,
          cx: SIZE,
          cy: SIZE,
          r: (SIZE - thickness) / 2,
          fill: "none",
          strokeWidth: thickness
        })
      })
    }));
  });
  true ? CircularProgress.propTypes = {
    classes: import_prop_types37.default.object,
    className: import_prop_types37.default.string,
    color: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types37.default.string]),
    disableShrink: chainPropTypes(import_prop_types37.default.bool, (props) => {
      if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
        return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
      }
      return null;
    }),
    size: import_prop_types37.default.oneOfType([import_prop_types37.default.number, import_prop_types37.default.string]),
    style: import_prop_types37.default.object,
    sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object]),
    thickness: import_prop_types37.default.number,
    value: import_prop_types37.default.number,
    variant: import_prop_types37.default.oneOf(["determinate", "indeterminate"])
  } : void 0;
  var CircularProgress_default = CircularProgress;

  // node_modules/@mui/material/Modal/Modal.js
  var React63 = __toModule(require_react());
  var import_prop_types38 = __toModule(require_prop_types());
  var import_jsx_runtime53 = __toModule(require_jsx_runtime());
  var _excluded36 = ["BackdropComponent", "closeAfterTransition", "children", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted"];
  var extendUtilityClasses = (ownerState) => {
    return ownerState.classes;
  };
  var ModalRoot = styled_default("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.open && ownerState.exited && styles4.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "fixed",
    zIndex: theme.zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  var ModalBackdrop = styled_default(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles4) => {
      return styles4.backdrop;
    }
  })({
    zIndex: -1
  });
  var Modal = /* @__PURE__ */ React63.forwardRef(function Modal2(inProps, ref) {
    var _componentsProps$root;
    const props = useThemeProps2({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      closeAfterTransition = false,
      children,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
    const [exited, setExited] = React63.useState(true);
    const commonProps = {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    };
    const ownerState = _extends({}, props, commonProps, {
      exited
    });
    const classes = extendUtilityClasses(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ModalUnstyled_default, _extends({
      components: _extends({
        Root: ModalRoot
      }, components),
      componentsProps: {
        root: _extends({}, componentsProps.root, (!components.Root || !isHostComponent_default(components.Root)) && {
          ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
        })
      },
      BackdropComponent,
      onTransitionEnter: () => setExited(false),
      onTransitionExited: () => setExited(true),
      ref
    }, other, {
      classes
    }, commonProps, {
      children
    }));
  });
  true ? Modal.propTypes = {
    BackdropComponent: import_prop_types38.default.elementType,
    BackdropProps: import_prop_types38.default.object,
    children: elementAcceptingRef_default.isRequired,
    classes: import_prop_types38.default.object,
    closeAfterTransition: import_prop_types38.default.bool,
    components: import_prop_types38.default.shape({
      Root: import_prop_types38.default.elementType
    }),
    componentsProps: import_prop_types38.default.shape({
      root: import_prop_types38.default.object
    }),
    container: import_prop_types38.default.oneOfType([HTMLElementType, import_prop_types38.default.func]),
    disableAutoFocus: import_prop_types38.default.bool,
    disableEnforceFocus: import_prop_types38.default.bool,
    disableEscapeKeyDown: import_prop_types38.default.bool,
    disablePortal: import_prop_types38.default.bool,
    disableRestoreFocus: import_prop_types38.default.bool,
    disableScrollLock: import_prop_types38.default.bool,
    hideBackdrop: import_prop_types38.default.bool,
    keepMounted: import_prop_types38.default.bool,
    onBackdropClick: import_prop_types38.default.func,
    onClose: import_prop_types38.default.func,
    open: import_prop_types38.default.bool.isRequired,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object])
  } : void 0;
  var Modal_default = Modal;

  // node_modules/@mui/material/Divider/dividerClasses.js
  var dividerClasses = generateUtilityClasses("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
  var dividerClasses_default = dividerClasses;

  // node_modules/@mui/material/FilledInput/FilledInput.js
  var React64 = __toModule(require_react());
  var import_prop_types39 = __toModule(require_prop_types());
  var import_jsx_runtime54 = __toModule(require_jsx_runtime());
  var _excluded37 = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "type"];
  var useUtilityClasses19 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var FilledInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles4), !ownerState.disableUnderline && styles4.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette;
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    return _extends({
      position: "relative",
      backgroundColor: backgroundColor2,
      borderTopLeftRadius: theme.shape.borderRadius,
      borderTopRightRadius: theme.shape.borderRadius,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)",
        "@media (hover: none)": {
          backgroundColor: backgroundColor2
        }
      },
      [`&.${filledInputClasses_default.focused}`]: {
        backgroundColor: backgroundColor2
      },
      [`&.${filledInputClasses_default.disabled}`]: {
        backgroundColor: light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)"
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${(_theme$palette = theme.palette[ownerState.color || "primary"]) == null ? void 0 : _theme$palette.main}`,
        left: 0,
        bottom: 0,
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
      },
      [`&.${filledInputClasses_default.focused}:after`]: {
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${filledInputClasses_default.error}:after`]: {
        borderBottomColor: theme.palette.error.main,
        transform: "scaleX(1)"
      },
      "&:before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
      },
      [`&:hover:not(.${filledInputClasses_default.disabled}):before`]: {
        borderBottom: `1px solid ${theme.palette.text.primary}`
      },
      [`&.${filledInputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }));
  });
  var FilledInputInput = styled_default(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12,
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }));
  var FilledInput = /* @__PURE__ */ React64.forwardRef(function FilledInput2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
    const ownerState = _extends({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes = useUtilityClasses19(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = componentsPropsProp ? deepmerge(componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(InputBase_default, _extends({
      components: _extends({
        Root: FilledInputRoot,
        Input: FilledInputInput
      }, components),
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? FilledInput.propTypes = {
    autoComplete: import_prop_types39.default.string,
    autoFocus: import_prop_types39.default.bool,
    classes: import_prop_types39.default.object,
    color: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["primary", "secondary"]), import_prop_types39.default.string]),
    components: import_prop_types39.default.shape({
      Input: import_prop_types39.default.elementType,
      Root: import_prop_types39.default.elementType
    }),
    componentsProps: import_prop_types39.default.shape({
      input: import_prop_types39.default.object,
      root: import_prop_types39.default.object
    }),
    defaultValue: import_prop_types39.default.any,
    disabled: import_prop_types39.default.bool,
    disableUnderline: import_prop_types39.default.bool,
    endAdornment: import_prop_types39.default.node,
    error: import_prop_types39.default.bool,
    fullWidth: import_prop_types39.default.bool,
    hiddenLabel: import_prop_types39.default.bool,
    id: import_prop_types39.default.string,
    inputComponent: import_prop_types39.default.elementType,
    inputProps: import_prop_types39.default.object,
    inputRef: refType_default,
    margin: import_prop_types39.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.string]),
    minRows: import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.string]),
    multiline: import_prop_types39.default.bool,
    name: import_prop_types39.default.string,
    onChange: import_prop_types39.default.func,
    placeholder: import_prop_types39.default.string,
    readOnly: import_prop_types39.default.bool,
    required: import_prop_types39.default.bool,
    rows: import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.string]),
    startAdornment: import_prop_types39.default.node,
    sx: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object, import_prop_types39.default.bool])), import_prop_types39.default.func, import_prop_types39.default.object]),
    type: import_prop_types39.default.string,
    value: import_prop_types39.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = FilledInput;

  // node_modules/@mui/material/FormControl/FormControl.js
  var React65 = __toModule(require_react());
  var import_prop_types40 = __toModule(require_prop_types());

  // node_modules/@mui/material/FormControl/formControlClasses.js
  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  var formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);

  // node_modules/@mui/material/FormControl/FormControl.js
  var import_jsx_runtime55 = __toModule(require_jsx_runtime());
  var _excluded38 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  var useUtilityClasses20 = (ownerState) => {
    const {
      classes,
      margin: margin2,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin2 !== "none" && `margin${capitalize_default(margin2)}`, fullWidth && "fullWidth"]
    };
    return composeClasses(slots, getFormControlUtilityClasses, classes);
  };
  var FormControlRoot = styled_default("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles4) => {
      return _extends({}, styles4.root, styles4[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles4.fullWidth);
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  var FormControl = /* @__PURE__ */ React65.forwardRef(function FormControl2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin2 = "none",
      required = false,
      size = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin2,
      required,
      size,
      variant
    });
    const classes = useUtilityClasses20(ownerState);
    const [adornedStart, setAdornedStart] = React65.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React65.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React65.useState(() => {
      let initialFilled = false;
      if (children) {
        React65.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React65.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (true) {
      const registeredInput = React65.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const onFilled = React65.useCallback(() => {
      setFilled(true);
    }, []);
    const onEmpty = React65.useCallback(() => {
      setFilled(false);
    }, []);
    const childContext = {
      adornedStart,
      setAdornedStart,
      color: color2,
      disabled,
      error,
      filled,
      focused,
      fullWidth,
      hiddenLabel,
      size,
      onBlur: () => {
        setFocused(false);
      },
      onEmpty,
      onFilled,
      onFocus: () => {
        setFocused(true);
      },
      registerEffect,
      required,
      variant
    };
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(FormControlContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(FormControlRoot, _extends({
        as: component,
        ownerState,
        className: clsx_m_default(classes.root, className),
        ref
      }, other, {
        children
      }))
    });
  });
  true ? FormControl.propTypes = {
    children: import_prop_types40.default.node,
    classes: import_prop_types40.default.object,
    className: import_prop_types40.default.string,
    color: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types40.default.string]),
    component: import_prop_types40.default.elementType,
    disabled: import_prop_types40.default.bool,
    error: import_prop_types40.default.bool,
    focused: import_prop_types40.default.bool,
    fullWidth: import_prop_types40.default.bool,
    hiddenLabel: import_prop_types40.default.bool,
    margin: import_prop_types40.default.oneOf(["dense", "none", "normal"]),
    required: import_prop_types40.default.bool,
    size: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["medium", "small"]), import_prop_types40.default.string]),
    sx: import_prop_types40.default.oneOfType([import_prop_types40.default.arrayOf(import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object, import_prop_types40.default.bool])), import_prop_types40.default.func, import_prop_types40.default.object]),
    variant: import_prop_types40.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = FormControl;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  var React66 = __toModule(require_react());
  var import_prop_types41 = __toModule(require_prop_types());

  // node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js
  function getFormControlLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControlLabel", slot);
  }
  var formControlLabelClasses = generateUtilityClasses("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error"]);
  var formControlLabelClasses_default = formControlLabelClasses;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  var import_jsx_runtime56 = __toModule(require_jsx_runtime());
  var import_jsx_runtime57 = __toModule(require_jsx_runtime());
  var _excluded39 = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "value"];
  var useUtilityClasses21 = (ownerState) => {
    const {
      classes,
      disabled,
      labelPlacement,
      error
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", `labelPlacement${capitalize_default(labelPlacement)}`, error && "error"],
      label: ["label", disabled && "disabled"]
    };
    return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
  };
  var FormControlLabelRoot = styled_default("label", {
    name: "MuiFormControlLabel",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formControlLabelClasses_default.label}`]: styles4.label
      }, styles4.root, styles4[`labelPlacement${capitalize_default(ownerState.labelPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
    verticalAlign: "middle",
    WebkitTapHighlightColor: "transparent",
    marginLeft: -11,
    marginRight: 16,
    [`&.${formControlLabelClasses_default.disabled}`]: {
      cursor: "default"
    }
  }, ownerState.labelPlacement === "start" && {
    flexDirection: "row-reverse",
    marginLeft: 16,
    marginRight: -11
  }, ownerState.labelPlacement === "top" && {
    flexDirection: "column-reverse",
    marginLeft: 16
  }, ownerState.labelPlacement === "bottom" && {
    flexDirection: "column",
    marginLeft: 16
  }, {
    [`& .${formControlLabelClasses_default.label}`]: {
      [`&.${formControlLabelClasses_default.disabled}`]: {
        color: theme.palette.text.disabled
      }
    }
  }));
  var FormControlLabel = /* @__PURE__ */ React66.forwardRef(function FormControlLabel2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormControlLabel"
    });
    const {
      className,
      componentsProps = {},
      control,
      disabled: disabledProp,
      disableTypography,
      label: labelProp,
      labelPlacement = "end"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
    const muiFormControl = useFormControl();
    let disabled = disabledProp;
    if (typeof disabled === "undefined" && typeof control.props.disabled !== "undefined") {
      disabled = control.props.disabled;
    }
    if (typeof disabled === "undefined" && muiFormControl) {
      disabled = muiFormControl.disabled;
    }
    const controlProps = {
      disabled
    };
    ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
      if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
        controlProps[key] = props[key];
      }
    });
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = _extends({}, props, {
      disabled,
      labelPlacement,
      error: fcs.error
    });
    const classes = useUtilityClasses21(ownerState);
    let label = labelProp;
    if (label != null && label.type !== Typography_default && !disableTypography) {
      label = /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Typography_default, _extends({
        component: "span",
        className: classes.label
      }, componentsProps.typography, {
        children: label
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(FormControlLabelRoot, _extends({
      className: clsx_m_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ React66.cloneElement(control, controlProps), label]
    }));
  });
  true ? FormControlLabel.propTypes = {
    checked: import_prop_types41.default.bool,
    classes: import_prop_types41.default.object,
    className: import_prop_types41.default.string,
    componentsProps: import_prop_types41.default.shape({
      typography: import_prop_types41.default.object
    }),
    control: import_prop_types41.default.element.isRequired,
    disabled: import_prop_types41.default.bool,
    disableTypography: import_prop_types41.default.bool,
    inputRef: refType_default,
    label: import_prop_types41.default.node,
    labelPlacement: import_prop_types41.default.oneOf(["bottom", "end", "start", "top"]),
    name: import_prop_types41.default.string,
    onChange: import_prop_types41.default.func,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    value: import_prop_types41.default.any
  } : void 0;
  var FormControlLabel_default = FormControlLabel;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  var React67 = __toModule(require_react());
  var import_prop_types42 = __toModule(require_prop_types());

  // node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass("MuiFormHelperText", slot);
  }
  var formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  var formHelperTextClasses_default = formHelperTextClasses;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  var import_jsx_runtime58 = __toModule(require_jsx_runtime());
  var _span;
  var _excluded40 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  var useUtilityClasses22 = (ownerState) => {
    const {
      classes,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size && `size${capitalize_default(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
  };
  var FormHelperTextRoot = styled_default("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.size && styles4[`size${capitalize_default(ownerState.size)}`], ownerState.contained && styles4.contained, ownerState.filled && styles4.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: theme.palette.text.secondary
  }, theme.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses_default.disabled}`]: {
      color: theme.palette.text.disabled
    },
    [`&.${formHelperTextClasses_default.error}`]: {
      color: theme.palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  var FormHelperText = /* @__PURE__ */ React67.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses22(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(FormHelperTextRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other, {
      children: children === " " ? _span || (_span = /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("span", {
        className: "notranslate",
        children: "\u200B"
      })) : children
    }));
  });
  true ? FormHelperText.propTypes = {
    children: import_prop_types42.default.node,
    classes: import_prop_types42.default.object,
    className: import_prop_types42.default.string,
    component: import_prop_types42.default.elementType,
    disabled: import_prop_types42.default.bool,
    error: import_prop_types42.default.bool,
    filled: import_prop_types42.default.bool,
    focused: import_prop_types42.default.bool,
    margin: import_prop_types42.default.oneOf(["dense"]),
    required: import_prop_types42.default.bool,
    sx: import_prop_types42.default.oneOfType([import_prop_types42.default.arrayOf(import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object, import_prop_types42.default.bool])), import_prop_types42.default.func, import_prop_types42.default.object]),
    variant: import_prop_types42.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormHelperText_default = FormHelperText;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  var React68 = __toModule(require_react());
  var import_prop_types43 = __toModule(require_prop_types());

  // node_modules/@mui/material/FormLabel/formLabelClasses.js
  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormLabel", slot);
  }
  var formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  var formLabelClasses_default = formLabelClasses;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  var import_jsx_runtime59 = __toModule(require_jsx_runtime());
  var _excluded41 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  var useUtilityClasses23 = (ownerState) => {
    const {
      classes,
      color: color2,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormLabelUtilityClasses, classes);
  };
  var FormLabelRoot = styled_default("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles4) => {
      return _extends({}, styles4.root, ownerState.color === "secondary" && styles4.colorSecondary, ownerState.filled && styles4.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: theme.palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses_default.focused}`]: {
      color: theme.palette[ownerState.color].main
    },
    [`&.${formLabelClasses_default.disabled}`]: {
      color: theme.palette.text.disabled
    },
    [`&.${formLabelClasses_default.error}`]: {
      color: theme.palette.error.main
    }
  }));
  var AsteriskComponent = styled_default("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles4) => styles4.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: theme.palette.error.main
    }
  }));
  var FormLabel = /* @__PURE__ */ React68.forwardRef(function FormLabel2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses23(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(FormLabelRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(AsteriskComponent, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: ["\u2009", "*"]
      })]
    }));
  });
  true ? FormLabel.propTypes = {
    children: import_prop_types43.default.node,
    classes: import_prop_types43.default.object,
    className: import_prop_types43.default.string,
    color: import_prop_types43.default.oneOfType([import_prop_types43.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types43.default.string]),
    component: import_prop_types43.default.elementType,
    disabled: import_prop_types43.default.bool,
    error: import_prop_types43.default.bool,
    filled: import_prop_types43.default.bool,
    focused: import_prop_types43.default.bool,
    required: import_prop_types43.default.bool,
    sx: import_prop_types43.default.oneOfType([import_prop_types43.default.arrayOf(import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object, import_prop_types43.default.bool])), import_prop_types43.default.func, import_prop_types43.default.object])
  } : void 0;
  var FormLabel_default = FormLabel;

  // node_modules/@mui/material/Grid/Grid.js
  var React70 = __toModule(require_react());
  var import_prop_types44 = __toModule(require_prop_types());

  // node_modules/@mui/material/Grid/GridContext.js
  var React69 = __toModule(require_react());
  var GridContext = /* @__PURE__ */ React69.createContext();
  if (true) {
    GridContext.displayName = "GridContext";
  }
  var GridContext_default = GridContext;

  // node_modules/@mui/material/Grid/gridClasses.js
  function getGridUtilityClass(slot) {
    return generateUtilityClass("MuiGrid", slot);
  }
  var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
  var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
  var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var gridClasses = generateUtilityClasses("MuiGrid", [
    "root",
    "container",
    "item",
    "zeroMinWidth",
    ...SPACINGS.map((spacing2) => `spacing-xs-${spacing2}`),
    ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
    ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
    ...GRID_SIZES.map((size) => `grid-xs-${size}`),
    ...GRID_SIZES.map((size) => `grid-sm-${size}`),
    ...GRID_SIZES.map((size) => `grid-md-${size}`),
    ...GRID_SIZES.map((size) => `grid-lg-${size}`),
    ...GRID_SIZES.map((size) => `grid-xl-${size}`)
  ]);
  var gridClasses_default = gridClasses;

  // node_modules/@mui/material/Grid/Grid.js
  var import_jsx_runtime60 = __toModule(require_jsx_runtime());
  var _excluded42 = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "lg", "md", "rowSpacing", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"];
  function getOffset(val) {
    const parse2 = parseFloat(val);
    return `${parse2}${String(val).replace(String(parse2), "") || "px"}`;
  }
  function generateGrid({
    theme,
    ownerState
  }) {
    let size;
    return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
      let styles4 = {};
      if (ownerState[breakpoint]) {
        size = ownerState[breakpoint];
      }
      if (!size) {
        return globalStyles;
      }
      if (size === true) {
        styles4 = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
      } else if (size === "auto") {
        styles4 = {
          flexBasis: "auto",
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: "none",
          width: "auto"
        };
      } else {
        const columnsBreakpointValues = resolveBreakpointValues({
          values: ownerState.columns,
          breakpoints: theme.breakpoints.values
        });
        const columnValue = typeof columnsBreakpointValues === "object" ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
        if (columnValue === void 0 || columnValue === null) {
          return globalStyles;
        }
        const width2 = `${Math.round(size / columnValue * 1e8) / 1e6}%`;
        let more = {};
        if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
          const themeSpacing = theme.spacing(ownerState.columnSpacing);
          if (themeSpacing !== "0px") {
            const fullWidth = `calc(${width2} + ${getOffset(themeSpacing)})`;
            more = {
              flexBasis: fullWidth,
              maxWidth: fullWidth
            };
          }
        }
        styles4 = _extends({
          flexBasis: width2,
          flexGrow: 0,
          maxWidth: width2
        }, more);
      }
      if (theme.breakpoints.values[breakpoint] === 0) {
        Object.assign(globalStyles, styles4);
      } else {
        globalStyles[theme.breakpoints.up(breakpoint)] = styles4;
      }
      return globalStyles;
    }, {});
  }
  function generateDirection({
    theme,
    ownerState
  }) {
    const directionValues = resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    });
    return handleBreakpoints({
      theme
    }, directionValues, (propValue) => {
      const output = {
        flexDirection: propValue
      };
      if (propValue.indexOf("column") === 0) {
        output[`& > .${gridClasses_default.item}`] = {
          maxWidth: "none"
        };
      }
      return output;
    });
  }
  function generateRowGap({
    theme,
    ownerState
  }) {
    const {
      container,
      rowSpacing
    } = ownerState;
    let styles4 = {};
    if (container && rowSpacing !== 0) {
      const rowSpacingValues = resolveBreakpointValues({
        values: rowSpacing,
        breakpoints: theme.breakpoints.values
      });
      styles4 = handleBreakpoints({
        theme
      }, rowSpacingValues, (propValue) => {
        const themeSpacing = theme.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            marginTop: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingTop: getOffset(themeSpacing)
            }
          };
        }
        return {};
      });
    }
    return styles4;
  }
  function generateColumnGap({
    theme,
    ownerState
  }) {
    const {
      container,
      columnSpacing
    } = ownerState;
    let styles4 = {};
    if (container && columnSpacing !== 0) {
      const columnSpacingValues = resolveBreakpointValues({
        values: columnSpacing,
        breakpoints: theme.breakpoints.values
      });
      styles4 = handleBreakpoints({
        theme
      }, columnSpacingValues, (propValue) => {
        const themeSpacing = theme.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            width: `calc(100% + ${getOffset(themeSpacing)})`,
            marginLeft: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingLeft: getOffset(themeSpacing)
            }
          };
        }
        return {};
      });
    }
    return styles4;
  }
  function resolveSpacingClasses(spacing2, container, styles4 = {}) {
    if (!container || !spacing2 || spacing2 <= 0) {
      return [];
    }
    if (typeof spacing2 === "string" && !Number.isNaN(Number(spacing2)) || typeof spacing2 === "number") {
      return [styles4[`spacing-xs-${String(spacing2)}`] || `spacing-xs-${String(spacing2)}`];
    }
    const {
      xs,
      sm,
      md,
      lg,
      xl
    } = spacing2;
    return [Number(xs) > 0 && (styles4[`spacing-xs-${String(xs)}`] || `spacing-xs-${String(xs)}`), Number(sm) > 0 && (styles4[`spacing-sm-${String(sm)}`] || `spacing-sm-${String(sm)}`), Number(md) > 0 && (styles4[`spacing-md-${String(md)}`] || `spacing-md-${String(md)}`), Number(lg) > 0 && (styles4[`spacing-lg-${String(lg)}`] || `spacing-lg-${String(lg)}`), Number(xl) > 0 && (styles4[`spacing-xl-${String(xl)}`] || `spacing-xl-${String(xl)}`)];
  }
  var GridRoot = styled_default("div", {
    name: "MuiGrid",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        container,
        direction,
        item,
        lg,
        md,
        sm,
        spacing: spacing2,
        wrap,
        xl,
        xs,
        zeroMinWidth
      } = props.ownerState;
      return [styles4.root, container && styles4.container, item && styles4.item, zeroMinWidth && styles4.zeroMinWidth, ...resolveSpacingClasses(spacing2, container, styles4), direction !== "row" && styles4[`direction-xs-${String(direction)}`], wrap !== "wrap" && styles4[`wrap-xs-${String(wrap)}`], xs !== false && styles4[`grid-xs-${String(xs)}`], sm !== false && styles4[`grid-sm-${String(sm)}`], md !== false && styles4[`grid-md-${String(md)}`], lg !== false && styles4[`grid-lg-${String(lg)}`], xl !== false && styles4[`grid-xl-${String(xl)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    boxSizing: "border-box"
  }, ownerState.container && {
    display: "flex",
    flexWrap: "wrap",
    width: "100%"
  }, ownerState.item && {
    margin: 0
  }, ownerState.zeroMinWidth && {
    minWidth: 0
  }, ownerState.wrap !== "wrap" && {
    flexWrap: ownerState.wrap
  }), generateDirection, generateRowGap, generateColumnGap, generateGrid);
  var useUtilityClasses24 = (ownerState) => {
    const {
      classes,
      container,
      direction,
      item,
      lg,
      md,
      sm,
      spacing: spacing2,
      wrap,
      xl,
      xs,
      zeroMinWidth
    } = ownerState;
    const slots = {
      root: ["root", container && "container", item && "item", zeroMinWidth && "zeroMinWidth", ...resolveSpacingClasses(spacing2, container), direction !== "row" && `direction-xs-${String(direction)}`, wrap !== "wrap" && `wrap-xs-${String(wrap)}`, xs !== false && `grid-xs-${String(xs)}`, sm !== false && `grid-sm-${String(sm)}`, md !== false && `grid-md-${String(md)}`, lg !== false && `grid-lg-${String(lg)}`, xl !== false && `grid-xl-${String(xl)}`]
    };
    return composeClasses(slots, getGridUtilityClass, classes);
  };
  var Grid = /* @__PURE__ */ React70.forwardRef(function Grid2(inProps, ref) {
    const themeProps = useThemeProps2({
      props: inProps,
      name: "MuiGrid"
    });
    const props = extendSxProp(themeProps);
    const {
      className,
      columns: columnsProp,
      columnSpacing: columnSpacingProp,
      component = "div",
      container = false,
      direction = "row",
      item = false,
      lg = false,
      md = false,
      rowSpacing: rowSpacingProp,
      sm = false,
      spacing: spacing2 = 0,
      wrap = "wrap",
      xl = false,
      xs = false,
      zeroMinWidth = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
    const rowSpacing = rowSpacingProp || spacing2;
    const columnSpacing = columnSpacingProp || spacing2;
    const columnsContext = React70.useContext(GridContext_default);
    const columns = container ? columnsProp || 12 : columnsContext;
    const ownerState = _extends({}, props, {
      columns,
      container,
      direction,
      item,
      lg,
      md,
      sm,
      rowSpacing,
      columnSpacing,
      wrap,
      xl,
      xs,
      zeroMinWidth
    });
    const classes = useUtilityClasses24(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(GridContext_default.Provider, {
      value: columns,
      children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(GridRoot, _extends({
        ownerState,
        className: clsx_m_default(classes.root, className),
        as: component,
        ref
      }, other))
    });
  });
  true ? Grid.propTypes = {
    children: import_prop_types44.default.node,
    classes: import_prop_types44.default.object,
    className: import_prop_types44.default.string,
    columns: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.number), import_prop_types44.default.number, import_prop_types44.default.object]),
    columnSpacing: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.number, import_prop_types44.default.string])), import_prop_types44.default.number, import_prop_types44.default.object, import_prop_types44.default.string]),
    component: import_prop_types44.default.elementType,
    container: import_prop_types44.default.bool,
    direction: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types44.default.arrayOf(import_prop_types44.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types44.default.object]),
    item: import_prop_types44.default.bool,
    lg: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["auto"]), import_prop_types44.default.number, import_prop_types44.default.bool]),
    md: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["auto"]), import_prop_types44.default.number, import_prop_types44.default.bool]),
    rowSpacing: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.number, import_prop_types44.default.string])), import_prop_types44.default.number, import_prop_types44.default.object, import_prop_types44.default.string]),
    sm: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["auto"]), import_prop_types44.default.number, import_prop_types44.default.bool]),
    spacing: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.number, import_prop_types44.default.string])), import_prop_types44.default.number, import_prop_types44.default.object, import_prop_types44.default.string]),
    sx: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object, import_prop_types44.default.bool])), import_prop_types44.default.func, import_prop_types44.default.object]),
    wrap: import_prop_types44.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
    xl: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["auto"]), import_prop_types44.default.number, import_prop_types44.default.bool]),
    xs: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["auto"]), import_prop_types44.default.number, import_prop_types44.default.bool]),
    zeroMinWidth: import_prop_types44.default.bool
  } : void 0;
  if (true) {
    const requireProp = requirePropFactory_default("Grid", Grid);
    Grid["propTypes"] = _extends({}, Grid.propTypes, {
      direction: requireProp("container"),
      lg: requireProp("item"),
      md: requireProp("item"),
      sm: requireProp("item"),
      spacing: requireProp("container"),
      wrap: requireProp("container"),
      xs: requireProp("item"),
      zeroMinWidth: requireProp("item")
    });
  }
  var Grid_default = Grid;

  // node_modules/@mui/material/Grow/Grow.js
  var React71 = __toModule(require_react());
  var import_prop_types45 = __toModule(require_prop_types());
  var import_jsx_runtime61 = __toModule(require_jsx_runtime());
  var _excluded43 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
  }
  var styles3 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)[4-9]/i.test(navigator.userAgent);
  var Grow = /* @__PURE__ */ React71.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style3,
      timeout: timeout2 = "auto",
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
    const timer = React71.useRef();
    const autoTimeout = React71.useRef();
    const theme = useTheme5();
    const nodeRef = React71.useRef(null);
    const foreignRef = useForkRef_default(children.ref, ref);
    const handleRef = useForkRef_default(nodeRef, foreignRef);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = 0;
      node2.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.current = setTimeout(next2, autoTimeout.current || 0);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    React71.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2 === "auto" ? null : timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React71.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles3[state], style3, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Grow.propTypes = {
    addEndListener: import_prop_types45.default.func,
    appear: import_prop_types45.default.bool,
    children: elementAcceptingRef_default.isRequired,
    easing: import_prop_types45.default.oneOfType([import_prop_types45.default.shape({
      enter: import_prop_types45.default.string,
      exit: import_prop_types45.default.string
    }), import_prop_types45.default.string]),
    in: import_prop_types45.default.bool,
    onEnter: import_prop_types45.default.func,
    onEntered: import_prop_types45.default.func,
    onEntering: import_prop_types45.default.func,
    onExit: import_prop_types45.default.func,
    onExited: import_prop_types45.default.func,
    onExiting: import_prop_types45.default.func,
    style: import_prop_types45.default.object,
    timeout: import_prop_types45.default.oneOfType([import_prop_types45.default.oneOf(["auto"]), import_prop_types45.default.number, import_prop_types45.default.shape({
      appear: import_prop_types45.default.number,
      enter: import_prop_types45.default.number,
      exit: import_prop_types45.default.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  var Grow_default = Grow;

  // node_modules/@mui/material/Input/Input.js
  var React72 = __toModule(require_react());
  var import_prop_types46 = __toModule(require_prop_types());
  var import_jsx_runtime62 = __toModule(require_jsx_runtime());
  var _excluded44 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "type"];
  var useUtilityClasses25 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles4), !ownerState.disableUnderline && styles4.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    return _extends({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${theme.palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
      },
      [`&.${inputClasses_default.focused}:after`]: {
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${inputClasses_default.error}:after`]: {
        borderBottomColor: theme.palette.error.main,
        transform: "scaleX(1)"
      },
      "&:before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
      },
      [`&:hover:not(.${inputClasses_default.disabled}):before`]: {
        borderBottom: `2px solid ${theme.palette.text.primary}`,
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  var InputInput = styled_default(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  var Input = /* @__PURE__ */ React72.forwardRef(function Input2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
    const classes = useUtilityClasses25(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = componentsPropsProp ? deepmerge(componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(InputBase_default, _extends({
      components: _extends({
        Root: InputRoot,
        Input: InputInput
      }, components),
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? Input.propTypes = {
    autoComplete: import_prop_types46.default.string,
    autoFocus: import_prop_types46.default.bool,
    classes: import_prop_types46.default.object,
    color: import_prop_types46.default.oneOfType([import_prop_types46.default.oneOf(["primary", "secondary"]), import_prop_types46.default.string]),
    components: import_prop_types46.default.shape({
      Input: import_prop_types46.default.elementType,
      Root: import_prop_types46.default.elementType
    }),
    componentsProps: import_prop_types46.default.shape({
      input: import_prop_types46.default.object,
      root: import_prop_types46.default.object
    }),
    defaultValue: import_prop_types46.default.any,
    disabled: import_prop_types46.default.bool,
    disableUnderline: import_prop_types46.default.bool,
    endAdornment: import_prop_types46.default.node,
    error: import_prop_types46.default.bool,
    fullWidth: import_prop_types46.default.bool,
    id: import_prop_types46.default.string,
    inputComponent: import_prop_types46.default.elementType,
    inputProps: import_prop_types46.default.object,
    inputRef: refType_default,
    margin: import_prop_types46.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types46.default.oneOfType([import_prop_types46.default.number, import_prop_types46.default.string]),
    minRows: import_prop_types46.default.oneOfType([import_prop_types46.default.number, import_prop_types46.default.string]),
    multiline: import_prop_types46.default.bool,
    name: import_prop_types46.default.string,
    onChange: import_prop_types46.default.func,
    placeholder: import_prop_types46.default.string,
    readOnly: import_prop_types46.default.bool,
    required: import_prop_types46.default.bool,
    rows: import_prop_types46.default.oneOfType([import_prop_types46.default.number, import_prop_types46.default.string]),
    startAdornment: import_prop_types46.default.node,
    sx: import_prop_types46.default.oneOfType([import_prop_types46.default.arrayOf(import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object, import_prop_types46.default.bool])), import_prop_types46.default.func, import_prop_types46.default.object]),
    type: import_prop_types46.default.string,
    value: import_prop_types46.default.any
  } : void 0;
  Input.muiName = "Input";
  var Input_default = Input;

  // node_modules/@mui/material/InputLabel/InputLabel.js
  var React73 = __toModule(require_react());
  var import_prop_types47 = __toModule(require_prop_types());

  // node_modules/@mui/material/InputLabel/inputLabelClasses.js
  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiInputLabel", slot);
  }
  var inputLabelClasses = generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);

  // node_modules/@mui/material/InputLabel/InputLabel.js
  var import_jsx_runtime63 = __toModule(require_jsx_runtime());
  var _excluded45 = ["disableAnimation", "margin", "shrink", "variant"];
  var useUtilityClasses26 = (ownerState) => {
    const {
      classes,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size === "small" && "sizeSmall", variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputLabelRoot = styled_default(FormLabel_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses_default.asterisk}`]: styles4.asterisk
      }, styles4.root, ownerState.formControl && styles4.formControl, ownerState.size === "small" && styles4.sizeSmall, ownerState.shrink && styles4.shrink, !ownerState.disableAnimation && styles4.animated, styles4[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(["color", "transform", "max-width"], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends({
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends({
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    maxWidth: "calc(133% - 24px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  var InputLabel = /* @__PURE__ */ React73.forwardRef(function InputLabel2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required"]
    });
    const ownerState = _extends({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required
    });
    const classes = useUtilityClasses26(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(InputLabelRoot, _extends({
      "data-shrink": shrink,
      ownerState,
      ref
    }, other, {
      classes
    }));
  });
  true ? InputLabel.propTypes = {
    children: import_prop_types47.default.node,
    classes: import_prop_types47.default.object,
    color: import_prop_types47.default.oneOfType([import_prop_types47.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types47.default.string]),
    disableAnimation: import_prop_types47.default.bool,
    disabled: import_prop_types47.default.bool,
    error: import_prop_types47.default.bool,
    focused: import_prop_types47.default.bool,
    margin: import_prop_types47.default.oneOf(["dense"]),
    required: import_prop_types47.default.bool,
    shrink: import_prop_types47.default.bool,
    sx: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object, import_prop_types47.default.bool])), import_prop_types47.default.func, import_prop_types47.default.object]),
    variant: import_prop_types47.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = InputLabel;

  // node_modules/@mui/material/List/List.js
  var React75 = __toModule(require_react());
  var import_prop_types48 = __toModule(require_prop_types());

  // node_modules/@mui/material/List/ListContext.js
  var React74 = __toModule(require_react());
  var ListContext = /* @__PURE__ */ React74.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // node_modules/@mui/material/List/listClasses.js
  function getListUtilityClass(slot) {
    return generateUtilityClass("MuiList", slot);
  }
  var listClasses = generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);

  // node_modules/@mui/material/List/List.js
  var import_jsx_runtime64 = __toModule(require_jsx_runtime());
  var import_jsx_runtime65 = __toModule(require_jsx_runtime());
  var _excluded46 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  var useUtilityClasses27 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };
  var ListRoot = styled_default("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.disablePadding && styles4.padding, ownerState.dense && styles4.dense, ownerState.subheader && styles4.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  var List = /* @__PURE__ */ React75.forwardRef(function List2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
    const context = React75.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses27(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(ListContext_default.Provider, {
      value: context,
      children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(ListRoot, _extends({
        as: component,
        className: clsx_m_default(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  true ? List.propTypes = {
    children: import_prop_types48.default.node,
    classes: import_prop_types48.default.object,
    className: import_prop_types48.default.string,
    component: import_prop_types48.default.elementType,
    dense: import_prop_types48.default.bool,
    disablePadding: import_prop_types48.default.bool,
    subheader: import_prop_types48.default.node,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object])
  } : void 0;
  var List_default = List;

  // node_modules/@mui/material/ListItemIcon/listItemIconClasses.js
  var listItemIconClasses = generateUtilityClasses("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
  var listItemIconClasses_default = listItemIconClasses;

  // node_modules/@mui/material/ListItemText/listItemTextClasses.js
  var listItemTextClasses = generateUtilityClasses("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  var listItemTextClasses_default = listItemTextClasses;

  // node_modules/@mui/material/Menu/Menu.js
  var React78 = __toModule(require_react());
  var import_react_is3 = __toModule(require_react_is3());
  var import_prop_types51 = __toModule(require_prop_types());

  // node_modules/@mui/material/MenuList/MenuList.js
  var React76 = __toModule(require_react());
  var import_react_is2 = __toModule(require_react_is3());
  var import_prop_types49 = __toModule(require_prop_types());

  // node_modules/@mui/material/utils/getScrollbarSize.js
  var getScrollbarSize_default = getScrollbarSize;

  // node_modules/@mui/material/MenuList/MenuList.js
  var import_jsx_runtime66 = __toModule(require_jsx_runtime());
  var _excluded47 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  var MenuList = /* @__PURE__ */ React76.forwardRef(function MenuList2(props, ref) {
    const {
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
    const listRef = React76.useRef(null);
    const textCriteriaRef = React76.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React76.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, theme) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize_default(ownerDocument_default(containerElement))}px`;
          listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown2 = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument_default(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef_default(listRef, ref);
    let activeItemIndex = -1;
    React76.Children.forEach(children, (child, index) => {
      if (!/* @__PURE__ */ React76.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is2.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    const items = React76.Children.map(children, (child, index) => {
      if (index === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React76.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown2,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  true ? MenuList.propTypes = {
    autoFocus: import_prop_types49.default.bool,
    autoFocusItem: import_prop_types49.default.bool,
    children: import_prop_types49.default.node,
    className: import_prop_types49.default.string,
    disabledItemsFocusable: import_prop_types49.default.bool,
    disableListWrap: import_prop_types49.default.bool,
    onKeyDown: import_prop_types49.default.func,
    variant: import_prop_types49.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // node_modules/@mui/material/Popover/Popover.js
  var React77 = __toModule(require_react());
  var import_prop_types50 = __toModule(require_prop_types());

  // node_modules/@mui/material/Popover/popoverClasses.js
  function getPopoverUtilityClass(slot) {
    return generateUtilityClass("MuiPopover", slot);
  }
  var popoverClasses = generateUtilityClasses("MuiPopover", ["root", "paper"]);

  // node_modules/@mui/material/Popover/Popover.js
  var import_jsx_runtime67 = __toModule(require_jsx_runtime());
  var _excluded48 = ["onEntering"];
  var _excluded210 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
  function getOffsetTop(rect, vertical) {
    let offset2 = 0;
    if (typeof vertical === "number") {
      offset2 = vertical;
    } else if (vertical === "center") {
      offset2 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset2 = rect.height;
    }
    return offset2;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset2 = 0;
    if (typeof horizontal === "number") {
      offset2 = horizontal;
    } else if (horizontal === "center") {
      offset2 = rect.width / 2;
    } else if (horizontal === "right") {
      offset2 = rect.width;
    }
    return offset2;
  }
  function getTransformOriginValue(transformOrigin2) {
    return [transformOrigin2.horizontal, transformOrigin2.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
  }
  function resolveAnchorEl2(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useUtilityClasses28 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };
  var PopoverRoot = styled_default(Modal_default, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var PopoverPaper = styled_default(Paper_default, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    outline: 0
  });
  var Popover = /* @__PURE__ */ React77.forwardRef(function Popover2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps = {},
      transformOrigin: transformOrigin2 = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded48), other = _objectWithoutPropertiesLoose(props, _excluded210);
    const paperRef = React77.useRef();
    const handlePaperRef = useForkRef_default(paperRef, PaperProps.ref);
    const ownerState = _extends({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      PaperProps,
      transformOrigin: transformOrigin2,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes = useUtilityClasses28(ownerState);
    const getAnchorOffset = React77.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl2(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument_default(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        const box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React77.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin2.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin2.horizontal)
      };
    }, [transformOrigin2.horizontal, transformOrigin2.vertical]);
    const getPositioningStyle = React77.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top3 = anchorOffset.top - elemTransformOrigin.vertical;
      let left3 = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom3 = top3 + elemRect.height;
      const right3 = left3 + elemRect.width;
      const containerWindow = ownerWindow_default(resolveAnchorEl2(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (top3 < marginThreshold) {
        const diff = top3 - marginThreshold;
        top3 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (bottom3 > heightThreshold) {
        const diff = bottom3 - heightThreshold;
        top3 -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (left3 < marginThreshold) {
        const diff = left3 - marginThreshold;
        left3 -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right3 > widthThreshold) {
        const diff = right3 - widthThreshold;
        left3 -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top3)}px`,
        left: `${Math.round(left3)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const setPositioningStyles = React77.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
    }, [getPositioningStyle]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    React77.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React77.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React77.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow_default(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument_default(resolveAnchorEl2(anchorEl)).body : void 0);
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(PopoverRoot, _extends({
      BackdropProps: {
        invisible: true
      },
      className: clsx_m_default(classes.root, className),
      container,
      open,
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        onEntering: handleEntering,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(PopoverPaper, _extends({
          elevation
        }, PaperProps, {
          ref: handlePaperRef,
          className: clsx_m_default(classes.paper, PaperProps.className),
          children
        }))
      }))
    }));
  });
  true ? Popover.propTypes = {
    action: refType_default,
    anchorEl: chainPropTypes(import_prop_types50.default.oneOfType([HTMLElementType, import_prop_types50.default.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl2(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    anchorOrigin: import_prop_types50.default.shape({
      horizontal: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["center", "left", "right"]), import_prop_types50.default.number]).isRequired,
      vertical: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["bottom", "center", "top"]), import_prop_types50.default.number]).isRequired
    }),
    anchorPosition: import_prop_types50.default.shape({
      left: import_prop_types50.default.number.isRequired,
      top: import_prop_types50.default.number.isRequired
    }),
    anchorReference: import_prop_types50.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    children: import_prop_types50.default.node,
    classes: import_prop_types50.default.object,
    className: import_prop_types50.default.string,
    container: import_prop_types50.default.oneOfType([HTMLElementType, import_prop_types50.default.func]),
    elevation: integerPropType_default,
    marginThreshold: import_prop_types50.default.number,
    onClose: import_prop_types50.default.func,
    open: import_prop_types50.default.bool.isRequired,
    PaperProps: import_prop_types50.default.shape({
      component: elementTypeAcceptingRef_default
    }),
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    transformOrigin: import_prop_types50.default.shape({
      horizontal: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["center", "left", "right"]), import_prop_types50.default.number]).isRequired,
      vertical: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["bottom", "center", "top"]), import_prop_types50.default.number]).isRequired
    }),
    TransitionComponent: import_prop_types50.default.elementType,
    transitionDuration: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.number, import_prop_types50.default.shape({
      appear: import_prop_types50.default.number,
      enter: import_prop_types50.default.number,
      exit: import_prop_types50.default.number
    })]),
    TransitionProps: import_prop_types50.default.object
  } : void 0;
  var Popover_default = Popover;

  // node_modules/@mui/material/Menu/menuClasses.js
  function getMenuUtilityClass(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  var menuClasses = generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);

  // node_modules/@mui/material/Menu/Menu.js
  var import_jsx_runtime68 = __toModule(require_jsx_runtime());
  var _excluded49 = ["onEntering"];
  var _excluded211 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var useUtilityClasses29 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };
  var MenuRoot = styled_default(Popover_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var MenuPaper = styled_default(Paper_default, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })({
    maxHeight: "calc(100% - 96px)",
    WebkitOverflowScrolling: "touch"
  });
  var MenuMenuList = styled_default(MenuList_default, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles4) => styles4.list
  })({
    outline: 0
  });
  var Menu = /* @__PURE__ */ React78.forwardRef(function Menu2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu"
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded49), other = _objectWithoutPropertiesLoose(props, _excluded211);
    const theme = useTheme5();
    const isRtl = theme.direction === "rtl";
    const ownerState = _extends({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes = useUtilityClasses29(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React78.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React78.Children.map(children, (child, index) => {
      if (!/* @__PURE__ */ React78.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is3.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(MenuRoot, _extends({
      classes: PopoverClasses,
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _extends({
        component: MenuPaper
      }, PaperProps, {
        classes: _extends({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      className: classes.root,
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(MenuMenuList, _extends({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx_m_default(classes.list, MenuListProps.className),
        children
      }))
    }));
  });
  true ? Menu.propTypes = {
    anchorEl: import_prop_types51.default.oneOfType([HTMLElementType, import_prop_types51.default.func]),
    autoFocus: import_prop_types51.default.bool,
    children: import_prop_types51.default.node,
    classes: import_prop_types51.default.object,
    disableAutoFocusItem: import_prop_types51.default.bool,
    MenuListProps: import_prop_types51.default.object,
    onClose: import_prop_types51.default.func,
    open: import_prop_types51.default.bool.isRequired,
    PaperProps: import_prop_types51.default.object,
    PopoverClasses: import_prop_types51.default.object,
    sx: import_prop_types51.default.oneOfType([import_prop_types51.default.arrayOf(import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object, import_prop_types51.default.bool])), import_prop_types51.default.func, import_prop_types51.default.object]),
    transitionDuration: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["auto"]), import_prop_types51.default.number, import_prop_types51.default.shape({
      appear: import_prop_types51.default.number,
      enter: import_prop_types51.default.number,
      exit: import_prop_types51.default.number
    })]),
    TransitionProps: import_prop_types51.default.object,
    variant: import_prop_types51.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = Menu;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  var React79 = __toModule(require_react());
  var import_prop_types52 = __toModule(require_prop_types());

  // node_modules/@mui/material/MenuItem/menuItemClasses.js
  function getMenuItemUtilityClass(slot) {
    return generateUtilityClass("MuiMenuItem", slot);
  }
  var menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
  var menuItemClasses_default = menuItemClasses;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  var import_jsx_runtime69 = __toModule(require_jsx_runtime());
  var _excluded50 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex"];
  var overridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.root, ownerState.dense && styles4.dense, ownerState.divider && styles4.divider, !ownerState.disableGutters && styles4.gutters];
  };
  var useUtilityClasses30 = (ownerState) => {
    const {
      disabled,
      dense,
      divider,
      disableGutters,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
    };
    const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var MenuItemRoot = styled_default(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenuItem",
    slot: "Root",
    overridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minHeight: 48,
    paddingTop: 6,
    paddingBottom: 6,
    boxSizing: "border-box",
    whiteSpace: "nowrap"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.divider && {
    borderBottom: `1px solid ${theme.palette.divider}`,
    backgroundClip: "padding-box"
  }, {
    "&:hover": {
      textDecoration: "none",
      backgroundColor: theme.palette.action.hover,
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${menuItemClasses_default.selected}`]: {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${menuItemClasses_default.focusVisible}`]: {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${menuItemClasses_default.selected}:hover`]: {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${menuItemClasses_default.focusVisible}`]: {
      backgroundColor: theme.palette.action.focus
    },
    [`&.${menuItemClasses_default.disabled}`]: {
      opacity: theme.palette.action.disabledOpacity
    },
    [`& + .${dividerClasses_default.root}`]: {
      marginTop: theme.spacing(1),
      marginBottom: theme.spacing(1)
    },
    [`& + .${dividerClasses_default.inset}`]: {
      marginLeft: 52
    },
    [`& .${listItemTextClasses_default.root}`]: {
      marginTop: 0,
      marginBottom: 0
    },
    [`& .${listItemTextClasses_default.inset}`]: {
      paddingLeft: 36
    },
    [`& .${listItemIconClasses_default.root}`]: {
      minWidth: 36
    }
  }, !ownerState.dense && {
    [theme.breakpoints.up("sm")]: {
      minHeight: "auto"
    }
  }, ownerState.dense && _extends({
    minHeight: 32,
    paddingTop: 4,
    paddingBottom: 4
  }, theme.typography.body2, {
    [`& .${listItemIconClasses_default.root} svg`]: {
      fontSize: "1.25rem"
    }
  })));
  var MenuItem = /* @__PURE__ */ React79.forwardRef(function MenuItem2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMenuItem"
    });
    const {
      autoFocus = false,
      component = "li",
      dense = false,
      divider = false,
      disableGutters = false,
      focusVisibleClassName,
      role = "menuitem",
      tabIndex: tabIndexProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
    const context = React79.useContext(ListContext_default);
    const childContext = {
      dense: dense || context.dense || false,
      disableGutters
    };
    const menuItemRef = React79.useRef(null);
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props, {
      dense: childContext.dense,
      divider,
      disableGutters
    });
    const classes = useUtilityClasses30(props);
    const handleRef = useForkRef_default(menuItemRef, ref);
    let tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(MenuItemRoot, _extends({
        ref: handleRef,
        role,
        tabIndex,
        component,
        focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName)
      }, other, {
        ownerState,
        classes
      }))
    });
  });
  true ? MenuItem.propTypes = {
    autoFocus: import_prop_types52.default.bool,
    children: import_prop_types52.default.node,
    classes: import_prop_types52.default.object,
    component: import_prop_types52.default.elementType,
    dense: import_prop_types52.default.bool,
    disabled: import_prop_types52.default.bool,
    disableGutters: import_prop_types52.default.bool,
    divider: import_prop_types52.default.bool,
    focusVisibleClassName: import_prop_types52.default.string,
    role: import_prop_types52.default.string,
    selected: import_prop_types52.default.bool,
    sx: import_prop_types52.default.oneOfType([import_prop_types52.default.arrayOf(import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object, import_prop_types52.default.bool])), import_prop_types52.default.func, import_prop_types52.default.object]),
    tabIndex: import_prop_types52.default.number
  } : void 0;
  var MenuItem_default = MenuItem;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var React80 = __toModule(require_react());
  var import_prop_types53 = __toModule(require_prop_types());

  // node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiNativeSelect", slot);
  }
  var nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput"]);
  var nativeSelectClasses_default = nativeSelectClasses;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var import_jsx_runtime70 = __toModule(require_jsx_runtime());
  var import_jsx_runtime71 = __toModule(require_jsx_runtime());
  var _excluded51 = ["className", "disabled", "IconComponent", "inputRef", "variant"];
  var useUtilityClasses31 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };
  var nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends({
    MozAppearance: "none",
    WebkitAppearance: "none",
    userSelect: "none",
    borderRadius: 0,
    cursor: "pointer",
    "&:focus": {
      backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)",
      borderRadius: 0
    },
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses_default.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: theme.palette.background.paper
    },
    "&&&": {
      paddingRight: 24,
      minWidth: 16
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: theme.shape.borderRadius,
    "&:focus": {
      borderRadius: theme.shape.borderRadius
    },
    "&&&": {
      paddingRight: 32
    }
  });
  var NativeSelectSelect = styled_default("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp,
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.select, styles4[ownerState.variant], {
        [`&.${nativeSelectClasses_default.multiple}`]: styles4.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  var nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends({
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    pointerEvents: "none",
    color: theme.palette.action.active,
    [`&.${nativeSelectClasses_default.disabled}`]: {
      color: theme.palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  var NativeSelectIcon = styled_default("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.icon, ownerState.variant && styles4[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles4.iconOpen];
    }
  })(nativeSelectIconStyles);
  var NativeSelectInput = /* @__PURE__ */ React80.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
    const ownerState = _extends({}, props, {
      disabled,
      variant
    });
    const classes = useUtilityClasses31(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(React80.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime70.jsx)(NativeSelectSelect, _extends({
        ownerState,
        className: clsx_m_default(classes.select, className),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  true ? NativeSelectInput.propTypes = {
    children: import_prop_types53.default.node,
    classes: import_prop_types53.default.object,
    className: import_prop_types53.default.string,
    disabled: import_prop_types53.default.bool,
    IconComponent: import_prop_types53.default.elementType.isRequired,
    inputRef: refType_default,
    multiple: import_prop_types53.default.bool,
    name: import_prop_types53.default.string,
    onChange: import_prop_types53.default.func,
    value: import_prop_types53.default.any,
    variant: import_prop_types53.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var React82 = __toModule(require_react());
  var import_prop_types55 = __toModule(require_prop_types());

  // node_modules/@mui/material/OutlinedInput/NotchedOutline.js
  var React81 = __toModule(require_react());
  var import_prop_types54 = __toModule(require_prop_types());
  var import_jsx_runtime72 = __toModule(require_jsx_runtime());
  var _span2;
  var _excluded52 = ["children", "classes", "className", "label", "notched"];
  var NotchedOutlineRoot = styled_default("fieldset")({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  var NotchedOutlineLegend = styled_default("legend")(({
    ownerState,
    theme
  }) => _extends({
    float: "unset",
    overflow: "hidden"
  }, !ownerState.withLabel && {
    padding: 0,
    lineHeight: "11px",
    transition: theme.transitions.create("width", {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.withLabel && _extends({
    display: "block",
    width: "auto",
    padding: 0,
    height: 11,
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme.transitions.create("max-width", {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block",
      opacity: 0,
      visibility: "visible"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme.transitions.create("max-width", {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
    const withLabel = label != null && label !== "";
    const ownerState = _extends({}, props, {
      notched,
      withLabel
    });
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(NotchedOutlineRoot, _extends({
      "aria-hidden": true,
      className,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("span", {
          children: label
        }) : _span2 || (_span2 = /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("span", {
          className: "notranslate",
          children: "\u200B"
        }))
      })
    }));
  }
  true ? NotchedOutline.propTypes = {
    children: import_prop_types54.default.node,
    classes: import_prop_types54.default.object,
    className: import_prop_types54.default.string,
    label: import_prop_types54.default.node,
    notched: import_prop_types54.default.bool.isRequired,
    style: import_prop_types54.default.object
  } : void 0;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var import_jsx_runtime73 = __toModule(require_jsx_runtime());
  var import_jsx_runtime74 = __toModule(require_jsx_runtime());
  var _excluded53 = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "type"];
  var useUtilityClasses32 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var OutlinedInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends({
      position: "relative",
      borderRadius: theme.shape.borderRadius,
      [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: theme.palette.text.primary
      },
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
          borderColor: borderColor2
        }
      },
      [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: theme.palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses_default.error} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: theme.palette.error.main
      },
      [`&.${outlinedInputClasses_default.disabled} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: theme.palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  var NotchedOutlineRoot2 = styled_default(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles4) => styles4.notchedOutline
  })(({
    theme
  }) => ({
    borderColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"
  }));
  var OutlinedInputInput = styled_default(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    padding: "16.5px 14px",
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  var OutlinedInput = /* @__PURE__ */ React82.forwardRef(function OutlinedInput2(inProps, ref) {
    var _React$Fragment;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded53);
    const classes = useUtilityClasses32(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["required"]
    });
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(InputBase_default, _extends({
      components: _extends({
        Root: OutlinedInputRoot,
        Input: OutlinedInputInput
      }, components),
      renderSuffix: (state) => /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(NotchedOutlineRoot2, {
        className: classes.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(React82.Fragment, {
          children: [label, "\xA0", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends({}, classes, {
        notchedOutline: null
      })
    }));
  });
  true ? OutlinedInput.propTypes = {
    autoComplete: import_prop_types55.default.string,
    autoFocus: import_prop_types55.default.bool,
    classes: import_prop_types55.default.object,
    color: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["primary", "secondary"]), import_prop_types55.default.string]),
    components: import_prop_types55.default.shape({
      Input: import_prop_types55.default.elementType,
      Root: import_prop_types55.default.elementType
    }),
    defaultValue: import_prop_types55.default.any,
    disabled: import_prop_types55.default.bool,
    endAdornment: import_prop_types55.default.node,
    error: import_prop_types55.default.bool,
    fullWidth: import_prop_types55.default.bool,
    id: import_prop_types55.default.string,
    inputComponent: import_prop_types55.default.elementType,
    inputProps: import_prop_types55.default.object,
    inputRef: refType_default,
    label: import_prop_types55.default.node,
    margin: import_prop_types55.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types55.default.oneOfType([import_prop_types55.default.number, import_prop_types55.default.string]),
    minRows: import_prop_types55.default.oneOfType([import_prop_types55.default.number, import_prop_types55.default.string]),
    multiline: import_prop_types55.default.bool,
    name: import_prop_types55.default.string,
    notched: import_prop_types55.default.bool,
    onChange: import_prop_types55.default.func,
    placeholder: import_prop_types55.default.string,
    readOnly: import_prop_types55.default.bool,
    required: import_prop_types55.default.bool,
    rows: import_prop_types55.default.oneOfType([import_prop_types55.default.number, import_prop_types55.default.string]),
    startAdornment: import_prop_types55.default.node,
    sx: import_prop_types55.default.oneOfType([import_prop_types55.default.arrayOf(import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object, import_prop_types55.default.bool])), import_prop_types55.default.func, import_prop_types55.default.object]),
    type: import_prop_types55.default.string,
    value: import_prop_types55.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = OutlinedInput;

  // node_modules/@mui/material/internal/svg-icons/FirstPage.js
  var React83 = __toModule(require_react());
  var import_jsx_runtime75 = __toModule(require_jsx_runtime());
  var FirstPage_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime75.jsx)("path", {
    d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
  }), "FirstPage");

  // node_modules/@mui/material/internal/svg-icons/LastPage.js
  var React84 = __toModule(require_react());
  var import_jsx_runtime76 = __toModule(require_jsx_runtime());
  var LastPage_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime76.jsx)("path", {
    d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
  }), "LastPage");

  // node_modules/@mui/material/Select/Select.js
  var React86 = __toModule(require_react());
  var import_prop_types57 = __toModule(require_prop_types());

  // node_modules/@mui/material/Select/SelectInput.js
  var React85 = __toModule(require_react());
  var import_react_is4 = __toModule(require_react_is3());
  var import_prop_types56 = __toModule(require_prop_types());

  // node_modules/@mui/material/Select/selectClasses.js
  function getSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  var selectClasses = generateUtilityClasses("MuiSelect", ["select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput"]);
  var selectClasses_default = selectClasses;

  // node_modules/@mui/material/Select/SelectInput.js
  var import_jsx_runtime77 = __toModule(require_jsx_runtime());
  var import_jsx_runtime78 = __toModule(require_jsx_runtime());
  var _span3;
  var _excluded54 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  var SelectSelect = styled_default("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [
        {
          [`&.${selectClasses_default.select}`]: styles4.select
        },
        {
          [`&.${selectClasses_default.select}`]: styles4[ownerState.variant]
        },
        {
          [`&.${selectClasses_default.multiple}`]: styles4.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    [`&.${selectClasses_default.select}`]: {
      height: "auto",
      minHeight: "1.4375em",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  var SelectIcon = styled_default("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.icon, ownerState.variant && styles4[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles4.iconOpen];
    }
  })(nativeSelectIconStyles);
  var SelectNativeInput = styled_default("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles4) => styles4.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty4(display) {
    return display == null || typeof display === "string" && !display.trim();
  }
  var useUtilityClasses33 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };
  var SelectInput = /* @__PURE__ */ React85.forwardRef(function SelectInput2(props, ref) {
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React85.useRef(null);
    const displayRef = React85.useRef(null);
    const [displayNode, setDisplayNode] = React85.useState(null);
    const {
      current: isOpenControlled
    } = React85.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React85.useState();
    const handleRef = useForkRef_default(ref, inputRefProp);
    const handleDisplayRef = React85.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    React85.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React85.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React85.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React85.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument_default(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React85.Children.toArray(children);
    const handleChange = (event) => {
      const index = childrenArray.map((child2) => child2.props.value).indexOf(event.target.value);
      if (index === -1) {
        return;
      }
      const child = childrenArray[index];
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child, index, arr) => {
      if (!/* @__PURE__ */ React85.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is4.isFragment)(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? `MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` : formatMuiErrorMessage(2));
        }
        selected = value.some((v) => areEqualValues(v, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      if (child.props.value === void 0) {
        return /* @__PURE__ */ React85.cloneElement(child, {
          "aria-readonly": true,
          role: "option"
        });
      }
      const isFirstSelectableElement = () => {
        if (value) {
          return selected;
        }
        const firstSelectableElement = arr.find((item) => item.props.value !== void 0 && item.props.disabled !== true);
        if (child === firstSelectableElement) {
          return true;
        }
        return selected;
      };
      return /* @__PURE__ */ React85.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected: arr[0].props.value === void 0 || arr[0].props.disabled === true ? isFirstSelectableElement() : selected,
        value: void 0,
        "data-value": child.props.value
      });
    });
    if (true) {
      React85.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values3 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values3.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display = null;
        } else {
          display = displayMultiple.reduce((output, child, index) => {
            output.push(child);
            if (index < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = displayNode.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = _extends({}, props, {
      variant,
      value,
      open
    });
    const classes = useUtilityClasses33(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(React85.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime77.jsx)(SelectSelect, _extends({
        ref: handleDisplayRef,
        tabIndex,
        role: "button",
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown2,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx_m_default(classes.select, className, SelectDisplayProps.className),
        id: buttonId,
        children: isEmpty4(display) ? _span3 || (_span3 = /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("span", {
          className: "notranslate",
          children: "\u200B"
        })) : display
      })), /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(SelectNativeInput, _extends({
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        ownerState
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Menu_default, _extends({
        id: `menu-${name || ""}`,
        anchorEl: displayNode,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends({
          "aria-labelledby": labelId,
          role: "listbox",
          disableListWrap: true
        }, MenuProps.MenuListProps),
        PaperProps: _extends({}, MenuProps.PaperProps, {
          style: _extends({
            minWidth: menuMinWidth
          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
        }),
        children: items
      }))]
    });
  });
  true ? SelectInput.propTypes = {
    "aria-describedby": import_prop_types56.default.string,
    "aria-label": import_prop_types56.default.string,
    autoFocus: import_prop_types56.default.bool,
    autoWidth: import_prop_types56.default.bool,
    children: import_prop_types56.default.node,
    classes: import_prop_types56.default.object,
    className: import_prop_types56.default.string,
    defaultOpen: import_prop_types56.default.bool,
    defaultValue: import_prop_types56.default.any,
    disabled: import_prop_types56.default.bool,
    displayEmpty: import_prop_types56.default.bool,
    IconComponent: import_prop_types56.default.elementType.isRequired,
    inputRef: refType_default,
    labelId: import_prop_types56.default.string,
    MenuProps: import_prop_types56.default.object,
    multiple: import_prop_types56.default.bool,
    name: import_prop_types56.default.string,
    onBlur: import_prop_types56.default.func,
    onChange: import_prop_types56.default.func,
    onClose: import_prop_types56.default.func,
    onFocus: import_prop_types56.default.func,
    onOpen: import_prop_types56.default.func,
    open: import_prop_types56.default.bool,
    readOnly: import_prop_types56.default.bool,
    renderValue: import_prop_types56.default.func,
    SelectDisplayProps: import_prop_types56.default.object,
    tabIndex: import_prop_types56.default.oneOfType([import_prop_types56.default.number, import_prop_types56.default.string]),
    type: import_prop_types56.default.any,
    value: import_prop_types56.default.any,
    variant: import_prop_types56.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // node_modules/@mui/material/Select/Select.js
  var import_jsx_runtime79 = __toModule(require_jsx_runtime());
  var _StyledInput;
  var _StyledFilledInput;
  var _excluded55 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
  var useUtilityClasses34 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  var styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles4) => styles4.root,
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) && prop !== "variant",
    slot: "Root"
  };
  var StyledInput = styled_default(Input_default, styledRootConfig)("");
  var StyledOutlinedInput = styled_default(OutlinedInput_default, styledRootConfig)("");
  var StyledFilledInput = styled_default(FilledInput_default, styledRootConfig)("");
  var Select = /* @__PURE__ */ React86.forwardRef(function Select2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDown_default,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded55);
    const inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    const variant = fcs.variant || variantProp;
    const InputComponent = input || {
      standard: _StyledInput || (_StyledInput = /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StyledInput, {})),
      outlined: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StyledOutlinedInput, {
        label
      }),
      filled: _StyledFilledInput || (_StyledFilledInput = /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StyledFilledInput, {}))
    }[variant];
    const ownerState = _extends({}, props, {
      variant,
      classes: classesProp
    });
    const classes = useUtilityClasses34(ownerState);
    const inputComponentRef = useForkRef_default(ref, InputComponent.ref);
    return /* @__PURE__ */ React86.cloneElement(InputComponent, _extends({
      inputComponent,
      inputProps: _extends({
        children,
        IconComponent,
        variant,
        type: void 0,
        multiple
      }, native ? {
        id
      } : {
        autoWidth,
        defaultOpen,
        displayEmpty,
        labelId,
        MenuProps,
        onClose,
        onOpen,
        open,
        renderValue,
        SelectDisplayProps: _extends({
          id
        }, SelectDisplayProps)
      }, inputProps, {
        classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
      }, input ? input.props.inputProps : {})
    }, multiple && native && variant === "outlined" ? {
      notched: true
    } : {}, {
      ref: inputComponentRef,
      className: clsx_m_default(InputComponent.props.className, className),
      variant
    }, other));
  });
  true ? Select.propTypes = {
    autoWidth: import_prop_types57.default.bool,
    children: import_prop_types57.default.node,
    classes: import_prop_types57.default.object,
    className: import_prop_types57.default.string,
    defaultOpen: import_prop_types57.default.bool,
    defaultValue: import_prop_types57.default.any,
    displayEmpty: import_prop_types57.default.bool,
    IconComponent: import_prop_types57.default.elementType,
    id: import_prop_types57.default.string,
    input: import_prop_types57.default.element,
    inputProps: import_prop_types57.default.object,
    label: import_prop_types57.default.node,
    labelId: import_prop_types57.default.string,
    MenuProps: import_prop_types57.default.object,
    multiple: import_prop_types57.default.bool,
    native: import_prop_types57.default.bool,
    onChange: import_prop_types57.default.func,
    onClose: import_prop_types57.default.func,
    onOpen: import_prop_types57.default.func,
    open: import_prop_types57.default.bool,
    renderValue: import_prop_types57.default.func,
    SelectDisplayProps: import_prop_types57.default.object,
    sx: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object, import_prop_types57.default.bool])), import_prop_types57.default.func, import_prop_types57.default.object]),
    value: import_prop_types57.default.any,
    variant: import_prop_types57.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  var Select_default = Select;

  // node_modules/@mui/material/Tooltip/Tooltip.js
  var React87 = __toModule(require_react());
  var import_prop_types58 = __toModule(require_prop_types());

  // node_modules/@mui/material/Tooltip/tooltipClasses.js
  function getTooltipUtilityClass(slot) {
    return generateUtilityClass("MuiTooltip", slot);
  }
  var tooltipClasses = generateUtilityClasses("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
  var tooltipClasses_default = tooltipClasses;

  // node_modules/@mui/material/Tooltip/Tooltip.js
  var import_jsx_runtime80 = __toModule(require_jsx_runtime());
  var import_jsx_runtime81 = __toModule(require_jsx_runtime());
  var _excluded56 = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "title", "TransitionComponent", "TransitionProps"];
  function round3(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var useUtilityClasses35 = (ownerState) => {
    const {
      classes,
      disableInteractive,
      arrow: arrow2,
      touch,
      placement
    } = ownerState;
    const slots = {
      popper: ["popper", !disableInteractive && "popperInteractive", arrow2 && "popperArrow"],
      tooltip: ["tooltip", arrow2 && "tooltipArrow", touch && "touch", `tooltipPlacement${capitalize_default(placement.split("-")[0])}`],
      arrow: ["arrow"]
    };
    return composeClasses(slots, getTooltipUtilityClass, classes);
  };
  var TooltipPopper = styled_default(Popper_default, {
    name: "MuiTooltip",
    slot: "Popper",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.popper, !ownerState.disableInteractive && styles4.popperInteractive, ownerState.arrow && styles4.popperArrow, !ownerState.open && styles4.popperClose];
    }
  })(({
    theme,
    ownerState,
    open
  }) => _extends({
    zIndex: theme.zIndex.tooltip,
    pointerEvents: "none"
  }, !ownerState.disableInteractive && {
    pointerEvents: "auto"
  }, !open && {
    pointerEvents: "none"
  }, ownerState.arrow && {
    [`&[data-popper-placement*="bottom"] .${tooltipClasses_default.arrow}`]: {
      top: 0,
      marginTop: "-0.71em",
      "&::before": {
        transformOrigin: "0 100%"
      }
    },
    [`&[data-popper-placement*="top"] .${tooltipClasses_default.arrow}`]: {
      bottom: 0,
      marginBottom: "-0.71em",
      "&::before": {
        transformOrigin: "100% 0"
      }
    },
    [`&[data-popper-placement*="right"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      left: 0,
      marginLeft: "-0.71em"
    } : {
      right: 0,
      marginRight: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "100% 100%"
      }
    }),
    [`&[data-popper-placement*="left"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      right: 0,
      marginRight: "-0.71em"
    } : {
      left: 0,
      marginLeft: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "0 0"
      }
    })
  }));
  var TooltipTooltip = styled_default("div", {
    name: "MuiTooltip",
    slot: "Tooltip",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.tooltip, ownerState.touch && styles4.touch, ownerState.arrow && styles4.tooltipArrow, styles4[`tooltipPlacement${capitalize_default(ownerState.placement.split("-")[0])}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    backgroundColor: alpha(theme.palette.grey[700], 0.92),
    borderRadius: theme.shape.borderRadius,
    color: theme.palette.common.white,
    fontFamily: theme.typography.fontFamily,
    padding: "4px 8px",
    fontSize: theme.typography.pxToRem(11),
    maxWidth: 300,
    margin: 2,
    wordWrap: "break-word",
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.arrow && {
    position: "relative",
    margin: 0
  }, ownerState.touch && {
    padding: "8px 16px",
    fontSize: theme.typography.pxToRem(14),
    lineHeight: `${round3(16 / 14)}em`,
    fontWeight: theme.typography.fontWeightRegular
  }, {
    [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: _extends({
      transformOrigin: "right center"
    }, !ownerState.isRtl ? _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    }) : _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: _extends({
      transformOrigin: "left center"
    }, !ownerState.isRtl ? _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    }) : _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="top"] &`]: _extends({
      transformOrigin: "center bottom",
      marginBottom: "14px"
    }, ownerState.touch && {
      marginBottom: "24px"
    }),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="bottom"] &`]: _extends({
      transformOrigin: "center top",
      marginTop: "14px"
    }, ownerState.touch && {
      marginTop: "24px"
    })
  }));
  var TooltipArrow = styled_default("span", {
    name: "MuiTooltip",
    slot: "Arrow",
    overridesResolver: (props, styles4) => styles4.arrow
  })(({
    theme
  }) => ({
    overflow: "hidden",
    position: "absolute",
    width: "1em",
    height: "0.71em",
    boxSizing: "border-box",
    color: alpha(theme.palette.grey[700], 0.9),
    "&::before": {
      content: '""',
      margin: "auto",
      display: "block",
      width: "100%",
      height: "100%",
      backgroundColor: "currentColor",
      transform: "rotate(45deg)"
    }
  }));
  var hystersisOpen = false;
  var hystersisTimer = null;
  function composeEventHandler(handler, eventHandler) {
    return (event) => {
      if (eventHandler) {
        eventHandler(event);
      }
      handler(event);
    };
  }
  var Tooltip = /* @__PURE__ */ React87.forwardRef(function Tooltip2(inProps, ref) {
    var _components$Popper, _ref, _components$Transitio, _components$Tooltip, _components$Arrow, _componentsProps$popp;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTooltip"
    });
    const {
      arrow: arrow2 = false,
      children,
      components = {},
      componentsProps = {},
      describeChild = false,
      disableFocusListener = false,
      disableHoverListener = false,
      disableInteractive: disableInteractiveProp = false,
      disableTouchListener = false,
      enterDelay = 100,
      enterNextDelay = 0,
      enterTouchDelay = 700,
      followCursor = false,
      id: idProp,
      leaveDelay = 0,
      leaveTouchDelay = 1500,
      onClose,
      onOpen,
      open: openProp,
      placement = "bottom",
      PopperComponent: PopperComponentProp,
      PopperProps = {},
      title,
      TransitionComponent: TransitionComponentProp = Grow_default,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded56);
    const theme = useTheme5();
    const isRtl = theme.direction === "rtl";
    const [childNode, setChildNode] = React87.useState();
    const [arrowRef, setArrowRef] = React87.useState(null);
    const ignoreNonTouchEvents = React87.useRef(false);
    const disableInteractive = disableInteractiveProp || followCursor;
    const closeTimer = React87.useRef();
    const enterTimer = React87.useRef();
    const leaveTimer = React87.useRef();
    const touchTimer = React87.useRef();
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: false,
      name: "Tooltip",
      state: "open"
    });
    let open = openState;
    if (true) {
      const {
        current: isControlled
      } = React87.useRef(openProp !== void 0);
      React87.useEffect(() => {
        if (childNode && childNode.disabled && !isControlled && title !== "" && childNode.tagName.toLowerCase() === "button") {
          console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join("\n"));
        }
      }, [title, childNode, isControlled]);
    }
    const id = useId_default(idProp);
    const prevUserSelect = React87.useRef();
    const stopTouchInteraction = React87.useCallback(() => {
      if (prevUserSelect.current !== void 0) {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        prevUserSelect.current = void 0;
      }
      clearTimeout(touchTimer.current);
    }, []);
    React87.useEffect(() => {
      return () => {
        clearTimeout(closeTimer.current);
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        stopTouchInteraction();
      };
    }, [stopTouchInteraction]);
    const handleOpen = (event) => {
      clearTimeout(hystersisTimer);
      hystersisOpen = true;
      setOpenState(true);
      if (onOpen && !open) {
        onOpen(event);
      }
    };
    const handleClose = useEventCallback_default((event) => {
      clearTimeout(hystersisTimer);
      hystersisTimer = setTimeout(() => {
        hystersisOpen = false;
      }, 800 + leaveDelay);
      setOpenState(false);
      if (onClose && open) {
        onClose(event);
      }
      clearTimeout(closeTimer.current);
      closeTimer.current = setTimeout(() => {
        ignoreNonTouchEvents.current = false;
      }, theme.transitions.duration.shortest);
    });
    const handleEnter = (event) => {
      if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
        return;
      }
      if (childNode) {
        childNode.removeAttribute("title");
      }
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      if (enterDelay || hystersisOpen && enterNextDelay) {
        enterTimer.current = setTimeout(() => {
          handleOpen(event);
        }, hystersisOpen ? enterNextDelay : enterDelay);
      } else {
        handleOpen(event);
      }
    };
    const handleLeave = (event) => {
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveDelay);
    };
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [, setChildIsFocusVisible] = React87.useState(false);
    const handleBlur = (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setChildIsFocusVisible(false);
        handleLeave(event);
      }
    };
    const handleFocus = (event) => {
      if (!childNode) {
        setChildNode(event.currentTarget);
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setChildIsFocusVisible(true);
        handleEnter(event);
      }
    };
    const detectTouchStart = (event) => {
      ignoreNonTouchEvents.current = true;
      const childrenProps2 = children.props;
      if (childrenProps2.onTouchStart) {
        childrenProps2.onTouchStart(event);
      }
    };
    const handleMouseOver = handleEnter;
    const handleMouseLeave = handleLeave;
    const handleTouchStart = (event) => {
      detectTouchStart(event);
      clearTimeout(leaveTimer.current);
      clearTimeout(closeTimer.current);
      stopTouchInteraction();
      prevUserSelect.current = document.body.style.WebkitUserSelect;
      document.body.style.WebkitUserSelect = "none";
      touchTimer.current = setTimeout(() => {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        handleEnter(event);
      }, enterTouchDelay);
    };
    const handleTouchEnd = (event) => {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }
      stopTouchInteraction();
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveTouchDelay);
    };
    React87.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown2(nativeEvent) {
        if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
          handleClose(nativeEvent);
        }
      }
      document.addEventListener("keydown", handleKeyDown2);
      return () => {
        document.removeEventListener("keydown", handleKeyDown2);
      };
    }, [handleClose, open]);
    const handleUseRef = useForkRef_default(setChildNode, ref);
    const handleFocusRef = useForkRef_default(focusVisibleRef, handleUseRef);
    const handleRef = useForkRef_default(children.ref, handleFocusRef);
    if (title === "") {
      open = false;
    }
    const positionRef = React87.useRef({
      x: 0,
      y: 0
    });
    const popperRef = React87.useRef();
    const handleMouseMove = (event) => {
      const childrenProps2 = children.props;
      if (childrenProps2.onMouseMove) {
        childrenProps2.onMouseMove(event);
      }
      positionRef.current = {
        x: event.clientX,
        y: event.clientY
      };
      if (popperRef.current) {
        popperRef.current.update();
      }
    };
    const nameOrDescProps = {};
    const titleIsString = typeof title === "string";
    if (describeChild) {
      nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
      nameOrDescProps["aria-describedby"] = open ? id : null;
    } else {
      nameOrDescProps["aria-label"] = titleIsString ? title : null;
      nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
    }
    const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
      className: clsx_m_default(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    }, followCursor ? {
      onMouseMove: handleMouseMove
    } : {});
    if (true) {
      childrenProps["data-mui-internal-clone-element"] = true;
      React87.useEffect(() => {
        if (childNode && !childNode.getAttribute("data-mui-internal-clone-element")) {
          console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join("\n"));
        }
      }, [childNode]);
    }
    const interactiveWrapperListeners = {};
    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
      childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
      childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
      if (!disableInteractive) {
        interactiveWrapperListeners.onMouseOver = handleMouseOver;
        interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
      }
    }
    if (!disableFocusListener) {
      childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
      childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
      if (!disableInteractive) {
        interactiveWrapperListeners.onFocus = handleFocus;
        interactiveWrapperListeners.onBlur = handleBlur;
      }
    }
    if (true) {
      if (children.props.title) {
        console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join("\n"));
      }
    }
    const popperOptions = React87.useMemo(() => {
      var _PopperProps$popperOp;
      let tooltipModifiers = [{
        name: "arrow",
        enabled: Boolean(arrowRef),
        options: {
          element: arrowRef,
          padding: 4
        }
      }];
      if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
        tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
      }
      return _extends({}, PopperProps.popperOptions, {
        modifiers: tooltipModifiers
      });
    }, [arrowRef, PopperProps]);
    const ownerState = _extends({}, props, {
      isRtl,
      arrow: arrow2,
      disableInteractive,
      placement,
      PopperComponentProp,
      touch: ignoreNonTouchEvents.current
    });
    const classes = useUtilityClasses35(ownerState);
    const PopperComponent = (_components$Popper = components.Popper) != null ? _components$Popper : TooltipPopper;
    const TransitionComponent = (_ref = (_components$Transitio = components.Transition) != null ? _components$Transitio : TransitionComponentProp) != null ? _ref : Grow_default;
    const TooltipComponent = (_components$Tooltip = components.Tooltip) != null ? _components$Tooltip : TooltipTooltip;
    const ArrowComponent = (_components$Arrow = components.Arrow) != null ? _components$Arrow : TooltipArrow;
    const popperProps = appendOwnerState(PopperComponent, _extends({}, PopperProps, componentsProps.popper), ownerState);
    const transitionProps = appendOwnerState(TransitionComponent, _extends({}, TransitionProps, componentsProps.transition), ownerState);
    const tooltipProps = appendOwnerState(TooltipComponent, _extends({}, componentsProps.tooltip), ownerState);
    const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends({}, componentsProps.arrow), ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(React87.Fragment, {
      children: [/* @__PURE__ */ React87.cloneElement(children, childrenProps), /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(PopperComponent, _extends({
        as: PopperComponentProp != null ? PopperComponentProp : Popper_default,
        placement,
        anchorEl: followCursor ? {
          getBoundingClientRect: () => ({
            top: positionRef.current.y,
            left: positionRef.current.x,
            right: positionRef.current.x,
            bottom: positionRef.current.y,
            width: 0,
            height: 0
          })
        } : childNode,
        popperRef,
        open: childNode ? open : false,
        id,
        transition: true
      }, interactiveWrapperListeners, popperProps, {
        className: clsx_m_default(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className),
        popperOptions,
        children: ({
          TransitionProps: TransitionPropsInner
        }) => {
          var _componentsProps$tool, _componentsProps$arro;
          return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(TransitionComponent, _extends({
            timeout: theme.transitions.duration.shorter
          }, TransitionPropsInner, transitionProps, {
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(TooltipComponent, _extends({}, tooltipProps, {
              className: clsx_m_default(classes.tooltip, (_componentsProps$tool = componentsProps.tooltip) == null ? void 0 : _componentsProps$tool.className),
              children: [title, arrow2 ? /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(ArrowComponent, _extends({}, tooltipArrowProps, {
                className: clsx_m_default(classes.arrow, (_componentsProps$arro = componentsProps.arrow) == null ? void 0 : _componentsProps$arro.className),
                ref: setArrowRef
              })) : null]
            }))
          }));
        }
      }))]
    });
  });
  true ? Tooltip.propTypes = {
    arrow: import_prop_types58.default.bool,
    children: elementAcceptingRef_default.isRequired,
    classes: import_prop_types58.default.object,
    className: import_prop_types58.default.string,
    components: import_prop_types58.default.shape({
      Arrow: import_prop_types58.default.elementType,
      Popper: import_prop_types58.default.elementType,
      Tooltip: import_prop_types58.default.elementType,
      Transition: import_prop_types58.default.elementType
    }),
    componentsProps: import_prop_types58.default.shape({
      arrow: import_prop_types58.default.object,
      popper: import_prop_types58.default.object,
      tooltip: import_prop_types58.default.object,
      transition: import_prop_types58.default.object
    }),
    describeChild: import_prop_types58.default.bool,
    disableFocusListener: import_prop_types58.default.bool,
    disableHoverListener: import_prop_types58.default.bool,
    disableInteractive: import_prop_types58.default.bool,
    disableTouchListener: import_prop_types58.default.bool,
    enterDelay: import_prop_types58.default.number,
    enterNextDelay: import_prop_types58.default.number,
    enterTouchDelay: import_prop_types58.default.number,
    followCursor: import_prop_types58.default.bool,
    id: import_prop_types58.default.string,
    leaveDelay: import_prop_types58.default.number,
    leaveTouchDelay: import_prop_types58.default.number,
    onClose: import_prop_types58.default.func,
    onOpen: import_prop_types58.default.func,
    open: import_prop_types58.default.bool,
    placement: import_prop_types58.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    PopperComponent: import_prop_types58.default.elementType,
    PopperProps: import_prop_types58.default.object,
    sx: import_prop_types58.default.oneOfType([import_prop_types58.default.arrayOf(import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object, import_prop_types58.default.bool])), import_prop_types58.default.func, import_prop_types58.default.object]),
    title: import_prop_types58.default.node.isRequired,
    TransitionComponent: import_prop_types58.default.elementType,
    TransitionProps: import_prop_types58.default.object
  } : void 0;
  var Tooltip_default = Tooltip;

  // node_modules/@mui/material/Switch/Switch.js
  var React88 = __toModule(require_react());
  var import_prop_types59 = __toModule(require_prop_types());

  // node_modules/@mui/material/Switch/switchClasses.js
  function getSwitchUtilityClass(slot) {
    return generateUtilityClass("MuiSwitch", slot);
  }
  var switchClasses = generateUtilityClasses("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
  var switchClasses_default = switchClasses;

  // node_modules/@mui/material/Switch/Switch.js
  var import_jsx_runtime82 = __toModule(require_jsx_runtime());
  var import_jsx_runtime83 = __toModule(require_jsx_runtime());
  var _excluded57 = ["className", "color", "edge", "size", "sx"];
  var useUtilityClasses36 = (ownerState) => {
    const {
      classes,
      edge,
      size,
      color: color2,
      checked,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`],
      switchBase: ["switchBase", `color${capitalize_default(color2)}`, checked && "checked", disabled && "disabled"],
      thumb: ["thumb"],
      track: ["track"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var SwitchRoot = styled_default("span", {
    name: "MuiSwitch",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.edge && styles4[`edge${capitalize_default(ownerState.edge)}`], styles4[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    width: 34 + 12 * 2,
    height: 14 + 12 * 2,
    overflow: "hidden",
    padding: 12,
    boxSizing: "border-box",
    position: "relative",
    flexShrink: 0,
    zIndex: 0,
    verticalAlign: "middle",
    "@media print": {
      colorAdjust: "exact"
    }
  }, ownerState.edge === "start" && {
    marginLeft: -8
  }, ownerState.edge === "end" && {
    marginRight: -8
  }, ownerState.size === "small" && {
    width: 40,
    height: 24,
    padding: 7,
    [`& .${switchClasses_default.thumb}`]: {
      width: 16,
      height: 16
    },
    [`& .${switchClasses_default.switchBase}`]: {
      padding: 4,
      [`&.${switchClasses_default.checked}`]: {
        transform: "translateX(16px)"
      }
    }
  }));
  var SwitchSwitchBase = styled_default(SwitchBase_default, {
    name: "MuiSwitch",
    slot: "SwitchBase",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.switchBase, {
        [`& .${switchClasses_default.input}`]: styles4.input
      }, ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme
  }) => ({
    position: "absolute",
    top: 0,
    left: 0,
    zIndex: 1,
    color: theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300],
    transition: theme.transitions.create(["left", "transform"], {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${switchClasses_default.checked}`]: {
      transform: "translateX(20px)"
    },
    [`&.${switchClasses_default.disabled}`]: {
      color: theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600]
    },
    [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
      opacity: 0.5
    },
    [`&.${switchClasses_default.disabled} + .${switchClasses_default.track}`]: {
      opacity: theme.palette.mode === "light" ? 0.12 : 0.2
    },
    [`& .${switchClasses_default.input}`]: {
      left: "-100%",
      width: "300%"
    }
  }), ({
    theme,
    ownerState
  }) => _extends({
    "&:hover": {
      backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${switchClasses_default.checked}`]: {
      color: theme.palette[ownerState.color].main,
      "&:hover": {
        backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${switchClasses_default.disabled}`]: {
        color: theme.palette.mode === "light" ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)
      }
    },
    [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
      backgroundColor: theme.palette[ownerState.color].main
    }
  }));
  var SwitchTrack = styled_default("span", {
    name: "MuiSwitch",
    slot: "Track",
    overridesResolver: (props, styles4) => styles4.track
  })(({
    theme
  }) => ({
    height: "100%",
    width: "100%",
    borderRadius: 14 / 2,
    zIndex: -1,
    transition: theme.transitions.create(["opacity", "background-color"], {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white,
    opacity: theme.palette.mode === "light" ? 0.38 : 0.3
  }));
  var SwitchThumb = styled_default("span", {
    name: "MuiSwitch",
    slot: "Thumb",
    overridesResolver: (props, styles4) => styles4.thumb
  })(({
    theme
  }) => ({
    boxShadow: theme.shadows[1],
    backgroundColor: "currentColor",
    width: 20,
    height: 20,
    borderRadius: "50%"
  }));
  var Switch = /* @__PURE__ */ React88.forwardRef(function Switch2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSwitch"
    });
    const {
      className,
      color: color2 = "primary",
      edge = false,
      size = "medium",
      sx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
    const ownerState = _extends({}, props, {
      color: color2,
      edge,
      size
    });
    const classes = useUtilityClasses36(ownerState);
    const icon = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(SwitchThumb, {
      className: classes.thumb,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(SwitchRoot, {
      className: clsx_m_default(classes.root, className),
      sx,
      ownerState,
      children: [/* @__PURE__ */ (0, import_jsx_runtime82.jsx)(SwitchSwitchBase, _extends({
        type: "checkbox",
        icon,
        checkedIcon: icon,
        ref,
        ownerState
      }, other, {
        classes: _extends({}, classes, {
          root: classes.switchBase
        })
      })), /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(SwitchTrack, {
        className: classes.track,
        ownerState
      })]
    });
  });
  true ? Switch.propTypes = {
    checked: import_prop_types59.default.bool,
    checkedIcon: import_prop_types59.default.node,
    classes: import_prop_types59.default.object,
    className: import_prop_types59.default.string,
    color: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types59.default.string]),
    defaultChecked: import_prop_types59.default.bool,
    disabled: import_prop_types59.default.bool,
    disableRipple: import_prop_types59.default.bool,
    edge: import_prop_types59.default.oneOf(["end", "start", false]),
    icon: import_prop_types59.default.node,
    id: import_prop_types59.default.string,
    inputProps: import_prop_types59.default.object,
    inputRef: refType_default,
    onChange: import_prop_types59.default.func,
    required: import_prop_types59.default.bool,
    size: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["medium", "small"]), import_prop_types59.default.string]),
    sx: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object, import_prop_types59.default.bool])), import_prop_types59.default.func, import_prop_types59.default.object]),
    value: import_prop_types59.default.any
  } : void 0;
  var Switch_default = Switch;

  // node_modules/@mui/material/Table/TableContext.js
  var React89 = __toModule(require_react());
  var TableContext = /* @__PURE__ */ React89.createContext();
  if (true) {
    TableContext.displayName = "TableContext";
  }
  var TableContext_default = TableContext;

  // node_modules/@mui/material/Table/Tablelvl2Context.js
  var React90 = __toModule(require_react());
  var Tablelvl2Context = /* @__PURE__ */ React90.createContext();
  if (true) {
    Tablelvl2Context.displayName = "Tablelvl2Context";
  }
  var Tablelvl2Context_default = Tablelvl2Context;

  // node_modules/@mui/material/TableCell/TableCell.js
  var React91 = __toModule(require_react());
  var import_prop_types60 = __toModule(require_prop_types());

  // node_modules/@mui/material/TableCell/tableCellClasses.js
  function getTableCellUtilityClass(slot) {
    return generateUtilityClass("MuiTableCell", slot);
  }
  var tableCellClasses = generateUtilityClasses("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]);
  var tableCellClasses_default = tableCellClasses;

  // node_modules/@mui/material/TableCell/TableCell.js
  var import_jsx_runtime84 = __toModule(require_jsx_runtime());
  var _excluded58 = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];
  var useUtilityClasses37 = (ownerState) => {
    const {
      classes,
      variant,
      align,
      padding: padding2,
      size,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ["root", variant, stickyHeader && "stickyHeader", align !== "inherit" && `align${capitalize_default(align)}`, padding2 !== "normal" && `padding${capitalize_default(padding2)}`, `size${capitalize_default(size)}`]
    };
    return composeClasses(slots, getTableCellUtilityClass, classes);
  };
  var TableCellRoot = styled_default("td", {
    name: "MuiTableCell",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], styles4[`size${capitalize_default(ownerState.size)}`], ownerState.padding !== "normal" && styles4[`padding${capitalize_default(ownerState.padding)}`], ownerState.align !== "inherit" && styles4[`align${capitalize_default(ownerState.align)}`], ownerState.stickyHeader && styles4.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    display: "table-cell",
    verticalAlign: "inherit",
    borderBottom: `1px solid
    ${theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)}`,
    textAlign: "left",
    padding: 16
  }, ownerState.variant === "head" && {
    color: theme.palette.text.primary,
    lineHeight: theme.typography.pxToRem(24),
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.variant === "body" && {
    color: theme.palette.text.primary
  }, ownerState.variant === "footer" && {
    color: theme.palette.text.secondary,
    lineHeight: theme.typography.pxToRem(21),
    fontSize: theme.typography.pxToRem(12)
  }, ownerState.size === "small" && {
    padding: "6px 16px",
    [`&.${tableCellClasses_default.paddingCheckbox}`]: {
      width: 24,
      padding: "0 12px 0 16px",
      "& > *": {
        padding: 0
      }
    }
  }, ownerState.padding === "checkbox" && {
    width: 48,
    padding: "0 0 0 4px"
  }, ownerState.padding === "none" && {
    padding: 0
  }, ownerState.align === "left" && {
    textAlign: "left"
  }, ownerState.align === "center" && {
    textAlign: "center"
  }, ownerState.align === "right" && {
    textAlign: "right",
    flexDirection: "row-reverse"
  }, ownerState.align === "justify" && {
    textAlign: "justify"
  }, ownerState.stickyHeader && {
    position: "sticky",
    top: 0,
    zIndex: 2,
    backgroundColor: theme.palette.background.default
  }));
  var TableCell = /* @__PURE__ */ React91.forwardRef(function TableCell2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTableCell"
    });
    const {
      align = "inherit",
      className,
      component: componentProp,
      padding: paddingProp,
      scope: scopeProp,
      size: sizeProp,
      sortDirection,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
    const table = React91.useContext(TableContext_default);
    const tablelvl2 = React91.useContext(Tablelvl2Context_default);
    const isHeadCell = tablelvl2 && tablelvl2.variant === "head";
    let component;
    if (componentProp) {
      component = componentProp;
    } else {
      component = isHeadCell ? "th" : "td";
    }
    let scope = scopeProp;
    if (!scope && isHeadCell) {
      scope = "col";
    }
    const variant = variantProp || tablelvl2 && tablelvl2.variant;
    const ownerState = _extends({}, props, {
      align,
      component,
      padding: paddingProp || (table && table.padding ? table.padding : "normal"),
      size: sizeProp || (table && table.size ? table.size : "medium"),
      sortDirection,
      stickyHeader: variant === "head" && table && table.stickyHeader,
      variant
    });
    const classes = useUtilityClasses37(ownerState);
    let ariaSort = null;
    if (sortDirection) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TableCellRoot, _extends({
      as: component,
      ref,
      className: clsx_m_default(classes.root, className),
      "aria-sort": ariaSort,
      scope,
      ownerState
    }, other));
  });
  true ? TableCell.propTypes = {
    align: import_prop_types60.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    children: import_prop_types60.default.node,
    classes: import_prop_types60.default.object,
    className: import_prop_types60.default.string,
    component: import_prop_types60.default.elementType,
    padding: import_prop_types60.default.oneOf(["checkbox", "none", "normal"]),
    scope: import_prop_types60.default.string,
    size: import_prop_types60.default.oneOf(["small", "medium"]),
    sortDirection: import_prop_types60.default.oneOf(["asc", "desc", false]),
    sx: import_prop_types60.default.oneOfType([import_prop_types60.default.arrayOf(import_prop_types60.default.oneOfType([import_prop_types60.default.func, import_prop_types60.default.object, import_prop_types60.default.bool])), import_prop_types60.default.func, import_prop_types60.default.object]),
    variant: import_prop_types60.default.oneOf(["body", "footer", "head"])
  } : void 0;
  var TableCell_default = TableCell;

  // node_modules/@mui/material/TablePagination/TablePagination.js
  var React96 = __toModule(require_react());
  var import_prop_types63 = __toModule(require_prop_types());

  // node_modules/@mui/material/Toolbar/Toolbar.js
  var React92 = __toModule(require_react());
  var import_prop_types61 = __toModule(require_prop_types());

  // node_modules/@mui/material/Toolbar/toolbarClasses.js
  function getToolbarUtilityClass(slot) {
    return generateUtilityClass("MuiToolbar", slot);
  }
  var toolbarClasses = generateUtilityClasses("MuiToolbar", ["root", "gutters", "regular", "dense"]);

  // node_modules/@mui/material/Toolbar/Toolbar.js
  var import_jsx_runtime85 = __toModule(require_jsx_runtime());
  var _excluded59 = ["className", "component", "disableGutters", "variant"];
  var useUtilityClasses38 = (ownerState) => {
    const {
      classes,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ["root", !disableGutters && "gutters", variant]
    };
    return composeClasses(slots, getToolbarUtilityClass, classes);
  };
  var ToolbarRoot = styled_default("div", {
    name: "MuiToolbar",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.disableGutters && styles4.gutters, styles4[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "relative",
    display: "flex",
    alignItems: "center"
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    [theme.breakpoints.up("sm")]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }, ownerState.variant === "dense" && {
    minHeight: 48
  }), ({
    theme,
    ownerState
  }) => ownerState.variant === "regular" && theme.mixins.toolbar);
  var Toolbar = /* @__PURE__ */ React92.forwardRef(function Toolbar2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiToolbar"
    });
    const {
      className,
      component = "div",
      disableGutters = false,
      variant = "regular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded59);
    const ownerState = _extends({}, props, {
      component,
      disableGutters,
      variant
    });
    const classes = useUtilityClasses38(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(ToolbarRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? Toolbar.propTypes = {
    children: import_prop_types61.default.node,
    classes: import_prop_types61.default.object,
    className: import_prop_types61.default.string,
    component: import_prop_types61.default.elementType,
    disableGutters: import_prop_types61.default.bool,
    sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object]),
    variant: import_prop_types61.default.oneOfType([import_prop_types61.default.oneOf(["dense", "regular"]), import_prop_types61.default.string])
  } : void 0;
  var Toolbar_default = Toolbar;

  // node_modules/@mui/material/TablePagination/TablePaginationActions.js
  var React95 = __toModule(require_react());
  var import_prop_types62 = __toModule(require_prop_types());

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js
  var React93 = __toModule(require_react());
  var import_jsx_runtime86 = __toModule(require_jsx_runtime());
  var KeyboardArrowLeft_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime86.jsx)("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), "KeyboardArrowLeft");

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js
  var React94 = __toModule(require_react());
  var import_jsx_runtime87 = __toModule(require_jsx_runtime());
  var KeyboardArrowRight_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime87.jsx)("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), "KeyboardArrowRight");

  // node_modules/@mui/material/TablePagination/TablePaginationActions.js
  var import_jsx_runtime88 = __toModule(require_jsx_runtime());
  var import_jsx_runtime89 = __toModule(require_jsx_runtime());
  var _LastPageIcon;
  var _FirstPageIcon;
  var _KeyboardArrowRight;
  var _KeyboardArrowLeft;
  var _KeyboardArrowLeft2;
  var _KeyboardArrowRight2;
  var _FirstPageIcon2;
  var _LastPageIcon2;
  var _excluded60 = ["backIconButtonProps", "count", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton"];
  var TablePaginationActions = /* @__PURE__ */ React95.forwardRef(function TablePaginationActions2(props, ref) {
    const {
      backIconButtonProps,
      count,
      getItemAriaLabel,
      nextIconButtonProps,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton,
      showLastButton
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded60);
    const theme = useTheme5();
    const handleFirstPageButtonClick = (event) => {
      onPageChange(event, 0);
    };
    const handleBackButtonClick = (event) => {
      onPageChange(event, page - 1);
    };
    const handleNextButtonClick = (event) => {
      onPageChange(event, page + 1);
    };
    const handleLastPageButtonClick = (event) => {
      onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
    };
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", _extends({
      ref
    }, other, {
      children: [showFirstButton && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(IconButton_default, {
        onClick: handleFirstPageButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("first", page),
        title: getItemAriaLabel("first", page),
        children: theme.direction === "rtl" ? _LastPageIcon || (_LastPageIcon = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(LastPage_default, {})) : _FirstPageIcon || (_FirstPageIcon = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(FirstPage_default, {}))
      }), /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(IconButton_default, _extends({
        onClick: handleBackButtonClick,
        disabled: page === 0,
        color: "inherit",
        "aria-label": getItemAriaLabel("previous", page),
        title: getItemAriaLabel("previous", page)
      }, backIconButtonProps, {
        children: theme.direction === "rtl" ? _KeyboardArrowRight || (_KeyboardArrowRight = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(KeyboardArrowRight_default, {})) : _KeyboardArrowLeft || (_KeyboardArrowLeft = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(KeyboardArrowLeft_default, {}))
      })), /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(IconButton_default, _extends({
        onClick: handleNextButtonClick,
        disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
        color: "inherit",
        "aria-label": getItemAriaLabel("next", page),
        title: getItemAriaLabel("next", page)
      }, nextIconButtonProps, {
        children: theme.direction === "rtl" ? _KeyboardArrowLeft2 || (_KeyboardArrowLeft2 = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(KeyboardArrowLeft_default, {})) : _KeyboardArrowRight2 || (_KeyboardArrowRight2 = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(KeyboardArrowRight_default, {}))
      })), showLastButton && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(IconButton_default, {
        onClick: handleLastPageButtonClick,
        disabled: page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel("last", page),
        title: getItemAriaLabel("last", page),
        children: theme.direction === "rtl" ? _FirstPageIcon2 || (_FirstPageIcon2 = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(FirstPage_default, {})) : _LastPageIcon2 || (_LastPageIcon2 = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(LastPage_default, {}))
      })]
    }));
  });
  true ? TablePaginationActions.propTypes = {
    backIconButtonProps: import_prop_types62.default.object,
    count: import_prop_types62.default.number.isRequired,
    getItemAriaLabel: import_prop_types62.default.func.isRequired,
    nextIconButtonProps: import_prop_types62.default.object,
    onPageChange: import_prop_types62.default.func.isRequired,
    page: import_prop_types62.default.number.isRequired,
    rowsPerPage: import_prop_types62.default.number.isRequired,
    showFirstButton: import_prop_types62.default.bool.isRequired,
    showLastButton: import_prop_types62.default.bool.isRequired
  } : void 0;
  var TablePaginationActions_default = TablePaginationActions;

  // node_modules/@mui/material/TablePagination/tablePaginationClasses.js
  function getTablePaginationUtilityClass(slot) {
    return generateUtilityClass("MuiTablePagination", slot);
  }
  var tablePaginationClasses = generateUtilityClasses("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
  var tablePaginationClasses_default = tablePaginationClasses;

  // node_modules/@mui/material/TablePagination/TablePagination.js
  var import_jsx_runtime90 = __toModule(require_jsx_runtime());
  var import_react12 = __toModule(require_react());
  var import_jsx_runtime91 = __toModule(require_jsx_runtime());
  var _InputBase;
  var _excluded61 = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton"];
  var TablePaginationRoot = styled_default(TableCell_default, {
    name: "MuiTablePagination",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })(({
    theme
  }) => ({
    overflow: "auto",
    color: theme.palette.text.primary,
    fontSize: theme.typography.pxToRem(14),
    "&:last-child": {
      padding: 0
    }
  }));
  var TablePaginationToolbar = styled_default(Toolbar_default, {
    name: "MuiTablePagination",
    slot: "Toolbar",
    overridesResolver: (props, styles4) => _extends({
      [`& .${tablePaginationClasses_default.actions}`]: styles4.actions
    }, styles4.toolbar)
  })(({
    theme
  }) => ({
    minHeight: 52,
    paddingRight: 2,
    [`${theme.breakpoints.up("xs")} and (orientation: landscape)`]: {
      minHeight: 52
    },
    [theme.breakpoints.up("sm")]: {
      minHeight: 52,
      paddingRight: 2
    },
    [`& .${tablePaginationClasses_default.actions}`]: {
      flexShrink: 0,
      marginLeft: 20
    }
  }));
  var TablePaginationSpacer = styled_default("div", {
    name: "MuiTablePagination",
    slot: "Spacer",
    overridesResolver: (props, styles4) => styles4.spacer
  })({
    flex: "1 1 100%"
  });
  var TablePaginationSelectLabel = styled_default("p", {
    name: "MuiTablePagination",
    slot: "SelectLabel",
    overridesResolver: (props, styles4) => styles4.selectLabel
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  var TablePaginationSelect = styled_default(Select_default, {
    name: "MuiTablePagination",
    slot: "Select",
    overridesResolver: (props, styles4) => _extends({
      [`& .${tablePaginationClasses_default.selectIcon}`]: styles4.selectIcon,
      [`& .${tablePaginationClasses_default.select}`]: styles4.select
    }, styles4.input, styles4.selectRoot)
  })({
    color: "inherit",
    fontSize: "inherit",
    flexShrink: 0,
    marginRight: 32,
    marginLeft: 8,
    [`& .${tablePaginationClasses_default.select}`]: {
      paddingLeft: 8,
      paddingRight: 24,
      textAlign: "right",
      textAlignLast: "right"
    }
  });
  var TablePaginationMenuItem = styled_default(MenuItem_default, {
    name: "MuiTablePagination",
    slot: "MenuItem",
    overridesResolver: (props, styles4) => styles4.menuItem
  })({});
  var TablePaginationDisplayedRows = styled_default("p", {
    name: "MuiTablePagination",
    slot: "DisplayedRows",
    overridesResolver: (props, styles4) => styles4.displayedRows
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  function defaultLabelDisplayedRows({
    from: from2,
    to,
    count
  }) {
    return `${from2}\u2013${to} of ${count !== -1 ? count : `more than ${to}`}`;
  }
  function defaultGetAriaLabel(type) {
    return `Go to ${type} page`;
  }
  var useUtilityClasses39 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      toolbar: ["toolbar"],
      spacer: ["spacer"],
      selectLabel: ["selectLabel"],
      select: ["select"],
      input: ["input"],
      selectIcon: ["selectIcon"],
      menuItem: ["menuItem"],
      displayedRows: ["displayedRows"],
      actions: ["actions"]
    };
    return composeClasses(slots, getTablePaginationUtilityClass, classes);
  };
  var TablePagination = /* @__PURE__ */ React96.forwardRef(function TablePagination2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTablePagination"
    });
    const {
      ActionsComponent = TablePaginationActions_default,
      backIconButtonProps,
      className,
      colSpan: colSpanProp,
      component = TableCell_default,
      count,
      getItemAriaLabel = defaultGetAriaLabel,
      labelDisplayedRows = defaultLabelDisplayedRows,
      labelRowsPerPage = "Rows per page:",
      nextIconButtonProps,
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      SelectProps = {},
      showFirstButton = false,
      showLastButton = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded61);
    const ownerState = props;
    const classes = useUtilityClasses39(ownerState);
    const MenuItemComponent = SelectProps.native ? "option" : TablePaginationMenuItem;
    let colSpan;
    if (component === TableCell_default || component === "td") {
      colSpan = colSpanProp || 1e3;
    }
    const selectId = useId_default(SelectProps.id);
    const labelId = useId_default(SelectProps.labelId);
    const getLabelDisplayedRowsTo = () => {
      if (count === -1) {
        return (page + 1) * rowsPerPage;
      }
      return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(TablePaginationRoot, _extends({
      colSpan,
      ref,
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className)
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(TablePaginationToolbar, {
        className: classes.toolbar,
        children: [/* @__PURE__ */ (0, import_jsx_runtime90.jsx)(TablePaginationSpacer, {
          className: classes.spacer
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(TablePaginationSelectLabel, {
          className: classes.selectLabel,
          id: labelId,
          children: labelRowsPerPage
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(TablePaginationSelect, _extends({
          variant: "standard",
          input: _InputBase || (_InputBase = /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(InputBase_default, {})),
          value: rowsPerPage,
          onChange: onRowsPerPageChange,
          id: selectId,
          labelId
        }, SelectProps, {
          classes: _extends({}, SelectProps.classes, {
            root: clsx_m_default(classes.input, classes.selectRoot, (SelectProps.classes || {}).root),
            select: clsx_m_default(classes.select, (SelectProps.classes || {}).select),
            icon: clsx_m_default(classes.selectIcon, (SelectProps.classes || {}).icon)
          }),
          children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ (0, import_react12.createElement)(MenuItemComponent, _extends({}, !isHostComponent_default(MenuItemComponent) && {
            ownerState
          }, {
            className: classes.menuItem,
            key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(TablePaginationDisplayedRows, {
          className: classes.displayedRows,
          children: labelDisplayedRows({
            from: count === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count === -1 ? -1 : count,
            page
          })
        }), /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ActionsComponent, {
          className: classes.actions,
          backIconButtonProps,
          count,
          nextIconButtonProps,
          onPageChange,
          page,
          rowsPerPage,
          showFirstButton,
          showLastButton,
          getItemAriaLabel
        })]
      })
    }));
  });
  true ? TablePagination.propTypes = {
    ActionsComponent: import_prop_types63.default.elementType,
    backIconButtonProps: import_prop_types63.default.object,
    classes: import_prop_types63.default.object,
    className: import_prop_types63.default.string,
    colSpan: import_prop_types63.default.number,
    component: import_prop_types63.default.elementType,
    count: integerPropType_default.isRequired,
    getItemAriaLabel: import_prop_types63.default.func,
    labelDisplayedRows: import_prop_types63.default.func,
    labelRowsPerPage: import_prop_types63.default.node,
    nextIconButtonProps: import_prop_types63.default.object,
    onPageChange: import_prop_types63.default.func.isRequired,
    onRowsPerPageChange: import_prop_types63.default.func,
    page: chainPropTypes(integerPropType_default.isRequired, (props) => {
      const {
        count,
        page,
        rowsPerPage
      } = props;
      if (count === -1) {
        return null;
      }
      const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
      }
      return null;
    }),
    rowsPerPage: integerPropType_default.isRequired,
    rowsPerPageOptions: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.shape({
      label: import_prop_types63.default.string.isRequired,
      value: import_prop_types63.default.number.isRequired
    })]).isRequired),
    SelectProps: import_prop_types63.default.object,
    showFirstButton: import_prop_types63.default.bool,
    showLastButton: import_prop_types63.default.bool,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object])
  } : void 0;
  var TablePagination_default = TablePagination;

  // node_modules/@mui/material/TextField/TextField.js
  var React97 = __toModule(require_react());
  var import_prop_types64 = __toModule(require_prop_types());

  // node_modules/@mui/material/TextField/textFieldClasses.js
  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass("MuiTextField", slot);
  }
  var textFieldClasses = generateUtilityClasses("MuiTextField", ["root"]);

  // node_modules/@mui/material/TextField/TextField.js
  var import_jsx_runtime92 = __toModule(require_jsx_runtime());
  var import_jsx_runtime93 = __toModule(require_jsx_runtime());
  var _excluded62 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var useUtilityClasses40 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTextFieldUtilityClass, classes);
  };
  var TextFieldRoot = styled_default(FormControl_default, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var TextField = /* @__PURE__ */ React97.forwardRef(function TextField2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color: color2 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded62);
    const ownerState = _extends({}, props, {
      autoFocus,
      color: color2,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes = useUtilityClasses40(ownerState);
    if (true) {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = useId2(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(TextFieldRoot, _extends({
      className: clsx_m_default(classes.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color2,
      variant,
      ownerState
    }, other, {
      children: [label != null && label !== "" && /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(InputLabel_default, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(Select_default, _extends({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(FormHelperText_default, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  true ? TextField.propTypes = {
    autoComplete: import_prop_types64.default.string,
    autoFocus: import_prop_types64.default.bool,
    children: import_prop_types64.default.node,
    classes: import_prop_types64.default.object,
    className: import_prop_types64.default.string,
    color: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types64.default.string]),
    defaultValue: import_prop_types64.default.any,
    disabled: import_prop_types64.default.bool,
    error: import_prop_types64.default.bool,
    FormHelperTextProps: import_prop_types64.default.object,
    fullWidth: import_prop_types64.default.bool,
    helperText: import_prop_types64.default.node,
    id: import_prop_types64.default.string,
    InputLabelProps: import_prop_types64.default.object,
    inputProps: import_prop_types64.default.object,
    InputProps: import_prop_types64.default.object,
    inputRef: refType_default,
    label: import_prop_types64.default.node,
    margin: import_prop_types64.default.oneOf(["dense", "none", "normal"]),
    maxRows: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    minRows: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    multiline: import_prop_types64.default.bool,
    name: import_prop_types64.default.string,
    onBlur: import_prop_types64.default.func,
    onChange: import_prop_types64.default.func,
    onFocus: import_prop_types64.default.func,
    placeholder: import_prop_types64.default.string,
    required: import_prop_types64.default.bool,
    rows: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    select: import_prop_types64.default.bool,
    SelectProps: import_prop_types64.default.object,
    size: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["medium", "small"]), import_prop_types64.default.string]),
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    type: import_prop_types64.default.string,
    value: import_prop_types64.default.any,
    variant: import_prop_types64.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = TextField;

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.js
  var React99 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/components/GridApiContext.js
  var React98 = __toModule(require_react());
  var GridApiContext = /* @__PURE__ */ React98.createContext(void 0);
  if (true) {
    GridApiContext.displayName = "GridApiContext";
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.js
  function useGridApiContext() {
    const apiRef = React99.useContext(GridApiContext);
    if (apiRef === void 0) {
      throw new Error(["MUI: Could not find the data grid context.", "It looks like you rendered your component outside of a DataGrid or DataGridPro parent component.", "This can also happen if you are bundling multiple versions of the data grid."].join("\n"));
    }
    return apiRef;
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js
  var React101 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/context/GridRootPropsContext.js
  var React100 = __toModule(require_react());
  var GridRootPropsContext = /* @__PURE__ */ React100.createContext(void 0);
  if (true) {
    GridRootPropsContext.displayName = "GridRootPropsContext";
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js
  var useGridRootProps = () => {
    const contextValue = React101.useContext(GridRootPropsContext);
    if (!contextValue) {
      throw new Error("MUI: useGridRootProps should only be used inside the DataGrid/DataGridPro component.");
    }
    return contextValue;
  };

  // node_modules/@mui/x-data-grid/DataGrid/DataGrid.js
  var React222 = __toModule(require_react());
  var import_prop_types103 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/components/base/GridBody.js
  var React105 = __toModule(require_react());
  var import_prop_types66 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/models/events/gridEvents.js
  var GridEvents;
  (function(GridEvents2) {
    GridEvents2["resize"] = "resize";
    GridEvents2["debouncedResize"] = "debouncedResize";
    GridEvents2["viewportInnerSizeChange"] = "viewportInnerSizeChange";
    GridEvents2["componentError"] = "componentError";
    GridEvents2["unmount"] = "unmount";
    GridEvents2["cellModeChange"] = "cellModeChange";
    GridEvents2["cellClick"] = "cellClick";
    GridEvents2["cellDoubleClick"] = "cellDoubleClick";
    GridEvents2["cellMouseDown"] = "cellMouseDown";
    GridEvents2["cellMouseUp"] = "cellMouseUp";
    GridEvents2["cellKeyDown"] = "cellKeyDown";
    GridEvents2["cellFocusIn"] = "cellFocusIn";
    GridEvents2["cellFocusOut"] = "cellFocusOut";
    GridEvents2["cellDragEnter"] = "cellDragEnter";
    GridEvents2["cellDragOver"] = "cellDragOver";
    GridEvents2["editCellPropsChange"] = "editCellPropsChange";
    GridEvents2["cellEditCommit"] = "cellEditCommit";
    GridEvents2["cellEditStart"] = "cellEditStart";
    GridEvents2["cellEditStop"] = "cellEditStop";
    GridEvents2["rowEditStart"] = "rowEditStart";
    GridEvents2["rowEditStop"] = "rowEditStop";
    GridEvents2["rowEditCommit"] = "rowEditCommit";
    GridEvents2["cellNavigationKeyDown"] = "cellNavigationKeyDown";
    GridEvents2["rowClick"] = "rowClick";
    GridEvents2["rowDoubleClick"] = "rowDoubleClick";
    GridEvents2["rowMouseEnter"] = "rowMouseEnter";
    GridEvents2["rowMouseLeave"] = "rowMouseLeave";
    GridEvents2["editRowsModelChange"] = "editRowsModelChange";
    GridEvents2["rowDragStart"] = "rowDragStart";
    GridEvents2["rowDragOver"] = "rowDragOver";
    GridEvents2["rowDragEnd"] = "rowDragEnd";
    GridEvents2["columnHeaderBlur"] = "columnHeaderBlur";
    GridEvents2["columnHeaderFocus"] = "columnHeaderFocus";
    GridEvents2["columnHeaderNavigationKeyDown"] = "columnHeaderNavigationKeyDown";
    GridEvents2["columnHeaderKeyDown"] = "columnHeaderKeyDown";
    GridEvents2["columnHeaderClick"] = "columnHeaderClick";
    GridEvents2["columnHeaderDoubleClick"] = "columnHeaderDoubleClick";
    GridEvents2["columnHeaderOver"] = "columnHeaderOver";
    GridEvents2["columnHeaderOut"] = "columnHeaderOut";
    GridEvents2["columnHeaderEnter"] = "columnHeaderEnter";
    GridEvents2["columnHeaderLeave"] = "columnHeaderLeave";
    GridEvents2["columnHeaderDragStart"] = "columnHeaderDragStart";
    GridEvents2["columnHeaderDragOver"] = "columnHeaderDragOver";
    GridEvents2["columnHeaderDragEnter"] = "columnHeaderDragEnter";
    GridEvents2["columnHeaderDragEnd"] = "columnHeaderDragEnd";
    GridEvents2["selectionChange"] = "selectionChange";
    GridEvents2["headerSelectionCheckboxChange"] = "headerSelectionCheckboxChange";
    GridEvents2["rowSelectionCheckboxChange"] = "rowSelectionCheckboxChange";
    GridEvents2["pageChange"] = "pageChange";
    GridEvents2["pageSizeChange"] = "pageSizeChange";
    GridEvents2["rowGroupingModelChange"] = "rowGroupingModelChange";
    GridEvents2["rowsScroll"] = "rowsScroll";
    GridEvents2["rowsScrollEnd"] = "rowsScrollEnd";
    GridEvents2["columnSeparatorMouseDown"] = "columnSeparatorMouseDown";
    GridEvents2["columnResize"] = "columnResize";
    GridEvents2["columnWidthChange"] = "columnWidthChange";
    GridEvents2["columnResizeStart"] = "columnResizeStart";
    GridEvents2["columnResizeStop"] = "columnResizeStop";
    GridEvents2["columnOrderChange"] = "columnOrderChange";
    GridEvents2["rowOrderChange"] = "rowOrderChange";
    GridEvents2["rowsSet"] = "rowsSet";
    GridEvents2["rowExpansionChange"] = "rowExpansionChange";
    GridEvents2["sortedRowsSet"] = "sortedRowsSet";
    GridEvents2["filteredRowsSet"] = "filteredRowsSet";
    GridEvents2["columnsChange"] = "columnsChange";
    GridEvents2["detailPanelsExpandedRowIdsChange"] = "detailPanelsExpandedRowIdsChange";
    GridEvents2["pinnedColumnsChange"] = "pinnedColumnsChange";
    GridEvents2["activeStrategyProcessorChange"] = "activeStrategyProcessorChange";
    GridEvents2["strategyAvailabilityChange"] = "strategyAvailabilityChange";
    GridEvents2["sortModelChange"] = "sortModelChange";
    GridEvents2["filterModelChange"] = "filterModelChange";
    GridEvents2["columnVisibilityModelChange"] = "columnVisibilityModelChange";
    GridEvents2["stateChange"] = "stateChange";
    GridEvents2["columnVisibilityChange"] = "columnVisibilityChange";
    GridEvents2["virtualScrollerContentSizeChange"] = "virtualScrollerContentSizeChange";
    GridEvents2["virtualScrollerWheel"] = "virtualScrollerWheel";
    GridEvents2["virtualScrollerTouchMove"] = "virtualScrollerTouchMove";
    GridEvents2["preferencePanelClose"] = "preferencePanelClose";
    GridEvents2["preferencePanelOpen"] = "preferencePanelOpen";
  })(GridEvents || (GridEvents = {}));

  // node_modules/@mui/x-data-grid/components/containers/GridMainContainer.js
  var React102 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/constants/gridClasses.js
  function getDataGridUtilityClass(slot) {
    return generateUtilityClass("MuiDataGrid", slot);
  }
  var gridClasses2 = generateUtilityClasses("MuiDataGrid", ["actionsCell", "autoHeight", "booleanCell", "cell--editable", "cell--editing", "cell--textCenter", "cell--textLeft", "cell--textRight", "cell--withRenderer", "cell", "cellContent", "cellCheckbox", "checkboxInput", "columnHeader--alignCenter", "columnHeader--alignLeft", "columnHeader--alignRight", "columnHeader--dragging", "columnHeader--moving", "columnHeader--numeric", "columnHeader--sortable", "columnHeader--sorted", "columnHeader--filtered", "columnHeader", "columnHeaderCheckbox", "columnHeaderDraggableContainer", "columnHeaderDropZone", "columnHeaderTitle", "columnHeaderTitleContainer", "columnHeaderTitleContainerContent", "columnHeaders", "columnHeadersInner", "columnHeadersInner--scrollable", "columnSeparator--resizable", "columnSeparator--resizing", "columnSeparator--sideLeft", "columnSeparator--sideRight", "columnSeparator", "columnsPanel", "columnsPanelRow", "detailPanel", "detailPanels", "detailPanelToggleCell", "detailPanelToggleCell--expanded", "panel", "panelHeader", "panelWrapper", "panelContent", "panelFooter", "paper", "editBooleanCell", "editInputCell", "filterForm", "filterFormDeleteIcon", "filterFormLinkOperatorInput", "filterFormColumnInput", "filterFormOperatorInput", "filterFormValueInput", "filterIcon", "footerContainer", "iconButtonContainer", "iconSeparator", "main", "menu", "menuIcon", "menuIconButton", "menuOpen", "menuList", "overlay", "root", "row", "row--editable", "row--editing", "row--lastVisible", "row--dragging", "rowReorderCellPlaceholder", "rowCount", "rowReorderCellContainer", "rowReorderCell", "rowReorderCell--draggable", "scrollArea--left", "scrollArea--right", "scrollArea", "selectedRowCount", "sortIcon", "toolbarContainer", "toolbarFilterList", "virtualScroller", "virtualScrollerContent", "virtualScrollerContent--overflowed", "virtualScrollerRenderZone", "pinnedColumns", "pinnedColumns--left", "pinnedColumns--right", "pinnedColumnHeaders", "pinnedColumnHeaders--left", "pinnedColumnHeaders--right", "withBorder", "treeDataGroupingCell", "treeDataGroupingCellToggle", "groupingCriteriaCell", "groupingCriteriaCellToggle"]);

  // node_modules/@mui/x-data-grid/components/containers/GridMainContainer.js
  var import_jsx_runtime94 = __toModule(require_jsx_runtime());
  var useUtilityClasses41 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["main"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridMainContainerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "Main",
    overridesResolver: (props, styles4) => styles4.main
  })(() => ({
    position: "relative",
    flexGrow: 1,
    display: "flex",
    flexDirection: "column",
    overflow: "hidden"
  }));
  function GridMainContainer(props) {
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses41(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(GridMainContainerRoot, {
      className: classes.root,
      children: props.children
    });
  }

  // node_modules/@mui/x-data-grid/components/GridAutoSizer.js
  var React103 = __toModule(require_react());
  var import_prop_types65 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/lib/createDetectElementResize/index.js
  function createDetectElementResize(nonce, hostWindow) {
    var resetTriggers = function resetTriggers2(element) {
      var triggers = element.__resizeTriggers__, expand = triggers.firstElementChild, contract = triggers.lastElementChild, expandChild = expand.firstElementChild;
      contract.scrollLeft = contract.scrollWidth;
      contract.scrollTop = contract.scrollHeight;
      expandChild.style.width = expand.offsetWidth + 1 + "px";
      expandChild.style.height = expand.offsetHeight + 1 + "px";
      expand.scrollLeft = expand.scrollWidth;
      expand.scrollTop = expand.scrollHeight;
    };
    var checkTriggers = function checkTriggers2(element) {
      return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;
    };
    var scrollListener = function scrollListener2(e) {
      if (e.target.className.indexOf("contract-trigger") < 0 && e.target.className.indexOf("expand-trigger") < 0) {
        return;
      }
      var element = this;
      resetTriggers(this);
      if (this.__resizeRAF__) {
        hostWindow.cancelAnimationFrame(this.__resizeRAF__);
      }
      this.__resizeRAF__ = hostWindow.requestAnimationFrame(function() {
        if (checkTriggers(element)) {
          element.__resizeLast__.width = element.offsetWidth;
          element.__resizeLast__.height = element.offsetHeight;
          element.__resizeListeners__.forEach(function(fn2) {
            fn2.call(element, e);
          });
        }
      });
    };
    var animation = false, keyframeprefix = "", animationstartevent = "animationstart", domPrefixes = "Webkit Moz O ms".split(" "), startEvents = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "), pfx = "";
    {
      var elm = document.createElement("fakeelement");
      if (elm.style.animationName !== void 0) {
        animation = true;
      }
      if (animation === false) {
        for (var i = 0; i < domPrefixes.length; i++) {
          if (elm.style[domPrefixes[i] + "AnimationName"] !== void 0) {
            pfx = domPrefixes[i];
            keyframeprefix = "-" + pfx.toLowerCase() + "-";
            animationstartevent = startEvents[i];
            animation = true;
            break;
          }
        }
      }
    }
    var animationName = "resizeanim";
    var animationKeyframes = "@" + keyframeprefix + "keyframes " + animationName + " { from { opacity: 0; } to { opacity: 0; } } ";
    var animationStyle = keyframeprefix + "animation: 1ms " + animationName + "; ";
    var createStyles = function createStyles2(doc) {
      if (!doc.getElementById("muiDetectElementResize")) {
        var css2 = (animationKeyframes ? animationKeyframes : "") + ".Mui-resizeTriggers { " + (animationStyle ? animationStyle : "") + 'visibility: hidden; opacity: 0; } .Mui-resizeTriggers, .Mui-resizeTriggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .Mui-resizeTriggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }', head = doc.head || doc.getElementsByTagName("head")[0], style3 = doc.createElement("style");
        style3.id = "muiDetectElementResize";
        style3.type = "text/css";
        if (nonce != null) {
          style3.setAttribute("nonce", nonce);
        }
        if (style3.styleSheet) {
          style3.styleSheet.cssText = css2;
        } else {
          style3.appendChild(doc.createTextNode(css2));
        }
        head.appendChild(style3);
      }
    };
    var addResizeListener = function addResizeListener2(element, fn2) {
      if (!element.__resizeTriggers__) {
        var doc = element.ownerDocument;
        var elementStyle = hostWindow.getComputedStyle(element);
        if (elementStyle && elementStyle.position == "static") {
          element.style.position = "relative";
        }
        createStyles(doc);
        element.__resizeLast__ = {};
        element.__resizeListeners__ = [];
        (element.__resizeTriggers__ = doc.createElement("div")).className = "Mui-resizeTriggers";
        element.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>';
        element.appendChild(element.__resizeTriggers__);
        resetTriggers(element);
        element.addEventListener("scroll", scrollListener, true);
        if (animationstartevent) {
          element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
            if (e.animationName == animationName) {
              resetTriggers(element);
            }
          };
          element.__resizeTriggers__.addEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
        }
      }
      element.__resizeListeners__.push(fn2);
    };
    var removeResizeListener = function removeResizeListener2(element, fn2) {
      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn2), 1);
      if (!element.__resizeListeners__.length) {
        element.removeEventListener("scroll", scrollListener, true);
        if (element.__resizeTriggers__.__animationListener__) {
          element.__resizeTriggers__.removeEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
          element.__resizeTriggers__.__animationListener__ = null;
        }
        try {
          element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
        } catch (e) {
        }
      }
    };
    return {
      addResizeListener,
      removeResizeListener
    };
  }

  // node_modules/@mui/x-data-grid/components/GridAutoSizer.js
  var import_jsx_runtime95 = __toModule(require_jsx_runtime());
  var _excluded63 = ["children", "defaultHeight", "defaultWidth", "disableHeight", "disableWidth", "nonce", "onResize", "style"];
  var GridAutoSizer = /* @__PURE__ */ React103.forwardRef(function AutoSizer(props, ref) {
    const {
      children,
      defaultHeight = null,
      defaultWidth = null,
      disableHeight = false,
      disableWidth = false,
      nonce,
      onResize,
      style: style3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded63);
    const [state, setState] = React103.useState({
      height: defaultHeight,
      width: defaultWidth
    });
    const rootRef = React103.useRef(null);
    const parentElement = React103.useRef(null);
    const handleResize = useEventCallback_default(() => {
      if (parentElement.current) {
        const height2 = parentElement.current.offsetHeight || 0;
        const width2 = parentElement.current.offsetWidth || 0;
        const win = ownerWindow_default(parentElement.current);
        const computedStyle = win.getComputedStyle(parentElement.current);
        const paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
        const paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
        const paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
        const paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
        const newHeight = height2 - paddingTop - paddingBottom;
        const newWidth = width2 - paddingLeft - paddingRight;
        if (!disableHeight && state.height !== newHeight || !disableWidth && state.width !== newWidth) {
          setState({
            height: newHeight,
            width: newWidth
          });
          if (onResize) {
            onResize({
              height: newHeight,
              width: newWidth
            });
          }
        }
      }
    });
    useEnhancedEffect_default2(() => {
      var _parentElement$curren;
      parentElement.current = rootRef.current.parentElement;
      if (!parentElement) {
        return void 0;
      }
      const win = ownerWindow_default((_parentElement$curren = parentElement.current) != null ? _parentElement$curren : void 0);
      const detectElementResize = createDetectElementResize(nonce, win);
      detectElementResize.addResizeListener(parentElement.current, handleResize);
      handleResize();
      return () => {
        detectElementResize.removeResizeListener(parentElement.current, handleResize);
      };
    }, [nonce, handleResize]);
    const outerStyle = {
      overflow: "visible"
    };
    const childParams = {};
    if (!disableHeight) {
      outerStyle.height = 0;
      childParams.height = state.height;
    }
    if (!disableWidth) {
      outerStyle.width = 0;
      childParams.width = state.width;
    }
    const handleRef = useForkRef_default(rootRef, ref);
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("div", _extends({
      ref: handleRef,
      style: _extends({}, outerStyle, style3)
    }, other, {
      children: state.height === null && state.width === null ? null : children(childParams)
    }));
  });
  true ? GridAutoSizer.propTypes = {
    defaultHeight: import_prop_types65.default.number,
    defaultWidth: import_prop_types65.default.number,
    disableHeight: import_prop_types65.default.bool,
    disableWidth: import_prop_types65.default.bool,
    nonce: import_prop_types65.default.string,
    onResize: import_prop_types65.default.func
  } : void 0;

  // node_modules/@mui/x-data-grid/components/base/GridOverlays.js
  var React104 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/utils/warning.js
  var buildWarning = (message, gravity = "warning") => {
    let alreadyWarned = false;
    const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
    return () => {
      if (!alreadyWarned) {
        alreadyWarned = true;
        if (gravity === "error") {
          console.error(cleanMessage);
        } else {
          console.warn(cleanMessage);
        }
      }
    };
  };
  var wrapWithWarningOnCall = (method, message) => {
    if (false) {
      return method;
    }
    const warning = buildWarning(message);
    return (...args) => {
      warning();
      return method(...args);
    };
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js
  function isOutputSelector(selector) {
    return selector.cache;
  }
  var stateNotInitializedWarning = buildWarning(["MUI: `useGridSelector` has been called before the initialization of the state.", "This hook can only be used inside the context of the grid."]);
  var useGridSelector = (apiRef, selector) => {
    if (true) {
      if (!apiRef.current.state) {
        stateNotInitializedWarning();
      }
    }
    if (isOutputSelector(selector)) {
      return selector(apiRef);
    }
    return selector(apiRef.current.state);
  };

  // node_modules/reselect/es/defaultMemoize.js
  var NOT_FOUND = "NOT_FOUND";
  function createSingletonCache(equals) {
    var entry;
    return {
      get: function get(key) {
        if (entry && equals(entry.key, key)) {
          return entry.value;
        }
        return NOT_FOUND;
      },
      put: function put(key, value) {
        entry = {
          key,
          value
        };
      },
      getEntries: function getEntries() {
        return entry ? [entry] : [];
      },
      clear: function clear() {
        entry = void 0;
      }
    };
  }
  function createLruCache(maxSize, equals) {
    var entries = [];
    function get(key) {
      var cacheIndex = entries.findIndex(function(entry2) {
        return equals(key, entry2.key);
      });
      if (cacheIndex > -1) {
        var entry = entries[cacheIndex];
        if (cacheIndex > 0) {
          entries.splice(cacheIndex, 1);
          entries.unshift(entry);
        }
        return entry.value;
      }
      return NOT_FOUND;
    }
    function put(key, value) {
      if (get(key) === NOT_FOUND) {
        entries.unshift({
          key,
          value
        });
        if (entries.length > maxSize) {
          entries.pop();
        }
      }
    }
    function getEntries() {
      return entries;
    }
    function clear() {
      entries = [];
    }
    return {
      get,
      put,
      getEntries,
      clear
    };
  }
  var defaultEqualityCheck = function defaultEqualityCheck2(a, b) {
    return a === b;
  };
  function createCacheKeyComparator(equalityCheck) {
    return function areArgumentsShallowlyEqual(prev2, next2) {
      if (prev2 === null || next2 === null || prev2.length !== next2.length) {
        return false;
      }
      var length2 = prev2.length;
      for (var i = 0; i < length2; i++) {
        if (!equalityCheck(prev2[i], next2[i])) {
          return false;
        }
      }
      return true;
    };
  }
  function defaultMemoize(func, equalityCheckOrOptions) {
    var providedOptions = typeof equalityCheckOrOptions === "object" ? equalityCheckOrOptions : {
      equalityCheck: equalityCheckOrOptions
    };
    var _providedOptions$equa = providedOptions.equalityCheck, equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa, _providedOptions$maxS = providedOptions.maxSize, maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS, resultEqualityCheck = providedOptions.resultEqualityCheck;
    var comparator = createCacheKeyComparator(equalityCheck);
    var cache2 = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);
    function memoized() {
      var value = cache2.get(arguments);
      if (value === NOT_FOUND) {
        value = func.apply(null, arguments);
        if (resultEqualityCheck) {
          var entries = cache2.getEntries();
          var matchingEntry = entries.find(function(entry) {
            return resultEqualityCheck(entry.value, value);
          });
          if (matchingEntry) {
            value = matchingEntry.value;
          }
        }
        cache2.put(arguments, value);
      }
      return value;
    }
    memoized.clearCache = function() {
      return cache2.clear();
    };
    return memoized;
  }

  // node_modules/reselect/es/index.js
  function getDependencies(funcs) {
    var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
    if (!dependencies.every(function(dep) {
      return typeof dep === "function";
    })) {
      var dependencyTypes = dependencies.map(function(dep) {
        return typeof dep === "function" ? "function " + (dep.name || "unnamed") + "()" : typeof dep;
      }).join(", ");
      throw new Error("createSelector expects all input-selectors to be functions, but received the following types: [" + dependencyTypes + "]");
    }
    return dependencies;
  }
  function createSelectorCreator(memoize3) {
    for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      memoizeOptionsFromArgs[_key - 1] = arguments[_key];
    }
    var createSelector3 = function createSelector4() {
      for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        funcs[_key2] = arguments[_key2];
      }
      var _recomputations = 0;
      var _lastResult;
      var directlyPassedOptions = {
        memoizeOptions: void 0
      };
      var resultFunc = funcs.pop();
      if (typeof resultFunc === "object") {
        directlyPassedOptions = resultFunc;
        resultFunc = funcs.pop();
      }
      if (typeof resultFunc !== "function") {
        throw new Error("createSelector expects an output function after the inputs, but received: [" + typeof resultFunc + "]");
      }
      var _directlyPassedOption = directlyPassedOptions, _directlyPassedOption2 = _directlyPassedOption.memoizeOptions, memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2;
      var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];
      var dependencies = getDependencies(funcs);
      var memoizedResultFunc = memoize3.apply(void 0, [function() {
        _recomputations++;
        return resultFunc.apply(null, arguments);
      }].concat(finalMemoizeOptions));
      var selector = memoize3(function() {
        var params = [];
        var length2 = dependencies.length;
        for (var i = 0; i < length2; i++) {
          params.push(dependencies[i].apply(null, arguments));
        }
        _lastResult = memoizedResultFunc.apply(null, params);
        return _lastResult;
      });
      Object.assign(selector, {
        resultFunc,
        memoizedResultFunc,
        dependencies,
        lastResult: function lastResult() {
          return _lastResult;
        },
        recomputations: function recomputations() {
          return _recomputations;
        },
        resetRecomputations: function resetRecomputations() {
          return _recomputations = 0;
        }
      });
      return selector;
    };
    return createSelector3;
  }
  var createSelector = /* @__PURE__ */ createSelectorCreator(defaultMemoize);

  // node_modules/@mui/x-data-grid/utils/createSelector.js
  var cache = {};
  var missingInstanceIdWarning = buildWarning(["MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.", "To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g `mySelector(state, apiRef.current.instanceId)`."]);
  var createSelector2 = (...args) => {
    const selector = (...selectorArgs) => {
      const [stateOrApiRef, instanceId] = selectorArgs;
      const isApiRef = !!stateOrApiRef.current;
      const cacheKey = isApiRef ? stateOrApiRef.current.instanceId : instanceId != null ? instanceId : "default";
      const state = isApiRef ? stateOrApiRef.current.state : stateOrApiRef;
      if (true) {
        if (cacheKey === "default") {
          missingInstanceIdWarning();
        }
      }
      if (cache[cacheKey] && cache[cacheKey].get(args)) {
        return cache[cacheKey].get(args)(state, cacheKey);
      }
      const newSelector = createSelector(...args);
      if (!cache[cacheKey]) {
        cache[cacheKey] = new Map();
      }
      cache[cacheKey].set(args, newSelector);
      return newSelector(state, cacheKey);
    };
    selector.cache = cache;
    return selector;
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js
  var gridRowsStateSelector = (state) => state.rows;
  var gridRowCountSelector = createSelector2(gridRowsStateSelector, (rows) => rows.totalRowCount);
  var gridRowsLoadingSelector = createSelector2(gridRowsStateSelector, (rows) => rows.loading);
  var gridTopLevelRowCountSelector = createSelector2(gridRowsStateSelector, (rows) => rows.totalTopLevelRowCount);
  var gridRowsLookupSelector = createSelector2(gridRowsStateSelector, (rows) => rows.idRowsLookup);
  var gridRowTreeSelector = createSelector2(gridRowsStateSelector, (rows) => rows.tree);
  var gridRowGroupingNameSelector = createSelector2(gridRowsStateSelector, (rows) => rows.groupingName);
  var gridRowTreeDepthSelector = createSelector2(gridRowsStateSelector, (rows) => rows.treeDepth);
  var gridRowIdsSelector = createSelector2(gridRowsStateSelector, (rows) => rows.ids);

  // node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js
  var gridSortingStateSelector = (state) => state.sorting;
  var gridSortedRowIdsSelector = createSelector2(gridSortingStateSelector, (sortingState) => sortingState.sortedRows);
  var gridSortedRowEntriesSelector = createSelector2(gridSortedRowIdsSelector, gridRowsLookupSelector, (sortedIds, idRowsLookup) => sortedIds.map((id) => ({
    id,
    model: idRowsLookup[id]
  })));
  var gridSortModelSelector = createSelector2(gridSortingStateSelector, (sorting) => sorting.sortModel);
  var gridSortColumnLookupSelector = createSelector2(gridSortModelSelector, (sortModel) => {
    const result = sortModel.reduce((res, sortItem, index) => {
      res[sortItem.field] = {
        sortDirection: sortItem.sort,
        sortIndex: sortModel.length > 1 ? index + 1 : void 0
      };
      return res;
    }, {});
    return result;
  });

  // node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js
  var gridColumnsSelector = (state) => state.columns;
  var gridColumnFieldsSelector = createSelector2(gridColumnsSelector, (columnsState) => columnsState.all);
  var gridColumnLookupSelector = createSelector2(gridColumnsSelector, (columnsState) => columnsState.lookup);
  var gridColumnDefinitionsSelector = createSelector2(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup2) => allFields.map((field) => lookup2[field]));
  var gridColumnVisibilityModelSelector = createSelector2(gridColumnsSelector, (columnsState) => columnsState.columnVisibilityModel);
  var gridVisibleColumnDefinitionsSelector = createSelector2(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter((column2) => columnVisibilityModel[column2.field] !== false));
  var gridVisibleColumnFieldsSelector = createSelector2(gridVisibleColumnDefinitionsSelector, (visibleColumns) => visibleColumns.map((column2) => column2.field));
  var gridColumnPositionsSelector = createSelector2(gridVisibleColumnDefinitionsSelector, (visibleColumns) => {
    const positions = [];
    let currentPosition = 0;
    for (let i = 0; i < visibleColumns.length; i += 1) {
      positions.push(currentPosition);
      currentPosition += visibleColumns[i].computedWidth;
    }
    return positions;
  });
  var gridColumnsTotalWidthSelector = createSelector2(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {
    const colCount = visibleColumns.length;
    if (colCount === 0) {
      return 0;
    }
    return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;
  });
  var gridFilterableColumnDefinitionsSelector = createSelector2(gridColumnDefinitionsSelector, (columns) => columns.filter((col) => col.filterable));
  var gridFilterableColumnLookupSelector = createSelector2(gridColumnDefinitionsSelector, (columns) => columns.reduce((acc, col) => {
    if (col.filterable) {
      acc[col.field] = col;
    }
    return acc;
  }, {}));
  var allGridColumnsFieldsSelector = wrapWithWarningOnCall(gridColumnFieldsSelector, ["MUI: The method allGridColumnsFieldsSelector is deprecated and will be removed in the next major version.", "Use gridColumnFieldsSelector instead"]);
  var allGridColumnsSelector = wrapWithWarningOnCall(gridColumnDefinitionsSelector, ["MUI: The method allGridColumnsSelector is deprecated and will be removed in the next major version.", "Use gridColumnDefinitionsSelector instead"]);
  var visibleGridColumnsSelector = wrapWithWarningOnCall(gridVisibleColumnDefinitionsSelector, ["MUI: The method visibleGridColumnsSelector is deprecated and will be removed in the next major version.", "Use gridVisibleColumnDefinitionsSelector instead"]);
  var filterableGridColumnsSelector = wrapWithWarningOnCall(gridFilterableColumnDefinitionsSelector, ["MUI: The method filterableGridColumnsSelector is deprecated and will be removed in the next major version.", "Use gridFilterableColumnDefinitionsSelector instead"]);
  var filterableGridColumnsIdsSelector = wrapWithWarningOnCall(createSelector2(gridFilterableColumnDefinitionsSelector, (columns) => columns.map((col) => col.field)), ["MUI: The method filterableGridColumnsIdsSelector is deprecated and will be removed in the next major version.", "Use gridFilterableColumnDefinitionsSelector instead.", "The return format is now a lookup, if you want to get the same output as before, use the following code:", "", "const lookup = gridFilterableColumnLookupSelector(apiRef);", "const fields = gridColumnFieldsSelector(apiRef).filter(field => lookup[field]);"]);
  var visibleGridColumnsLengthSelector = wrapWithWarningOnCall(createSelector2(gridVisibleColumnDefinitionsSelector, (visibleColumns) => visibleColumns.length), ["MUI: The method visibleGridColumnsLengthSelector is deprecated and will be removed in the next major version.", "Use the length of the array returned by gridVisibleColumnDefinitionsSelector instead."]);
  var gridColumnsMetaSelector = wrapWithWarningOnCall(createSelector2(gridColumnPositionsSelector, gridColumnsTotalWidthSelector, (positions, totalWidth) => ({
    totalWidth,
    positions
  })), ["MUI: The method gridColumnsMetaSelector is deprecated and will be removed in the next major version.", "Use gridColumnsTotalWidthSelector or gridColumnPositionsSelector instead"]);

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js
  var gridFilterStateSelector = (state) => state.filter;
  var gridFilterModelSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.filterModel);
  var gridVisibleRowsLookupSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.visibleRowsLookup);
  var gridFilteredRowsLookupSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.filteredRowsLookup);
  var gridFilteredDescendantCountLookupSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.filteredDescendantCountLookup);
  var gridVisibleSortedRowEntriesSelector = createSelector2(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter((row) => visibleRowsLookup[row.id] !== false));
  var gridVisibleSortedRowIdsSelector = createSelector2(gridVisibleSortedRowEntriesSelector, (visibleSortedRowEntries) => visibleSortedRowEntries.map((row) => row.id));
  var gridFilteredSortedRowEntriesSelector = createSelector2(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter((row) => filteredRowsLookup[row.id] !== false));
  var gridFilteredSortedRowIdsSelector = createSelector2(gridFilteredSortedRowEntriesSelector, (filteredSortedRowEntries) => filteredSortedRowEntries.map((row) => row.id));
  var gridVisibleSortedTopLevelRowEntriesSelector = createSelector2(gridVisibleSortedRowEntriesSelector, gridRowTreeSelector, gridRowTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {
    if (rowTreeDepth < 2) {
      return visibleSortedRows;
    }
    return visibleSortedRows.filter((row) => {
      var _rowTree$row$id;
      return ((_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth) === 0;
    });
  });
  var gridVisibleRowCountSelector = createSelector2(gridVisibleSortedRowEntriesSelector, (visibleSortedRows) => visibleSortedRows.length);
  var gridVisibleTopLevelRowCountSelector = createSelector2(gridVisibleSortedTopLevelRowEntriesSelector, (visibleSortedTopLevelRows) => visibleSortedTopLevelRows.length);
  var gridFilterActiveItemsSelector = createSelector2(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => {
    var _filterModel$items;
    return (_filterModel$items = filterModel.items) == null ? void 0 : _filterModel$items.filter((item) => {
      var _column$filterOperato, _item$value;
      if (!item.columnField) {
        return false;
      }
      const column2 = columnLookup[item.columnField];
      if (!(column2 != null && column2.filterOperators) || (column2 == null ? void 0 : (_column$filterOperato = column2.filterOperators) == null ? void 0 : _column$filterOperato.length) === 0) {
        return false;
      }
      const filterOperator = column2.filterOperators.find((operator) => operator.value === item.operatorValue);
      if (!filterOperator) {
        return false;
      }
      return !filterOperator.InputComponent || item.value != null && ((_item$value = item.value) == null ? void 0 : _item$value.toString()) !== "";
    });
  });
  var gridFilterActiveItemsLookupSelector = createSelector2(gridFilterActiveItemsSelector, (activeFilters) => {
    const result = activeFilters.reduce((res, filterItem) => {
      if (!res[filterItem.columnField]) {
        res[filterItem.columnField] = [filterItem];
      } else {
        res[filterItem.columnField].push(filterItem);
      }
      return res;
    }, {});
    return result;
  });

  // node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js
  var gridDensitySelector = (state) => state.density;
  var gridDensityValueSelector = createSelector2(gridDensitySelector, (density) => density.value);
  var gridDensityRowHeightSelector = createSelector2(gridDensitySelector, (density) => density.rowHeight);
  var gridDensityHeaderHeightSelector = createSelector2(gridDensitySelector, (density) => density.headerHeight);
  var gridDensityFactorSelector = createSelector2(gridDensitySelector, (density) => density.factor);

  // node_modules/@mui/x-data-grid/components/base/GridOverlays.js
  var import_jsx_runtime96 = __toModule(require_jsx_runtime());
  function GridOverlayWrapper(props) {
    var _viewportInnerSize$he, _viewportInnerSize$wi;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);
    const [viewportInnerSize, setViewportInnerSize] = React104.useState(() => {
      var _apiRef$current$getRo, _apiRef$current$getRo2;
      return (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize) != null ? _apiRef$current$getRo : null;
    });
    const handleViewportSizeChange = React104.useCallback(() => {
      var _apiRef$current$getRo3, _apiRef$current$getRo4;
      setViewportInnerSize((_apiRef$current$getRo3 = (_apiRef$current$getRo4 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo4.viewportInnerSize) != null ? _apiRef$current$getRo3 : null);
    }, [apiRef]);
    useEnhancedEffect_default2(() => {
      return apiRef.current.subscribeEvent(GridEvents.viewportInnerSizeChange, handleViewportSizeChange);
    }, [apiRef, handleViewportSizeChange]);
    let height2 = (_viewportInnerSize$he = viewportInnerSize == null ? void 0 : viewportInnerSize.height) != null ? _viewportInnerSize$he : 0;
    if (rootProps.autoHeight && height2 === 0) {
      height2 = "auto";
    }
    if (!viewportInnerSize) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("div", _extends({
      style: {
        height: height2,
        width: (_viewportInnerSize$wi = viewportInnerSize == null ? void 0 : viewportInnerSize.width) != null ? _viewportInnerSize$wi : 0,
        position: "absolute",
        top: headerHeight,
        bottom: height2 === "auto" ? 0 : void 0
      }
    }, props));
  }
  function GridOverlays() {
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);
    const visibleRowCount = useGridSelector(apiRef, gridVisibleRowCountSelector);
    const loading = useGridSelector(apiRef, gridRowsLoadingSelector);
    const showNoRowsOverlay = !loading && totalRowCount === 0;
    const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;
    let overlay = null;
    if (showNoRowsOverlay) {
      var _rootProps$components;
      overlay = /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(rootProps.components.NoRowsOverlay, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.noRowsOverlay));
    }
    if (showNoResultsOverlay) {
      var _rootProps$components2;
      overlay = /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(rootProps.components.NoResultsOverlay, _extends({}, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.noResultsOverlay));
    }
    if (rootProps.loading) {
      var _rootProps$components3;
      overlay = /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(rootProps.components.LoadingOverlay, _extends({}, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.loadingOverlay));
    }
    if (overlay === null) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(GridOverlayWrapper, {
      children: overlay
    });
  }

  // node_modules/@mui/x-data-grid/components/base/GridBody.js
  var import_jsx_runtime97 = __toModule(require_jsx_runtime());
  var import_jsx_runtime98 = __toModule(require_jsx_runtime());
  function GridBody(props) {
    const {
      children,
      VirtualScrollerComponent,
      ColumnHeadersComponent
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);
    const [isVirtualizationDisabled, setIsVirtualizationDisabled] = React105.useState(rootProps.disableVirtualization);
    const disableVirtualization = React105.useCallback(() => {
      setIsVirtualizationDisabled(true);
    }, []);
    const enableVirtualization = React105.useCallback(() => {
      setIsVirtualizationDisabled(false);
    }, []);
    apiRef.current.unstable_disableVirtualization = disableVirtualization;
    apiRef.current.unstable_enableVirtualization = enableVirtualization;
    const columnHeadersRef = React105.useRef(null);
    const columnsContainerRef = React105.useRef(null);
    const windowRef = React105.useRef(null);
    const renderingZoneRef = React105.useRef(null);
    apiRef.current.columnHeadersContainerElementRef = columnsContainerRef;
    apiRef.current.columnHeadersElementRef = columnHeadersRef;
    apiRef.current.windowRef = windowRef;
    apiRef.current.renderingZoneRef = renderingZoneRef;
    const handleResize = React105.useCallback((size) => {
      apiRef.current.publishEvent(GridEvents.resize, size);
    }, [apiRef]);
    return /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(GridMainContainer, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime97.jsx)(GridOverlays, {}), /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(ColumnHeadersComponent, {
        ref: columnsContainerRef,
        innerRef: columnHeadersRef
      }), /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(GridAutoSizer, {
        nonce: rootProps.nonce,
        disableHeight: rootProps.autoHeight,
        onResize: handleResize,
        children: (size) => {
          const style3 = {
            width: size.width,
            height: size.height ? size.height - headerHeight : "auto",
            marginTop: headerHeight
          };
          return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(VirtualScrollerComponent, {
            ref: windowRef,
            style: style3,
            disableVirtualization: isVirtualizationDisabled
          });
        }
      }), children]
    });
  }
  true ? GridBody.propTypes = {
    children: import_prop_types66.default.node,
    ColumnHeadersComponent: import_prop_types66.default.elementType.isRequired,
    VirtualScrollerComponent: import_prop_types66.default.elementType.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/base/GridErrorHandler.js
  var React108 = __toModule(require_react());
  var import_prop_types67 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js
  var React106 = __toModule(require_react());
  function useGridLogger(apiRef, name) {
    const logger = React106.useRef(null);
    if (logger.current) {
      return logger.current;
    }
    const newLogger = apiRef.current.getLogger(name);
    logger.current = newLogger;
    return newLogger;
  }

  // node_modules/@mui/x-data-grid/components/ErrorBoundary.js
  var React107 = __toModule(require_react());
  var ErrorBoundary = class extends React107.Component {
    static getDerivedStateFromError(error) {
      return {
        hasError: true,
        error
      };
    }
    componentDidCatch(error, errorInfo) {
      if (this.props.api.current) {
        this.logError(error);
        this.props.api.current.showError({
          error,
          errorInfo
        });
      }
    }
    logError(error, errorInfo) {
      this.props.logger.error(`An unexpected error occurred. Error: ${error && error.message}. `, error, errorInfo);
    }
    render() {
      var _this$state;
      if (this.props.hasError || (_this$state = this.state) != null && _this$state.hasError) {
        return this.props.render(this.props.componentProps || this.state);
      }
      return this.props.children;
    }
  };

  // node_modules/@mui/x-data-grid/components/base/GridErrorHandler.js
  var import_jsx_runtime99 = __toModule(require_jsx_runtime());
  function GridErrorHandler(props) {
    const {
      children
    } = props;
    const apiRef = useGridApiContext();
    const logger = useGridLogger(apiRef, "GridErrorHandler");
    const rootProps = useGridRootProps();
    const error = apiRef.current.state.error;
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(ErrorBoundary, {
      hasError: error != null,
      componentProps: error,
      api: apiRef,
      logger,
      render: (errorProps) => {
        var _rootProps$components;
        return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(GridMainContainer, {
          children: /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(rootProps.components.ErrorOverlay, _extends({}, errorProps, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.errorOverlay))
        });
      },
      children
    });
  }
  true ? GridErrorHandler.propTypes = {
    children: import_prop_types67.default.node
  } : void 0;

  // node_modules/@mui/x-data-grid/components/base/GridFooterPlaceholder.js
  var React109 = __toModule(require_react());
  var import_jsx_runtime100 = __toModule(require_jsx_runtime());
  function GridFooterPlaceholder() {
    var _rootProps$components;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const footerRef = React109.useRef(null);
    apiRef.current.footerRef = footerRef;
    if (rootProps.hideFooter) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("div", {
      ref: footerRef,
      children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(rootProps.components.Footer, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.footer))
    });
  }

  // node_modules/@mui/x-data-grid/components/base/GridHeaderPlaceholder.js
  var React110 = __toModule(require_react());
  var import_jsx_runtime101 = __toModule(require_jsx_runtime());
  function GridHeaderPlaceholder() {
    var _rootProps$components;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const headerRef = React110.useRef(null);
    apiRef.current.headerRef = headerRef;
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)("div", {
      ref: headerRef,
      children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(rootProps.components.Header, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.header))
    });
  }

  // node_modules/@mui/x-data-grid/components/cell/GridCell.js
  var React111 = __toModule(require_react());
  var import_prop_types68 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/models/gridEditRowModel.js
  var GridEditModes;
  (function(GridEditModes2) {
    GridEditModes2["Cell"] = "cell";
    GridEditModes2["Row"] = "row";
  })(GridEditModes || (GridEditModes = {}));
  var GridCellModes;
  (function(GridCellModes2) {
    GridCellModes2["Edit"] = "edit";
    GridCellModes2["View"] = "view";
  })(GridCellModes || (GridCellModes = {}));
  var GridRowModes;
  (function(GridRowModes2) {
    GridRowModes2["Edit"] = "edit";
    GridRowModes2["View"] = "view";
  })(GridRowModes || (GridRowModes = {}));

  // node_modules/@mui/x-data-grid/models/gridFeatureMode.js
  var GridFeatureModeConstant = {
    client: "client",
    server: "server"
  };

  // node_modules/@mui/x-data-grid/models/gridFilterItem.js
  var GridLinkOperator;
  (function(GridLinkOperator2) {
    GridLinkOperator2["And"] = "and";
    GridLinkOperator2["Or"] = "or";
  })(GridLinkOperator || (GridLinkOperator = {}));

  // node_modules/@mui/x-data-grid/models/params/gridEditCellParams.js
  var GridCellEditStartReasons;
  (function(GridCellEditStartReasons2) {
    GridCellEditStartReasons2["enterKeyDown"] = "enterKeyDown";
    GridCellEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
    GridCellEditStartReasons2["printableKeyDown"] = "printableKeyDown";
    GridCellEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
  })(GridCellEditStartReasons || (GridCellEditStartReasons = {}));
  var GridCellEditStopReasons;
  (function(GridCellEditStopReasons2) {
    GridCellEditStopReasons2["cellFocusOut"] = "cellFocusOut";
    GridCellEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
    GridCellEditStopReasons2["enterKeyDown"] = "enterKeyDown";
    GridCellEditStopReasons2["tabKeyDown"] = "tabKeyDown";
    GridCellEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
  })(GridCellEditStopReasons || (GridCellEditStopReasons = {}));

  // node_modules/@mui/x-data-grid/models/params/gridRowParams.js
  var GridRowEditStartReasons;
  (function(GridRowEditStartReasons2) {
    GridRowEditStartReasons2["enterKeyDown"] = "enterKeyDown";
    GridRowEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
    GridRowEditStartReasons2["printableKeyDown"] = "printableKeyDown";
    GridRowEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
  })(GridRowEditStartReasons || (GridRowEditStartReasons = {}));
  var GridRowEditStopReasons;
  (function(GridRowEditStopReasons2) {
    GridRowEditStopReasons2["rowFocusOut"] = "rowFocusOut";
    GridRowEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
    GridRowEditStopReasons2["enterKeyDown"] = "enterKeyDown";
    GridRowEditStopReasons2["tabKeyDown"] = "tabKeyDown";
    GridRowEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
  })(GridRowEditStopReasons || (GridRowEditStopReasons = {}));

  // node_modules/@mui/x-data-grid/models/gridDensity.js
  var GridDensityTypes;
  (function(GridDensityTypes2) {
    GridDensityTypes2["Compact"] = "compact";
    GridDensityTypes2["Standard"] = "standard";
    GridDensityTypes2["Comfortable"] = "comfortable";
  })(GridDensityTypes || (GridDensityTypes = {}));

  // node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js
  var gridFocusStateSelector = (state) => state.focus;
  var gridFocusCellSelector = createSelector2(gridFocusStateSelector, (focusState) => focusState.cell);
  var gridFocusColumnHeaderSelector = createSelector2(gridFocusStateSelector, (focusState) => focusState.columnHeader);
  var gridTabIndexStateSelector = (state) => state.tabIndex;
  var gridTabIndexCellSelector = createSelector2(gridTabIndexStateSelector, (state) => state.cell);
  var gridTabIndexColumnHeaderSelector = createSelector2(gridTabIndexStateSelector, (state) => state.columnHeader);

  // node_modules/@mui/x-data-grid/components/cell/GridCell.js
  var import_jsx_runtime102 = __toModule(require_jsx_runtime());
  var _excluded64 = ["align", "children", "colIndex", "colDef", "cellMode", "field", "formattedValue", "hasFocus", "height", "isEditable", "rowId", "tabIndex", "value", "width", "className", "showRightBorder", "extendRowFullWidth", "row", "colSpan", "onClick", "onDoubleClick", "onMouseDown", "onMouseUp", "onKeyDown", "onDragEnter", "onDragOver"];
  var cachedSupportsPreventScroll;
  function doesSupportPreventScroll() {
    if (cachedSupportsPreventScroll === void 0) {
      document.createElement("div").focus({
        get preventScroll() {
          cachedSupportsPreventScroll = true;
          return false;
        }
      });
    }
    return cachedSupportsPreventScroll;
  }
  var useUtilityClasses42 = (ownerState) => {
    const {
      align,
      showRightBorder,
      isEditable,
      classes
    } = ownerState;
    const slots = {
      root: ["cell", `cell--text${capitalize_default(align)}`, isEditable && "cell--editable", showRightBorder && "withBorder"],
      content: ["cellContent"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridCell(props) {
    var _rootProps$experiment;
    const {
      align,
      children,
      colIndex,
      cellMode,
      field,
      formattedValue,
      hasFocus,
      height: height2,
      isEditable,
      rowId,
      tabIndex,
      value,
      width: width2,
      className,
      showRightBorder,
      colSpan,
      onClick,
      onDoubleClick,
      onMouseDown,
      onMouseUp,
      onKeyDown,
      onDragEnter,
      onDragOver
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded64);
    const valueToRender = formattedValue == null ? value : formattedValue;
    const cellRef = React111.useRef(null);
    const focusElementRef = React111.useRef(null);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      align,
      showRightBorder,
      isEditable,
      classes: rootProps.classes
    };
    const classes = useUtilityClasses42(ownerState);
    const publishMouseUp = React111.useCallback((eventName) => (event) => {
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (onMouseUp) {
        onMouseUp(event);
      }
    }, [apiRef, field, onMouseUp, rowId]);
    const publish = React111.useCallback((eventName, propHandler) => (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      if (!apiRef.current.getRow(rowId)) {
        return;
      }
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (propHandler) {
        propHandler(event);
      }
    }, [apiRef, field, rowId]);
    const style3 = {
      minWidth: width2,
      maxWidth: width2,
      minHeight: height2,
      maxHeight: height2
    };
    React111.useLayoutEffect(() => {
      if (!hasFocus || cellMode === GridCellModes.Edit) {
        return;
      }
      const doc = ownerDocument_default(apiRef.current.rootElementRef.current);
      if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {
        const focusableElement = cellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusElementRef.current || focusableElement || cellRef.current;
        if (doesSupportPreventScroll()) {
          elementToFocus.focus({
            preventScroll: true
          });
        } else {
          const scrollPosition = apiRef.current.getScrollPosition();
          elementToFocus.focus();
          apiRef.current.scroll(scrollPosition);
        }
      }
    }, [hasFocus, cellMode, apiRef]);
    let handleFocus = other.onFocus;
    if (false) {
      handleFocus = (event) => {
        const focusedCell = gridFocusCellSelector(apiRef);
        if ((focusedCell == null ? void 0 : focusedCell.id) === rowId && focusedCell.field === field) {
          if (typeof other.onFocus === "function") {
            other.onFocus(event);
          }
          return;
        }
        if (!warnedOnce) {
          console.warn([`MUI: The cell with id=${rowId} and field=${field} received focus.`, `According to the state, the focus should be at id=${focusedCell == null ? void 0 : focusedCell.id}, field=${focusedCell == null ? void 0 : focusedCell.field}.`, "Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.", "Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state."].join("\n"));
          warnedOnce = true;
        }
      };
    }
    const column2 = apiRef.current.getColumn(field);
    const managesOwnFocus = column2.type === "actions";
    const renderChildren = () => {
      if (children == null) {
        return /* @__PURE__ */ (0, import_jsx_runtime102.jsx)("div", {
          className: classes.content,
          children: valueToRender == null ? void 0 : valueToRender.toString()
        });
      }
      if (/* @__PURE__ */ React111.isValidElement(children) && managesOwnFocus) {
        return /* @__PURE__ */ React111.cloneElement(children, {
          focusElementRef
        });
      }
      return children;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsx)("div", _extends({
      ref: cellRef,
      className: clsx_m_default(className, classes.root),
      role: "cell",
      "data-field": field,
      "data-colindex": colIndex,
      "aria-colindex": colIndex + 1,
      "aria-colspan": colSpan,
      style: style3,
      tabIndex: (cellMode === "view" || !isEditable) && !managesOwnFocus ? tabIndex : -1,
      onClick: publish(GridEvents.cellClick, onClick),
      onDoubleClick: publish(GridEvents.cellDoubleClick, onDoubleClick),
      onMouseDown: publish(GridEvents.cellMouseDown, onMouseDown),
      onMouseUp: publishMouseUp(GridEvents.cellMouseUp),
      onKeyDown: publish(GridEvents.cellKeyDown, onKeyDown),
      onDragEnter: publish(GridEvents.cellDragEnter, onDragEnter),
      onDragOver: publish(GridEvents.cellDragOver, onDragOver)
    }, other, {
      onFocus: handleFocus,
      children: renderChildren()
    }));
  }
  true ? GridCell.propTypes = {
    align: import_prop_types68.default.oneOf(["center", "left", "right"]).isRequired,
    cellMode: import_prop_types68.default.oneOf(["edit", "view"]),
    children: import_prop_types68.default.node,
    className: import_prop_types68.default.string,
    colIndex: import_prop_types68.default.number.isRequired,
    colSpan: import_prop_types68.default.number,
    field: import_prop_types68.default.string.isRequired,
    formattedValue: import_prop_types68.default.any,
    hasFocus: import_prop_types68.default.bool,
    height: import_prop_types68.default.number.isRequired,
    isEditable: import_prop_types68.default.bool,
    onClick: import_prop_types68.default.func,
    onDoubleClick: import_prop_types68.default.func,
    onDragEnter: import_prop_types68.default.func,
    onDragOver: import_prop_types68.default.func,
    onKeyDown: import_prop_types68.default.func,
    onMouseDown: import_prop_types68.default.func,
    onMouseUp: import_prop_types68.default.func,
    rowId: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]).isRequired,
    showRightBorder: import_prop_types68.default.bool,
    tabIndex: import_prop_types68.default.oneOf([-1, 0]).isRequired,
    value: import_prop_types68.default.any,
    width: import_prop_types68.default.number.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/cell/GridEditInputCell.js
  var React114 = __toModule(require_react());
  var import_prop_types70 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/components/icons/index.js
  var React112 = __toModule(require_react());
  var import_jsx_runtime103 = __toModule(require_jsx_runtime());
  var GridArrowUpwardIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
  }), "ArrowUpward");
  var GridArrowDownwardIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }), "ArrowDownward");
  var GridKeyboardArrowRight = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
  }), "KeyboardArrowRight");
  var GridExpandMoreIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }), "ExpandMore");
  var GridFilterListIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"
  }), "FilterList");
  var GridFilterAltIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"
  }), "FilterAlt");
  var GridSearchIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
  }), "Search");
  var GridMenuIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
  }), "Menu");
  var GridCheckCircleIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckCircle");
  var GridColumnIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"
  }), "ColumnIcon");
  var GridSeparatorIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M11 19V5h2v14z"
  }), "Separator");
  var GridViewHeadlineIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"
  }), "ViewHeadline");
  var GridTableRowsIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"
  }), "TableRows");
  var GridViewStreamIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M4 18h17v-6H4v6zM4 5v6h17V5H4z"
  }), "ViewStream");
  var GridTripleDotsVerticalIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "TripleDotsVertical");
  var GridCloseIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");
  var GridAddIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), "Add");
  var GridRemoveIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M19 13H5v-2h14v2z"
  }), "Remove");
  var GridLoadIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"
  }), "Load");
  var GridDragIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "Drag");
  var GridSaveAltIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"
  }), "SaveAlt");
  var GridCheckIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
  }), "Check");
  var GridMoreVertIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", {
    d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "MoreVert");

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputValue.js
  var React113 = __toModule(require_react());
  var import_prop_types69 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/filterPanelUtils.js
  function getValueFromOption(option) {
    if (typeof option === "object" && option !== null) {
      return option.value;
    }
    return option;
  }
  function getValueFromValueOptions(value, valueOptions) {
    if (valueOptions === void 0) {
      return void 0;
    }
    const result = valueOptions.find((option) => {
      const optionValue = getValueFromOption(option);
      return String(optionValue) === String(value);
    });
    return getValueFromOption(result);
  }

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputValue.js
  var import_jsx_runtime104 = __toModule(require_jsx_runtime());
  var _excluded65 = ["item", "applyValue", "type", "apiRef", "focusElementRef"];
  var warnedOnce = {};
  function warnDeprecatedTypeSupport(type) {
    console.warn([`MUI: Using GridFilterInputValue with a "${type}" column is deprecated.`, "Use GridFilterInputSingleSelect instead."].join("\n"));
    warnedOnce[type] = true;
  }
  var renderSingleSelectOptions = ({
    valueOptions,
    valueFormatter,
    field
  }, api, OptionComponent) => {
    const iterableColumnValues = typeof valueOptions === "function" ? ["", ...valueOptions({
      field
    })] : ["", ...valueOptions || []];
    return iterableColumnValues.map((option) => {
      const isOptionTypeObject = typeof option === "object";
      const key = isOptionTypeObject ? option.value : option;
      const value = isOptionTypeObject ? option.value : option;
      const formattedValue = valueFormatter && option !== "" ? valueFormatter({
        value: option,
        field,
        api
      }) : option;
      const content = isOptionTypeObject ? option.label : formattedValue;
      return /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(OptionComponent, {
        value,
        children: content
      }, key);
    });
  };
  var SUBMIT_FILTER_STROKE_TIME = 500;
  function GridFilterInputValue(props) {
    var _item$value, _rootProps$components, _baseSelectProps$nati, _rootProps$components2, _rootProps$components3;
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef
    } = props, others = _objectWithoutPropertiesLoose(props, _excluded65);
    if (["date", "datetime-local", "singleSelect"].includes(type) && !warnedOnce[type]) {
      warnDeprecatedTypeSupport(type);
    }
    const filterTimeout = React113.useRef();
    const [filterValueState, setFilterValueState] = React113.useState((_item$value = item.value) != null ? _item$value : "");
    const [applying, setIsApplying] = React113.useState(false);
    const id = useId_default();
    const rootProps = useGridRootProps();
    const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};
    const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
    const singleSelectProps = type === "singleSelect" ? {
      select: true,
      SelectProps: _extends({
        native: isSelectNative
      }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect),
      children: renderSingleSelectOptions(apiRef.current.getColumn(item.columnField), apiRef.current, isSelectNative ? "option" : MenuItem_default)
    } : {};
    const onFilterChange = React113.useCallback((event) => {
      let value = event.target.value;
      if (type === "singleSelect") {
        const column2 = apiRef.current.getColumn(item.columnField);
        const columnValueOptions = typeof column2.valueOptions === "function" ? column2.valueOptions({
          field: column2.field
        }) : column2.valueOptions;
        value = getValueFromValueOptions(value, columnValueOptions);
      }
      clearTimeout(filterTimeout.current);
      setFilterValueState(String(value));
      setIsApplying(true);
      filterTimeout.current = setTimeout(() => {
        applyValue(_extends({}, item, {
          value
        }));
        setIsApplying(false);
      }, SUBMIT_FILTER_STROKE_TIME);
    }, [apiRef, applyValue, item, type]);
    React113.useEffect(() => {
      return () => {
        clearTimeout(filterTimeout.current);
      };
    }, []);
    React113.useEffect(() => {
      var _item$value2;
      const itemValue = (_item$value2 = item.value) != null ? _item$value2 : "";
      setFilterValueState(String(itemValue));
    }, [item.value]);
    const InputProps = applying ? {
      endAdornment: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(GridLoadIcon, {})
    } : others.InputProps;
    return /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(rootProps.components.BaseTextField, _extends({
      id,
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
      value: filterValueState,
      onChange: onFilterChange,
      type: type || "text",
      variant: "standard",
      InputProps,
      InputLabelProps: {
        shrink: true
      },
      inputRef: focusElementRef
    }, singleSelectProps, others, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseTextField));
  }
  true ? GridFilterInputValue.propTypes = {
    apiRef: import_prop_types69.default.any.isRequired,
    applyValue: import_prop_types69.default.func.isRequired,
    focusElementRef: import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object]),
    item: import_prop_types69.default.shape({
      columnField: import_prop_types69.default.string.isRequired,
      id: import_prop_types69.default.oneOfType([import_prop_types69.default.number, import_prop_types69.default.string]),
      operatorValue: import_prop_types69.default.string,
      value: import_prop_types69.default.any
    }).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/cell/GridEditInputCell.js
  var import_jsx_runtime105 = __toModule(require_jsx_runtime());
  var _excluded66 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "getValue", "isValidating", "debounceMs", "isProcessingProps"];
  var useUtilityClasses43 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["editInputCell"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridEditInputCellRoot = styled_default(InputBase_default, {
    name: "MuiDataGrid",
    slot: "EditInputCell",
    overridesResolver: (props, styles4) => styles4.editInputCell
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    padding: "1px 0",
    "& input": {
      padding: "0 16px",
      height: "100%"
    }
  }));
  function GridEditInputCell(props) {
    var _rootProps$experiment;
    const rootProps = useGridRootProps();
    const {
      id,
      value,
      api,
      field,
      colDef,
      hasFocus,
      debounceMs = (_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.newEditingApi ? 200 : SUBMIT_FILTER_STROKE_TIME,
      isProcessingProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded66);
    const inputRef = React114.useRef();
    const [valueState, setValueState] = React114.useState(value);
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses43(ownerState);
    const handleChange = React114.useCallback((event) => {
      const newValue = event.target.value;
      setValueState(newValue);
      api.setEditCellValue({
        id,
        field,
        value: newValue,
        debounceMs
      }, event);
    }, [api, debounceMs, field, id]);
    React114.useEffect(() => {
      setValueState(value);
    }, [value]);
    useEnhancedEffect_default2(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(GridEditInputCellRoot, _extends({
      inputRef,
      className: classes.root,
      fullWidth: true,
      type: colDef.type === "number" ? colDef.type : "text",
      value: valueState != null ? valueState : "",
      onChange: handleChange,
      endAdornment: isProcessingProps ? /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(GridLoadIcon, {}) : void 0
    }, other));
  }
  true ? GridEditInputCell.propTypes = {
    api: import_prop_types70.default.any.isRequired,
    cellMode: import_prop_types70.default.oneOf(["edit", "view"]).isRequired,
    colDef: import_prop_types70.default.object.isRequired,
    debounceMs: import_prop_types70.default.number,
    field: import_prop_types70.default.string.isRequired,
    formattedValue: import_prop_types70.default.any,
    getValue: import_prop_types70.default.func.isRequired,
    hasFocus: import_prop_types70.default.bool.isRequired,
    id: import_prop_types70.default.oneOfType([import_prop_types70.default.number, import_prop_types70.default.string]).isRequired,
    isEditable: import_prop_types70.default.bool,
    isProcessingProps: import_prop_types70.default.bool,
    isValidating: import_prop_types70.default.bool,
    row: import_prop_types70.default.object.isRequired,
    rowNode: import_prop_types70.default.object.isRequired
  } : void 0;
  var renderEditInputCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(GridEditInputCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js
  var React115 = __toModule(require_react());
  var import_prop_types71 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/utils/keyboardUtils.js
  var isEscapeKey = (key) => key === "Escape";
  var isEnterKey = (key) => key === "Enter";
  var isTabKey = (key) => key === "Tab";
  var isSpaceKey = (key) => key === " ";
  var isArrowKeys = (key) => key.indexOf("Arrow") === 0;
  var isHomeOrEndKeys = (key) => key === "Home" || key === "End";
  var isPageKeys = (key) => key.indexOf("Page") === 0;
  var isDeleteKeys = (key) => key === "Delete" || key === "Backspace";
  var printableCharRegex = /^(\p{L}|\p{M}\p{L}|\p{M}|\p{N}|\p{Z}|\p{S}|\p{P})$/iu;
  var isPrintableKey = (key) => printableCharRegex.test(key);
  var GRID_CELL_EXIT_EDIT_MODE_KEYS = ["Enter", "Escape", "Tab"];
  var GRID_CELL_EDIT_COMMIT_KEYS = ["Enter", "Tab"];
  var isCellEnterEditModeKeys = (key) => isEnterKey(key) || isDeleteKeys(key) || isPrintableKey(key);
  var isCellExitEditModeKeys = (key) => GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;
  var isCellEditCommitKeys = (key) => GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;
  var isNavigationKey = (key) => isHomeOrEndKeys(key) || isArrowKeys(key) || isPageKeys(key) || isSpaceKey(key);
  var isKeyboardEvent = (event) => !!event.key;
  var isHideMenuKey = (key) => isTabKey(key) || isEscapeKey(key);

  // node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js
  var import_jsx_runtime106 = __toModule(require_jsx_runtime());
  var _excluded67 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "getValue", "hasFocus", "isValidating", "isProcessingProps", "error"];
  var renderSingleSelectOptions2 = (option, OptionComponent) => {
    const isOptionTypeObject = typeof option === "object";
    const key = isOptionTypeObject ? option.value : option;
    const value = isOptionTypeObject ? option.value : option;
    const content = isOptionTypeObject ? option.label : option;
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(OptionComponent, {
      value,
      children: content
    }, key);
  };
  function GridEditSingleSelectCell(props) {
    var _rootProps$components, _baseSelectProps$nati, _rootProps$components2;
    const {
      id,
      value,
      api,
      field,
      row,
      colDef,
      hasFocus,
      error
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded67);
    const ref = React115.useRef();
    const inputRef = React115.useRef();
    const rootProps = useGridRootProps();
    const [open, setOpen] = React115.useState(rootProps.editMode === "cell");
    const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};
    const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : false;
    let valueOptionsFormatted;
    if (typeof colDef.valueOptions === "function") {
      valueOptionsFormatted = colDef.valueOptions({
        id,
        row,
        field
      });
    } else {
      valueOptionsFormatted = colDef.valueOptions;
    }
    if (colDef.valueFormatter) {
      valueOptionsFormatted = valueOptionsFormatted.map((option) => {
        if (typeof option === "object") {
          return option;
        }
        const params = {
          field,
          api,
          value: option
        };
        return {
          value: option,
          label: String(colDef.valueFormatter(params))
        };
      });
    }
    const handleChange = async (event) => {
      var _rootProps$experiment;
      setOpen(false);
      const target = event.target;
      const formattedTargetValue = getValueFromValueOptions(target.value, valueOptionsFormatted);
      const isValid = await api.setEditCellValue({
        id,
        field,
        value: formattedTargetValue
      }, event);
      if ((_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.newEditingApi) {
        return;
      }
      if (rootProps.editMode === GridEditModes.Row || isValid === false) {
        return;
      }
      const canCommit = await Promise.resolve(api.commitCellChange({
        id,
        field
      }, event));
      if (canCommit) {
        api.setCellMode(id, field, "view");
        if (event.key) {
          const params = api.getCellParams(id, field);
          api.publishEvent(GridEvents.cellNavigationKeyDown, params, event);
        }
      }
    };
    const handleClose = (event, reason) => {
      if (rootProps.editMode === GridEditModes.Row) {
        setOpen(false);
        return;
      }
      if (reason === "backdropClick" || isEscapeKey(event.key)) {
        var _rootProps$experiment2;
        if ((_rootProps$experiment2 = rootProps.experimentalFeatures) != null && _rootProps$experiment2.newEditingApi) {
          api.stopCellEditMode({
            id,
            field,
            ignoreModifications: true
          });
        } else {
          api.setCellMode(id, field, "view");
        }
      }
    };
    const handleOpen = () => {
      setOpen(true);
    };
    useEnhancedEffect_default2(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(rootProps.components.BaseSelect, _extends({
      ref,
      inputRef,
      value,
      onChange: handleChange,
      open,
      onOpen: handleOpen,
      MenuProps: {
        onClose: handleClose
      },
      error,
      native: isSelectNative,
      fullWidth: true
    }, other, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect, {
      children: valueOptionsFormatted.map((valueOptions) => renderSingleSelectOptions2(valueOptions, isSelectNative ? "option" : MenuItem_default))
    }));
  }
  true ? GridEditSingleSelectCell.propTypes = {
    api: import_prop_types71.default.any.isRequired,
    cellMode: import_prop_types71.default.oneOf(["edit", "view"]).isRequired,
    colDef: import_prop_types71.default.object.isRequired,
    field: import_prop_types71.default.string.isRequired,
    formattedValue: import_prop_types71.default.any,
    getValue: import_prop_types71.default.func.isRequired,
    hasFocus: import_prop_types71.default.bool.isRequired,
    id: import_prop_types71.default.oneOfType([import_prop_types71.default.number, import_prop_types71.default.string]).isRequired,
    isEditable: import_prop_types71.default.bool,
    isProcessingProps: import_prop_types71.default.bool,
    isValidating: import_prop_types71.default.bool,
    row: import_prop_types71.default.object.isRequired,
    rowNode: import_prop_types71.default.object.isRequired
  } : void 0;
  var renderEditSingleSelectCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(GridEditSingleSelectCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridActionsCell.js
  var React117 = __toModule(require_react());
  var import_prop_types73 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/components/menu/GridMenu.js
  var React116 = __toModule(require_react());
  var import_prop_types72 = __toModule(require_prop_types());
  var import_jsx_runtime107 = __toModule(require_jsx_runtime());
  var _excluded68 = ["open", "target", "onClickAway", "children", "position", "className", "onExited"];
  var useUtilityClasses44 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["menu"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridMenuRoot = styled_default(Popper_default, {
    name: "MuiDataGrid",
    slot: "Menu",
    overridesResolver: (props, styles4) => styles4.menu
  })(({
    theme
  }) => ({
    zIndex: theme.zIndex.modal,
    [`& .${gridClasses2.menuList}`]: {
      outline: 0
    }
  }));
  var transformOrigin = {
    "bottom-start": "top left",
    "bottom-end": "top right"
  };
  var GridMenu = (props) => {
    var _rootProps$components;
    const {
      open,
      target,
      onClickAway,
      children,
      position: position3,
      className,
      onExited
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded68);
    const prevTarget = React116.useRef(target);
    const prevOpen = React116.useRef(open);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses44(ownerState);
    React116.useEffect(() => {
      if (prevOpen.current && prevTarget.current) {
        prevTarget.current.focus();
      }
      prevOpen.current = open;
      prevTarget.current = target;
    }, [open, target]);
    const handleExited = (popperOnExited) => (node2) => {
      if (popperOnExited) {
        popperOnExited();
      }
      if (onExited) {
        onExited(node2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(GridMenuRoot, _extends({
      as: rootProps.components.BasePopper,
      className: clsx_m_default(className, classes.root),
      open,
      anchorEl: target,
      transition: true,
      placement: position3
    }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.basePopper, {
      children: ({
        TransitionProps,
        placement
      }) => /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(ClickAwayListener_default, {
        onClickAway,
        mouseEvent: "onMouseDown",
        children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(Grow_default, _extends({}, TransitionProps, {
          style: {
            transformOrigin: transformOrigin[placement]
          },
          onExited: handleExited(TransitionProps == null ? void 0 : TransitionProps.onExited),
          children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(Paper_default, {
            children
          })
        }))
      })
    }));
  };
  true ? GridMenu.propTypes = {
    onClickAway: import_prop_types72.default.func.isRequired,
    onExited: import_prop_types72.default.func,
    open: import_prop_types72.default.bool.isRequired,
    position: import_prop_types72.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    target: HTMLElementType
  } : void 0;

  // node_modules/@mui/x-data-grid/components/cell/GridActionsCell.js
  var import_jsx_runtime108 = __toModule(require_jsx_runtime());
  var import_jsx_runtime109 = __toModule(require_jsx_runtime());
  var _excluded69 = ["colDef", "id", "api", "hasFocus", "isEditable", "field", "value", "formattedValue", "row", "rowNode", "cellMode", "getValue", "tabIndex", "position", "focusElementRef"];
  var hasActions = (colDef) => typeof colDef.getActions === "function";
  var GridActionsCell = (props) => {
    const {
      colDef,
      id,
      hasFocus,
      tabIndex,
      position: position3 = "bottom-end",
      focusElementRef
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded69);
    const [focusedButtonIndex, setFocusedButtonIndex] = React117.useState(-1);
    const [open, setOpen] = React117.useState(false);
    const apiRef = useGridApiContext();
    const rootRef = React117.useRef(null);
    const buttonRef = React117.useRef(null);
    const ignoreCallToFocus = React117.useRef(false);
    const touchRippleRefs = React117.useRef({});
    const menuId = useId_default();
    const buttonId = useId_default();
    const rootProps = useGridRootProps();
    React117.useLayoutEffect(() => {
      if (!hasFocus) {
        Object.entries(touchRippleRefs.current).forEach(([index, ref]) => {
          ref == null ? void 0 : ref.stop({}, () => {
            delete touchRippleRefs.current[index];
          });
        });
      }
    }, [hasFocus]);
    React117.useEffect(() => {
      if (focusedButtonIndex >= 0) {
        var _rootRef$current;
        const child = (_rootRef$current = rootRef.current) == null ? void 0 : _rootRef$current.children[focusedButtonIndex];
        child.focus();
      }
    }, [focusedButtonIndex]);
    React117.useEffect(() => {
      if (!hasFocus) {
        setFocusedButtonIndex(-1);
        ignoreCallToFocus.current = false;
      }
    }, [hasFocus]);
    React117.useImperativeHandle(focusElementRef, () => ({
      focus() {
        if (!ignoreCallToFocus.current) {
          setFocusedButtonIndex(0);
        }
      }
    }), []);
    if (!hasActions(colDef)) {
      throw new Error("MUI: Missing the `getActions` property in the `GridColDef`.");
    }
    const options = colDef.getActions(apiRef.current.getRowParams(id));
    const iconButtons = options.filter((option) => !option.props.showInMenu);
    const menuButtons = options.filter((option) => option.props.showInMenu);
    const numberOfButtons = iconButtons.length + (menuButtons.length ? 1 : 0);
    const showMenu = () => {
      setOpen(true);
      setFocusedButtonIndex(numberOfButtons - 1);
      ignoreCallToFocus.current = true;
    };
    const hideMenu = () => {
      setOpen(false);
    };
    const handleTouchRippleRef = (index) => (instance) => {
      touchRippleRefs.current[index] = instance;
    };
    const handleButtonClick = (index, onClick) => (event) => {
      setFocusedButtonIndex(index);
      ignoreCallToFocus.current = true;
      if (onClick) {
        onClick(event);
      }
    };
    const handleRootKeyDown = (event) => {
      if (numberOfButtons <= 1) {
        return;
      }
      let newIndex = focusedButtonIndex;
      if (event.key === "ArrowRight") {
        newIndex += 1;
      } else if (event.key === "ArrowLeft") {
        newIndex -= 1;
      }
      if (newIndex < 0 || newIndex >= numberOfButtons) {
        return;
      }
      if (newIndex !== focusedButtonIndex) {
        event.preventDefault();
        event.stopPropagation();
        setFocusedButtonIndex(newIndex);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
      }
      if (["Tab", "Enter", "Escape"].includes(event.key)) {
        hideMenu();
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", _extends({
      role: "menu",
      ref: rootRef,
      tabIndex: -1,
      className: gridClasses2.actionsCell,
      onKeyDown: handleRootKeyDown
    }, other, {
      children: [iconButtons.map((button, index) => /* @__PURE__ */ React117.cloneElement(button, {
        key: index,
        touchRippleRef: handleTouchRippleRef(index),
        onClick: handleButtonClick(index, button.props.onClick),
        tabIndex: focusedButtonIndex === index ? tabIndex : -1
      })), menuButtons.length > 0 && buttonId && /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(IconButton_default, {
        ref: buttonRef,
        id: buttonId,
        "aria-label": apiRef.current.getLocaleText("actionsCellMore"),
        "aria-controls": menuId,
        "aria-expanded": open ? "true" : void 0,
        "aria-haspopup": "true",
        role: "menuitem",
        size: "small",
        onClick: showMenu,
        touchRippleRef: handleTouchRippleRef(buttonId),
        tabIndex: focusedButtonIndex === iconButtons.length ? tabIndex : -1,
        children: /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(rootProps.components.MoreActionsIcon, {
          fontSize: "small"
        })
      }), menuButtons.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(GridMenu, {
        onClickAway: hideMenu,
        onClick: hideMenu,
        open,
        target: buttonRef.current,
        position: position3,
        children: /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(MenuList_default, {
          id: menuId,
          className: gridClasses2.menuList,
          onKeyDown: handleListKeyDown,
          "aria-labelledby": buttonId,
          variant: "menu",
          autoFocusItem: true,
          children: menuButtons.map((button, index) => /* @__PURE__ */ React117.cloneElement(button, {
            key: index
          }))
        })
      })]
    }));
  };
  true ? GridActionsCell.propTypes = {
    api: import_prop_types73.default.any.isRequired,
    cellMode: import_prop_types73.default.oneOf(["edit", "view"]).isRequired,
    colDef: import_prop_types73.default.object.isRequired,
    field: import_prop_types73.default.string.isRequired,
    focusElementRef: import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.shape({
      current: import_prop_types73.default.shape({
        focus: import_prop_types73.default.func.isRequired
      })
    })]),
    formattedValue: import_prop_types73.default.any,
    getValue: import_prop_types73.default.func.isRequired,
    hasFocus: import_prop_types73.default.bool.isRequired,
    id: import_prop_types73.default.oneOfType([import_prop_types73.default.number, import_prop_types73.default.string]).isRequired,
    isEditable: import_prop_types73.default.bool,
    position: import_prop_types73.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    row: import_prop_types73.default.object.isRequired,
    rowNode: import_prop_types73.default.object.isRequired,
    tabIndex: import_prop_types73.default.oneOf([-1, 0]).isRequired,
    value: import_prop_types73.default.any
  } : void 0;
  var renderActionsCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(GridActionsCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/containers/GridRoot.js
  var React118 = __toModule(require_react());
  var import_prop_types74 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/components/containers/GridRootStyles.js
  var GridRootStyles = styled_default("div", {
    name: "MuiDataGrid",
    slot: "Root",
    overridesResolver: (props, styles4) => [
      {
        [`&.${gridClasses2.autoHeight}`]: styles4.autoHeight
      },
      {
        [`& .${gridClasses2.editBooleanCell}`]: styles4.editBooleanCell
      },
      {
        [`& .${gridClasses2["cell--editing"]}`]: styles4["cell--editing"]
      },
      {
        [`& .${gridClasses2["cell--textCenter"]}`]: styles4["cell--textCenter"]
      },
      {
        [`& .${gridClasses2["cell--textLeft"]}`]: styles4["cell--textLeft"]
      },
      {
        [`& .${gridClasses2["cell--textRight"]}`]: styles4["cell--textRight"]
      },
      {
        [`& .${gridClasses2["cell--withRenderer"]}`]: styles4["cell--withRenderer"]
      },
      {
        [`& .${gridClasses2.cell}`]: styles4.cell
      },
      {
        [`& .${gridClasses2.cellContent}`]: styles4.cellContent
      },
      {
        [`& .${gridClasses2.cellCheckbox}`]: styles4.cellCheckbox
      },
      {
        [`& .${gridClasses2.checkboxInput}`]: styles4.checkboxInput
      },
      {
        [`& .${gridClasses2["columnHeader--alignCenter"]}`]: styles4["columnHeader--alignCenter"]
      },
      {
        [`& .${gridClasses2["columnHeader--alignLeft"]}`]: styles4["columnHeader--alignLeft"]
      },
      {
        [`& .${gridClasses2["columnHeader--alignRight"]}`]: styles4["columnHeader--alignRight"]
      },
      {
        [`& .${gridClasses2["columnHeader--dragging"]}`]: styles4["columnHeader--dragging"]
      },
      {
        [`& .${gridClasses2["columnHeader--moving"]}`]: styles4["columnHeader--moving"]
      },
      {
        [`& .${gridClasses2["columnHeader--numeric"]}`]: styles4["columnHeader--numeric"]
      },
      {
        [`& .${gridClasses2["columnHeader--sortable"]}`]: styles4["columnHeader--sortable"]
      },
      {
        [`& .${gridClasses2["columnHeader--sorted"]}`]: styles4["columnHeader--sorted"]
      },
      {
        [`& .${gridClasses2.columnHeader}`]: styles4.columnHeader
      },
      {
        [`& .${gridClasses2.columnHeaderCheckbox}`]: styles4.columnHeaderCheckbox
      },
      {
        [`& .${gridClasses2.columnHeaderDraggableContainer}`]: styles4.columnHeaderDraggableContainer
      },
      {
        [`& .${gridClasses2.columnHeaderTitleContainer}`]: styles4.columnHeaderTitleContainer
      },
      {
        [`& .${gridClasses2["columnSeparator--resizable"]}`]: styles4["columnSeparator--resizable"]
      },
      {
        [`& .${gridClasses2["columnSeparator--resizing"]}`]: styles4["columnSeparator--resizing"]
      },
      {
        [`& .${gridClasses2.columnSeparator}`]: styles4.columnSeparator
      },
      {
        [`& .${gridClasses2.filterIcon}`]: styles4.filterIcon
      },
      {
        [`& .${gridClasses2.iconSeparator}`]: styles4.iconSeparator
      },
      {
        [`& .${gridClasses2.menuIcon}`]: styles4.menuIcon
      },
      {
        [`& .${gridClasses2.menuIconButton}`]: styles4.menuIconButton
      },
      {
        [`& .${gridClasses2.menuOpen}`]: styles4.menuOpen
      },
      {
        [`& .${gridClasses2.menuList}`]: styles4.menuList
      },
      {
        [`& .${gridClasses2["row--editable"]}`]: styles4["row--editable"]
      },
      {
        [`& .${gridClasses2["row--editing"]}`]: styles4["row--editing"]
      },
      {
        [`& .${gridClasses2["row--dragging"]}`]: styles4["row--dragging"]
      },
      {
        [`& .${gridClasses2.row}`]: styles4.row
      },
      {
        [`& .${gridClasses2.rowReorderCellPlaceholder}`]: styles4.rowReorderCellPlaceholder
      },
      {
        [`& .${gridClasses2.rowReorderCell}`]: styles4.rowReorderCell
      },
      {
        [`& .${gridClasses2["rowReorderCell--draggable"]}`]: styles4["rowReorderCell--draggable"]
      },
      {
        [`& .${gridClasses2.sortIcon}`]: styles4.sortIcon
      },
      {
        [`& .${gridClasses2.withBorder}`]: styles4.withBorder
      },
      {
        [`& .${gridClasses2.treeDataGroupingCell}`]: styles4.treeDataGroupingCell
      },
      {
        [`& .${gridClasses2.treeDataGroupingCellToggle}`]: styles4.treeDataGroupingCellToggle
      },
      {
        [`& .${gridClasses2.detailPanelToggleCell}`]: styles4.detailPanelToggleCell
      },
      {
        [`& .${gridClasses2["detailPanelToggleCell--expanded"]}`]: styles4["detailPanelToggleCell--expanded"]
      },
      styles4.root
    ]
  })(({
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68);
    const gridStyle = _extends({
      flex: 1,
      boxSizing: "border-box",
      position: "relative",
      border: `1px solid ${borderColor2}`,
      borderRadius: theme.shape.borderRadius,
      color: theme.palette.text.primary
    }, theme.typography.body2, {
      outline: "none",
      height: "100%",
      display: "flex",
      flexDirection: "column",
      [`&.${gridClasses2.autoHeight}`]: {
        height: "auto",
        [`& .${gridClasses2["row--lastVisible"]} .${gridClasses2.cell}`]: {
          borderBottomColor: "transparent"
        }
      },
      [`& .${gridClasses2["virtualScrollerContent--overflowed"]} .${gridClasses2["row--lastVisible"]} .${gridClasses2.cell}`]: {
        borderBottomColor: "transparent"
      },
      [`& .${gridClasses2.columnHeader}, & .${gridClasses2.cell}`]: {
        WebkitTapHighlightColor: "transparent",
        lineHeight: null,
        padding: "0 10px",
        boxSizing: "border-box"
      },
      [`& .${gridClasses2.columnHeader}:focus-within, & .${gridClasses2.cell}:focus-within`]: {
        outline: `solid ${alpha(theme.palette.primary.main, 0.5)} 1px`,
        outlineWidth: 1,
        outlineOffset: -1
      },
      [`& .${gridClasses2.columnHeader}:focus, & .${gridClasses2.cell}:focus`]: {
        outline: `solid ${theme.palette.primary.main} 1px`
      },
      [`& .${gridClasses2.columnHeaderCheckbox}, & .${gridClasses2.cellCheckbox}`]: {
        padding: 0,
        justifyContent: "center",
        alignItems: "center"
      },
      [`& .${gridClasses2.columnHeader}`]: {
        position: "relative",
        display: "flex",
        alignItems: "center"
      },
      [`& .${gridClasses2["columnHeader--sorted"]} .${gridClasses2.iconButtonContainer}, & .${gridClasses2["columnHeader--filtered"]} .${gridClasses2.iconButtonContainer}`]: {
        visibility: "visible",
        width: "auto"
      },
      [`& .${gridClasses2.columnHeader}:not(.${gridClasses2["columnHeader--sorted"]}) .${gridClasses2.sortIcon}`]: {
        opacity: 0,
        transition: theme.transitions.create(["opacity"], {
          duration: theme.transitions.duration.shorter
        })
      },
      [`& .${gridClasses2.columnHeader}:not(.${gridClasses2["columnHeader--sorted"]}):hover .${gridClasses2.sortIcon}`]: {
        opacity: 0.5
      },
      [`& .${gridClasses2.columnHeaderTitleContainer}`]: {
        display: "flex",
        alignItems: "center",
        minWidth: 0,
        flex: 1,
        whiteSpace: "nowrap",
        overflow: "hidden"
      },
      [`& .${gridClasses2.columnHeaderTitleContainerContent}`]: {
        overflow: "hidden",
        display: "flex",
        alignItems: "center"
      },
      [`& .${gridClasses2.sortIcon}, & .${gridClasses2.filterIcon}`]: {
        fontSize: "inherit"
      },
      [`& .${gridClasses2["columnHeader--sortable"]}`]: {
        cursor: "pointer"
      },
      [`& .${gridClasses2["columnHeader--alignCenter"]} .${gridClasses2.columnHeaderTitleContainer}`]: {
        justifyContent: "center"
      },
      [`& .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.columnHeaderDraggableContainer}, & .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.columnHeaderTitleContainer}`]: {
        flexDirection: "row-reverse"
      },
      [`& .${gridClasses2["columnHeader--alignCenter"]} .${gridClasses2.menuIcon}, & .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.menuIcon}`]: {
        marginRight: "auto",
        marginLeft: -6
      },
      [`& .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.menuIcon}, & .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.menuIcon}`]: {
        marginRight: "auto",
        marginLeft: -10
      },
      [`& .${gridClasses2["columnHeader--moving"]}`]: {
        backgroundColor: theme.palette.action.hover
      },
      [`& .${gridClasses2.columnSeparator}`]: {
        position: "absolute",
        zIndex: 100,
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        color: borderColor2
      },
      [`& .${gridClasses2["columnSeparator--sideLeft"]}`]: {
        left: -12
      },
      [`& .${gridClasses2["columnSeparator--sideRight"]}`]: {
        right: -12
      },
      [`& .${gridClasses2["columnSeparator--resizable"]}`]: {
        cursor: "col-resize",
        touchAction: "none",
        "&:hover": {
          color: theme.palette.text.primary,
          "@media (hover: none)": {
            color: borderColor2
          }
        },
        [`&.${gridClasses2["columnSeparator--resizing"]}`]: {
          color: theme.palette.text.primary
        }
      },
      [`& .${gridClasses2.iconSeparator}`]: {
        color: "inherit"
      },
      [`& .${gridClasses2.menuIcon}`]: {
        width: 0,
        visibility: "hidden",
        fontSize: 20,
        marginRight: -10,
        display: "flex",
        alignItems: "center"
      },
      [`& .${gridClasses2.columnHeader}:hover`]: {
        [`& .${gridClasses2.iconButtonContainer}`]: {
          visibility: "visible",
          width: "auto"
        },
        [`& .${gridClasses2.menuIcon}`]: {
          width: "auto",
          visibility: "visible"
        }
      },
      [`.${gridClasses2.menuOpen}`]: {
        visibility: "visible",
        width: "auto"
      },
      [`& .${gridClasses2.row}`]: {
        display: "flex",
        width: "fit-content",
        breakInside: "avoid",
        "&:hover, &.Mui-hovered": {
          backgroundColor: theme.palette.action.hover,
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&.Mui-selected": {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
          "&:hover, &.Mui-hovered": {
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
            }
          }
        }
      },
      [`& .${gridClasses2.cell}`]: {
        display: "flex",
        alignItems: "center",
        overflow: "hidden",
        whiteSpace: "nowrap",
        borderBottom: `1px solid ${borderColor2}`
      },
      [`& .${gridClasses2.cellContent}`]: {
        overflow: "hidden",
        textOverflow: "ellipsis"
      },
      [`& .${gridClasses2.cell}.${gridClasses2["cell--editing"]}`]: {
        padding: 1,
        display: "flex",
        boxShadow: theme.shadows[2],
        backgroundColor: theme.palette.background.paper,
        "&:focus-within": {
          outline: `solid ${theme.palette.primary.main} 1px`,
          outlineOffset: "-1px"
        }
      },
      [`& .${gridClasses2["row--editing"]}`]: {
        boxShadow: theme.shadows[2]
      },
      [`& .${gridClasses2["row--editing"]} .${gridClasses2.cell}`]: {
        boxShadow: theme.shadows[0],
        backgroundColor: theme.palette.background.paper
      },
      [`& .${gridClasses2.editBooleanCell}`]: {
        display: "flex",
        height: "100%",
        width: "100%",
        alignItems: "center",
        justifyContent: "center"
      },
      [`& .${gridClasses2.booleanCell}[data-value="true"]`]: {
        color: theme.palette.text.secondary
      },
      [`& .${gridClasses2.booleanCell}[data-value="false"]`]: {
        color: theme.palette.text.disabled
      },
      [`& .${gridClasses2.actionsCell}`]: {
        display: "inline-flex",
        alignItems: "center",
        gridGap: theme.spacing(1)
      },
      [`& .${gridClasses2.rowReorderCell}`]: {
        display: "inline-flex",
        flex: 1,
        alignItems: "center",
        justifyContent: "center",
        opacity: theme.palette.action.disabledOpacity
      },
      [`& .${gridClasses2["rowReorderCell--draggable"]}`]: {
        cursor: "move",
        opacity: 1
      },
      [`& .${gridClasses2.rowReorderCellContainer}`]: {
        padding: 0,
        alignItems: "stretch"
      },
      [`& .${gridClasses2.withBorder}`]: {
        borderRight: `1px solid ${borderColor2}`
      },
      [`& .${gridClasses2["cell--textLeft"]}`]: {
        justifyContent: "flex-start"
      },
      [`& .${gridClasses2["cell--textRight"]}`]: {
        justifyContent: "flex-end"
      },
      [`& .${gridClasses2["cell--textCenter"]}`]: {
        justifyContent: "center"
      },
      [`& .${gridClasses2.columnHeaderDraggableContainer}`]: {
        display: "flex",
        width: "100%"
      },
      [`& .${gridClasses2.rowReorderCellPlaceholder}`]: {
        display: "none"
      },
      [`& .${gridClasses2["columnHeader--dragging"]}, & .${gridClasses2["row--dragging"]}`]: {
        background: theme.palette.background.paper,
        padding: "0 12px",
        borderRadius: theme.shape.borderRadius,
        opacity: theme.palette.action.disabledOpacity
      },
      [`& .${gridClasses2["row--dragging"]}`]: {
        background: theme.palette.background.paper,
        padding: "0 12px",
        borderRadius: theme.shape.borderRadius,
        opacity: theme.palette.action.disabledOpacity,
        [`& .${gridClasses2.rowReorderCellPlaceholder}`]: {
          display: "flex"
        }
      },
      [`& .${gridClasses2.treeDataGroupingCell}`]: {
        display: "flex",
        alignItems: "center",
        width: "100%"
      },
      [`& .${gridClasses2.treeDataGroupingCellToggle}`]: {
        flex: "0 0 28px",
        alignSelf: "stretch",
        marginRight: theme.spacing(2)
      },
      [`& .${gridClasses2.groupingCriteriaCell}`]: {
        display: "flex",
        alignItems: "center",
        width: "100%"
      },
      [`& .${gridClasses2.groupingCriteriaCellToggle}`]: {
        flex: "0 0 28px",
        alignSelf: "stretch",
        marginRight: theme.spacing(2)
      }
    });
    return gridStyle;
  });

  // node_modules/@mui/x-data-grid/components/containers/GridRoot.js
  var import_jsx_runtime110 = __toModule(require_jsx_runtime());
  var _excluded70 = ["children", "className"];
  var GridRoot2 = /* @__PURE__ */ React118.forwardRef(function GridRoot3(props, ref) {
    var _rootProps$classes;
    const rootProps = useGridRootProps();
    const {
      children,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded70);
    const apiRef = useGridApiContext();
    const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
    const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);
    const rootContainerRef = React118.useRef(null);
    const handleRef = useForkRef_default(rootContainerRef, ref);
    apiRef.current.rootElementRef = rootContainerRef;
    const [mountedState, setMountedState] = React118.useState(false);
    useEnhancedEffect_default2(() => {
      setMountedState(true);
    }, []);
    useEnhancedEffect_default2(() => {
      if (mountedState) {
        apiRef.current.unstable_updateGridDimensionsRef();
      }
    }, [apiRef, mountedState]);
    if (!mountedState) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(GridRootStyles, _extends({
      ref: handleRef,
      className: clsx_m_default(className, (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes.root, gridClasses2.root, rootProps.autoHeight && gridClasses2.autoHeight),
      role: "grid",
      "aria-colcount": visibleColumns.length,
      "aria-rowcount": totalRowCount,
      "aria-multiselectable": !rootProps.disableMultipleSelection,
      "aria-label": rootProps["aria-label"],
      "aria-labelledby": rootProps["aria-labelledby"]
    }, other, {
      children
    }));
  });
  true ? GridRoot2.propTypes = {
    sx: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.object, import_prop_types74.default.bool])), import_prop_types74.default.func, import_prop_types74.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/containers/GridFooterContainer.js
  var React119 = __toModule(require_react());
  var import_jsx_runtime111 = __toModule(require_jsx_runtime());
  var _excluded71 = ["className"];
  var useUtilityClasses45 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["footerContainer"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridFooterContainerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "FooterContainer",
    overridesResolver: (props, styles4) => styles4.footerContainer
  })(({
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68);
    return {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      minHeight: 52,
      borderTop: `1px solid ${borderColor2}`
    };
  });
  var GridFooterContainer = /* @__PURE__ */ React119.forwardRef(function GridFooterContainer2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded71);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses45(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(GridFooterContainerRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className)
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/containers/GridOverlay.js
  var React120 = __toModule(require_react());
  var import_prop_types75 = __toModule(require_prop_types());
  var import_jsx_runtime112 = __toModule(require_jsx_runtime());
  var _excluded72 = ["className"];
  var useUtilityClasses46 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["overlay"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridOverlayRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "Overlay",
    overridesResolver: (props, styles4) => styles4.overlay
  })(({
    theme
  }) => ({
    display: "flex",
    height: "100%",
    alignSelf: "center",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: alpha(theme.palette.background.default, theme.palette.action.disabledOpacity)
  }));
  var GridOverlay = /* @__PURE__ */ React120.forwardRef(function GridOverlay2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded72);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses46(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(GridOverlayRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className)
    }, other));
  });
  true ? GridOverlay.propTypes = {
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderItem.js
  var React127 = __toModule(require_react());
  var import_prop_types80 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSortIcon.js
  var React122 = __toModule(require_react());
  var import_prop_types76 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridIconButtonContainer.js
  var React121 = __toModule(require_react());
  var import_jsx_runtime113 = __toModule(require_jsx_runtime());
  var _excluded73 = ["className"];
  var useUtilityClasses47 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["iconButtonContainer"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridIconButtonContainerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "IconButtonContainer",
    overridesResolver: (props, styles4) => styles4.iconButtonContainer
  })(() => ({
    display: "flex",
    visibility: "hidden",
    width: 0
  }));
  var GridIconButtonContainer = /* @__PURE__ */ React121.forwardRef(function GridIconButtonContainer2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded73);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses47(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(GridIconButtonContainerRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className)
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSortIcon.js
  var import_jsx_runtime114 = __toModule(require_jsx_runtime());
  var import_jsx_runtime115 = __toModule(require_jsx_runtime());
  var useUtilityClasses48 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      icon: ["sortIcon"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function getIcon(icons, direction, className, sortingOrder) {
    let Icon;
    const iconProps = {};
    if (direction === "asc") {
      Icon = icons.ColumnSortedAscendingIcon;
    } else if (direction === "desc") {
      Icon = icons.ColumnSortedDescendingIcon;
    } else {
      Icon = icons.ColumnUnsortedIcon;
      iconProps.sortingOrder = sortingOrder;
    }
    return Icon ? /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(Icon, _extends({
      fontSize: "small",
      className
    }, iconProps)) : null;
  }
  function GridColumnHeaderSortIconRaw(props) {
    const {
      direction,
      index,
      sortingOrder
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses48(ownerState);
    const iconElement = getIcon(rootProps.components, direction, classes.icon, sortingOrder);
    if (!iconElement) {
      return null;
    }
    const iconButton = /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(IconButton_default, {
      tabIndex: -1,
      "aria-label": apiRef.current.getLocaleText("columnHeaderSortIconLabel"),
      title: apiRef.current.getLocaleText("columnHeaderSortIconLabel"),
      size: "small",
      children: iconElement
    });
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(GridIconButtonContainer, {
      children: [index != null && /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(Badge_default, {
        badgeContent: index,
        color: "default",
        children: iconButton
      }), index == null && iconButton]
    });
  }
  var GridColumnHeaderSortIcon = /* @__PURE__ */ React122.memo(GridColumnHeaderSortIconRaw);
  true ? GridColumnHeaderSortIconRaw.propTypes = {
    direction: import_prop_types76.default.oneOf(["asc", "desc"]),
    index: import_prop_types76.default.number,
    sortingOrder: import_prop_types76.default.arrayOf(import_prop_types76.default.oneOf(["asc", "desc"])).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderTitle.js
  var React123 = __toModule(require_react());
  var import_prop_types77 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/utils/domUtils.js
  function isOverflown(element) {
    return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
  }
  function findParentElementFromClassName(elem, className) {
    return elem.closest(`.${className}`);
  }
  function escapeOperandAttributeSelector(operand) {
    return operand.replace(/["\\]/g, "\\$&");
  }
  function getGridColumnHeaderElement(root, field) {
    return root.querySelector(`[role="columnheader"][data-field="${escapeOperandAttributeSelector(field)}"]`);
  }
  function getGridRowElement(root, id) {
    return root.querySelector(`.${gridClasses2.row}[data-id="${escapeOperandAttributeSelector(String(id))}"]`);
  }
  function getGridCellElement(root, {
    id,
    field
  }) {
    const row = getGridRowElement(root, id);
    if (!row) {
      return null;
    }
    return row.querySelector(`.${gridClasses2.cell}[data-field="${escapeOperandAttributeSelector(field)}"]`);
  }

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderTitle.js
  var import_jsx_runtime116 = __toModule(require_jsx_runtime());
  var _excluded74 = ["className"];
  var useUtilityClasses49 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["columnHeaderTitle"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridColumnHeaderTitleRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ColumnHeaderTitle",
    overridesResolver: (props, styles4) => styles4.columnHeaderTitle
  })(({
    theme
  }) => ({
    textOverflow: "ellipsis",
    overflow: "hidden",
    whiteSpace: "nowrap",
    fontWeight: theme.typography.fontWeightMedium
  }));
  var ColumnHeaderInnerTitle = /* @__PURE__ */ React123.forwardRef(function ColumnHeaderInnerTitle2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded74);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses49(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(GridColumnHeaderTitleRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className)
    }, other));
  });
  function GridColumnHeaderTitle(props) {
    var _rootProps$components;
    const {
      label,
      description,
      columnWidth
    } = props;
    const rootProps = useGridRootProps();
    const titleRef = React123.useRef(null);
    const [tooltip, setTooltip] = React123.useState("");
    React123.useEffect(() => {
      if (!description && titleRef && titleRef.current) {
        const isOver = isOverflown(titleRef.current);
        if (isOver) {
          setTooltip(label);
        } else {
          setTooltip("");
        }
      }
    }, [titleRef, columnWidth, description, label]);
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(rootProps.components.BaseTooltip, _extends({
      title: description || tooltip
    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTooltip, {
      children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ColumnHeaderInnerTitle, {
        ref: titleRef,
        children: label
      })
    }));
  }
  true ? GridColumnHeaderTitle.propTypes = {
    columnWidth: import_prop_types77.default.number.isRequired,
    description: import_prop_types77.default.node,
    label: import_prop_types77.default.string.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSeparator.js
  var React124 = __toModule(require_react());
  var import_prop_types78 = __toModule(require_prop_types());
  var import_jsx_runtime117 = __toModule(require_jsx_runtime());
  var _excluded75 = ["resizable", "resizing", "height", "side"];
  var GridColumnHeaderSeparatorSides;
  (function(GridColumnHeaderSeparatorSides2) {
    GridColumnHeaderSeparatorSides2["Left"] = "left";
    GridColumnHeaderSeparatorSides2["Right"] = "right";
  })(GridColumnHeaderSeparatorSides || (GridColumnHeaderSeparatorSides = {}));
  var useUtilityClasses50 = (ownerState) => {
    const {
      resizable,
      resizing,
      classes,
      side
    } = ownerState;
    const slots = {
      root: ["columnSeparator", resizable && "columnSeparator--resizable", resizing && "columnSeparator--resizing", side && `columnSeparator--side${capitalize_default(side)}`],
      icon: ["iconSeparator"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnHeaderSeparatorRaw(props) {
    const {
      height: height2,
      side = GridColumnHeaderSeparatorSides.Right
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded75);
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, props, {
      side,
      classes: rootProps.classes
    });
    const classes = useUtilityClasses50(ownerState);
    const stopClick = React124.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("div", _extends({
      className: classes.root,
      style: {
        minHeight: height2,
        opacity: rootProps.showColumnRightBorder ? 0 : 1
      }
    }, other, {
      onClick: stopClick,
      children: /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(rootProps.components.ColumnResizeIcon, {
        className: classes.icon
      })
    }));
  }
  var GridColumnHeaderSeparator = /* @__PURE__ */ React124.memo(GridColumnHeaderSeparatorRaw);
  true ? GridColumnHeaderSeparatorRaw.propTypes = {
    height: import_prop_types78.default.number.isRequired,
    resizable: import_prop_types78.default.bool.isRequired,
    resizing: import_prop_types78.default.bool.isRequired,
    side: import_prop_types78.default.oneOf(["left", "right"])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/ColumnHeaderMenuIcon.js
  var React125 = __toModule(require_react());
  var import_jsx_runtime118 = __toModule(require_jsx_runtime());
  var useUtilityClasses51 = (ownerState) => {
    const {
      classes,
      open
    } = ownerState;
    const slots = {
      root: ["menuIcon", open && "menuOpen"],
      button: ["menuIconButton"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var ColumnHeaderMenuIcon = /* @__PURE__ */ React125.memo((props) => {
    const {
      column: column2,
      open,
      columnMenuId,
      columnMenuButtonId,
      iconButtonRef
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses51(ownerState);
    const handleMenuIconClick = React125.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
      apiRef.current.toggleColumnMenu(column2.field);
    }, [apiRef, column2.field]);
    return /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("div", {
      className: classes.root,
      children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(IconButton_default, {
        ref: iconButtonRef,
        tabIndex: -1,
        className: classes.button,
        "aria-label": apiRef.current.getLocaleText("columnMenuLabel"),
        title: apiRef.current.getLocaleText("columnMenuLabel"),
        size: "small",
        onClick: handleMenuIconClick,
        "aria-expanded": open ? "true" : void 0,
        "aria-haspopup": "true",
        "aria-controls": columnMenuId,
        id: columnMenuButtonId,
        children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(rootProps.components.ColumnMenuIcon, {
          fontSize: "small"
        })
      })
    });
  });

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnHeaderMenu.js
  var React126 = __toModule(require_react());
  var import_prop_types79 = __toModule(require_prop_types());
  var import_jsx_runtime119 = __toModule(require_jsx_runtime());
  function GridColumnHeaderMenu({
    columnMenuId,
    columnMenuButtonId,
    ContentComponent,
    contentComponentProps,
    field,
    open,
    target,
    onExited
  }) {
    const apiRef = useGridApiContext();
    const currentColumn = apiRef.current.getColumn(field);
    const hideMenu = React126.useCallback((event) => {
      event.stopPropagation();
      apiRef.current.hideColumnMenu();
    }, [apiRef]);
    if (!target) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(GridMenu, {
      placement: `bottom-${currentColumn.align === "right" ? "start" : "end"}`,
      open,
      target,
      onClickAway: hideMenu,
      onExited,
      children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(ContentComponent, _extends({
        currentColumn,
        hideMenu,
        open,
        id: columnMenuId,
        labelledby: columnMenuButtonId
      }, contentComponentProps))
    });
  }
  true ? GridColumnHeaderMenu.propTypes = {
    columnMenuButtonId: import_prop_types79.default.string,
    columnMenuId: import_prop_types79.default.string,
    ContentComponent: import_prop_types79.default.elementType.isRequired,
    contentComponentProps: import_prop_types79.default.any,
    field: import_prop_types79.default.string.isRequired,
    onExited: import_prop_types79.default.func,
    open: import_prop_types79.default.bool.isRequired,
    target: HTMLElementType
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderItem.js
  var import_jsx_runtime120 = __toModule(require_jsx_runtime());
  var import_jsx_runtime121 = __toModule(require_jsx_runtime());
  var useUtilityClasses52 = (ownerState) => {
    const {
      column: column2,
      classes,
      isDragging,
      sortDirection,
      showRightBorder,
      filterItemsCounter
    } = ownerState;
    const isColumnSorted = sortDirection != null;
    const isColumnFiltered = filterItemsCounter != null && filterItemsCounter > 0;
    const isColumnNumeric = column2.type === "number";
    const slots = {
      root: ["columnHeader", column2.headerAlign === "left" && "columnHeader--alignLeft", column2.headerAlign === "center" && "columnHeader--alignCenter", column2.headerAlign === "right" && "columnHeader--alignRight", column2.sortable && "columnHeader--sortable", isDragging && "columnHeader--moving", isColumnSorted && "columnHeader--sorted", isColumnFiltered && "columnHeader--filtered", isColumnNumeric && "columnHeader--numeric", showRightBorder && "withBorder"],
      draggableContainer: ["columnHeaderDraggableContainer"],
      titleContainer: ["columnHeaderTitleContainer"],
      titleContainerContent: ["columnHeaderTitleContainerContent"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnHeaderItem(props) {
    var _apiRef$current$getRo, _column$sortingOrder, _rootProps$components, _column$headerName, _rootProps$components2;
    const {
      column: column2,
      columnMenuOpen,
      colIndex,
      headerHeight,
      isResizing,
      isLastColumn,
      sortDirection,
      sortIndex,
      filterItemsCounter,
      hasFocus,
      tabIndex,
      extendRowFullWidth,
      disableReorder,
      separatorSide
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const headerCellRef = React127.useRef(null);
    const columnMenuId = useId_default();
    const columnMenuButtonId = useId_default();
    const iconButtonRef = React127.useRef(null);
    const [showColumnMenuIcon, setShowColumnMenuIcon] = React127.useState(columnMenuOpen);
    const {
      hasScrollX,
      hasScrollY
    } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {
      hasScrollX: false,
      hasScrollY: false
    };
    let headerComponent = null;
    if (column2.renderHeader) {
      headerComponent = column2.renderHeader(apiRef.current.getColumnHeaderParams(column2.field));
    }
    const publish = React127.useCallback((eventName) => (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      apiRef.current.publishEvent(eventName, apiRef.current.getColumnHeaderParams(column2.field), event);
    }, [apiRef, column2.field]);
    const mouseEventsHandlers = {
      onClick: publish(GridEvents.columnHeaderClick),
      onDoubleClick: publish(GridEvents.columnHeaderDoubleClick),
      onMouseOver: publish(GridEvents.columnHeaderOver),
      onMouseOut: publish(GridEvents.columnHeaderOut),
      onMouseEnter: publish(GridEvents.columnHeaderEnter),
      onMouseLeave: publish(GridEvents.columnHeaderLeave),
      onKeyDown: publish(GridEvents.columnHeaderKeyDown),
      onFocus: publish(GridEvents.columnHeaderFocus),
      onBlur: publish(GridEvents.columnHeaderBlur)
    };
    const draggableEventHandlers = {
      onDragStart: publish(GridEvents.columnHeaderDragStart),
      onDragEnter: publish(GridEvents.columnHeaderDragEnter),
      onDragOver: publish(GridEvents.columnHeaderDragOver),
      onDragEnd: publish(GridEvents.columnHeaderDragEnd)
    };
    const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;
    const showRightBorder = !isLastColumn ? rootProps.showColumnRightBorder : !removeLastBorderRight && !extendRowFullWidth;
    const ownerState = _extends({}, props, {
      classes: rootProps.classes,
      showRightBorder
    });
    const classes = useUtilityClasses52(ownerState);
    const width2 = column2.computedWidth;
    let ariaSort;
    if (sortDirection != null) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    React127.useEffect(() => {
      if (!showColumnMenuIcon) {
        setShowColumnMenuIcon(columnMenuOpen);
      }
    }, [showColumnMenuIcon, columnMenuOpen]);
    const handleExited = React127.useCallback(() => {
      setShowColumnMenuIcon(false);
    }, []);
    const columnMenuIconButton = !rootProps.disableColumnMenu && !column2.disableColumnMenu && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(ColumnHeaderMenuIcon, {
      column: column2,
      columnMenuId,
      columnMenuButtonId,
      open: showColumnMenuIcon,
      iconButtonRef
    });
    const sortingOrder = (_column$sortingOrder = column2.sortingOrder) != null ? _column$sortingOrder : rootProps.sortingOrder;
    const columnTitleIconButtons = /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)(React127.Fragment, {
      children: [!rootProps.disableColumnFilter && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(rootProps.components.ColumnHeaderFilterIconButton, _extends({
        field: column2.field,
        counter: filterItemsCounter
      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.columnHeaderFilterIconButton)), column2.sortable && !column2.hideSortIcons && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(GridColumnHeaderSortIcon, {
        direction: sortDirection,
        index: sortIndex,
        sortingOrder
      })]
    });
    React127.useLayoutEffect(() => {
      const columnMenuState = apiRef.current.state.columnMenu;
      if (hasFocus && !columnMenuState.open) {
        const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusableElement || headerCellRef.current;
        elementToFocus == null ? void 0 : elementToFocus.focus();
        apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
      }
    }, [apiRef, hasFocus]);
    const headerClassName = typeof column2.headerClassName === "function" ? column2.headerClassName({
      field: column2.field,
      colDef: column2
    }) : column2.headerClassName;
    return /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("div", _extends({
      ref: headerCellRef,
      className: clsx_m_default(classes.root, headerClassName),
      "data-field": column2.field,
      style: {
        width: width2,
        minWidth: width2,
        maxWidth: width2
      },
      role: "columnheader",
      tabIndex,
      "aria-colindex": colIndex + 1,
      "aria-sort": ariaSort
    }, mouseEventsHandlers, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("div", _extends({
        className: classes.draggableContainer,
        draggable: !rootProps.disableColumnReorder && !disableReorder && !column2.disableReorder
      }, draggableEventHandlers, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("div", {
          className: classes.titleContainer,
          children: [/* @__PURE__ */ (0, import_jsx_runtime120.jsx)("div", {
            className: classes.titleContainerContent,
            children: headerComponent || /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(GridColumnHeaderTitle, {
              label: (_column$headerName = column2.headerName) != null ? _column$headerName : column2.field,
              description: column2.description,
              columnWidth: width2
            })
          }), columnTitleIconButtons]
        }), columnMenuIconButton]
      })), /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(GridColumnHeaderSeparator, {
        resizable: !rootProps.disableColumnResize && !!column2.resizable,
        resizing: isResizing,
        height: headerHeight,
        onMouseDown: publish(GridEvents.columnSeparatorMouseDown),
        side: separatorSide
      }), /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(GridColumnHeaderMenu, {
        columnMenuId,
        columnMenuButtonId,
        field: column2.field,
        open: columnMenuOpen,
        target: iconButtonRef.current,
        ContentComponent: rootProps.components.ColumnMenu,
        contentComponentProps: (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.columnMenu,
        onExited: handleExited
      })]
    }));
  }
  true ? GridColumnHeaderItem.propTypes = {
    colIndex: import_prop_types80.default.number.isRequired,
    column: import_prop_types80.default.object.isRequired,
    columnMenuOpen: import_prop_types80.default.bool.isRequired,
    disableReorder: import_prop_types80.default.bool,
    extendRowFullWidth: import_prop_types80.default.bool.isRequired,
    filterItemsCounter: import_prop_types80.default.number,
    hasFocus: import_prop_types80.default.bool,
    headerHeight: import_prop_types80.default.number.isRequired,
    isDragging: import_prop_types80.default.bool.isRequired,
    isLastColumn: import_prop_types80.default.bool.isRequired,
    isResizing: import_prop_types80.default.bool.isRequired,
    separatorSide: import_prop_types80.default.oneOf(["left", "right"]),
    sortDirection: import_prop_types80.default.oneOf(["asc", "desc"]),
    sortIndex: import_prop_types80.default.number,
    tabIndex: import_prop_types80.default.oneOf([-1, 0]).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderFilterIconButton.js
  var React128 = __toModule(require_react());
  var import_prop_types81 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelSelector.js
  var gridPreferencePanelStateSelector = (state) => state.preferencePanel;

  // node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelsValue.js
  var GridPreferencePanelsValue;
  (function(GridPreferencePanelsValue2) {
    GridPreferencePanelsValue2["filters"] = "filters";
    GridPreferencePanelsValue2["columns"] = "columns";
  })(GridPreferencePanelsValue || (GridPreferencePanelsValue = {}));

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderFilterIconButton.js
  var import_jsx_runtime122 = __toModule(require_jsx_runtime());
  var import_jsx_runtime123 = __toModule(require_jsx_runtime());
  var useUtilityClasses53 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      icon: ["filterIcon"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnHeaderFilterIconButton(props) {
    var _rootProps$components;
    const {
      counter,
      field,
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses53(ownerState);
    const toggleFilter = React128.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
      const {
        open,
        openedPanelValue
      } = gridPreferencePanelStateSelector(apiRef.current.state);
      if (open && openedPanelValue === GridPreferencePanelsValue.filters) {
        apiRef.current.hideFilterPanel();
      } else {
        apiRef.current.showFilterPanel();
      }
      if (onClick) {
        onClick(apiRef.current.getColumnHeaderParams(field), event);
      }
    }, [apiRef, field, onClick]);
    if (!counter) {
      return null;
    }
    const iconButton = /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(IconButton_default, {
      onClick: toggleFilter,
      color: "default",
      "aria-label": apiRef.current.getLocaleText("columnHeaderFiltersLabel"),
      size: "small",
      tabIndex: -1,
      children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(rootProps.components.ColumnFilteredIcon, {
        className: classes.icon,
        fontSize: "small"
      })
    });
    return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(rootProps.components.BaseTooltip, _extends({
      title: apiRef.current.getLocaleText("columnHeaderFiltersTooltipActive")(counter),
      enterDelay: 1e3
    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTooltip, {
      children: /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(GridIconButtonContainer, {
        children: [counter > 1 && /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(Badge_default, {
          badgeContent: counter,
          color: "default",
          children: iconButton
        }), counter === 1 && iconButton]
      })
    }));
  }
  true ? GridColumnHeaderFilterIconButton.propTypes = {
    counter: import_prop_types81.default.number,
    field: import_prop_types81.default.string.isRequired,
    onClick: import_prop_types81.default.func
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnSelection/GridCellCheckboxRenderer.js
  var React129 = __toModule(require_react());
  var import_prop_types82 = __toModule(require_prop_types());
  var import_jsx_runtime124 = __toModule(require_jsx_runtime());
  var _excluded76 = ["field", "id", "value", "formattedValue", "row", "rowNode", "colDef", "isEditable", "cellMode", "hasFocus", "tabIndex", "getValue", "api"];
  var useUtilityClasses54 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["checkboxInput"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridCellCheckboxForwardRef = /* @__PURE__ */ React129.forwardRef(function GridCellCheckboxRenderer(props, ref) {
    var _rootProps$components;
    const {
      field,
      id,
      value: isChecked,
      hasFocus,
      tabIndex
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded76);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses54(ownerState);
    const checkboxElement = React129.useRef(null);
    const rippleRef = React129.useRef();
    const handleRef = useForkRef_default(checkboxElement, ref);
    const element = apiRef.current.getCellElement(id, field);
    const handleChange = (event) => {
      const params = {
        value: event.target.checked,
        id
      };
      apiRef.current.publishEvent(GridEvents.rowSelectionCheckboxChange, params, event);
    };
    React129.useLayoutEffect(() => {
      if (tabIndex === 0 && element) {
        element.tabIndex = -1;
      }
    }, [element, tabIndex]);
    React129.useLayoutEffect(() => {
      if (hasFocus) {
        var _checkboxElement$curr;
        const input = (_checkboxElement$curr = checkboxElement.current) == null ? void 0 : _checkboxElement$curr.querySelector("input");
        input == null ? void 0 : input.focus();
      } else if (rippleRef.current) {
        rippleRef.current.stop({});
      }
    }, [hasFocus]);
    const handleKeyDown2 = React129.useCallback((event) => {
      if (isSpaceKey(event.key)) {
        event.stopPropagation();
      }
      if (isNavigationKey(event.key) && !event.shiftKey) {
        apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, props, event);
      }
    }, [apiRef, props]);
    const isSelectable = !rootProps.isRowSelectable || rootProps.isRowSelectable(apiRef.current.getRowParams(id));
    const label = apiRef.current.getLocaleText(isChecked ? "checkboxSelectionUnselectRow" : "checkboxSelectionSelectRow");
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(rootProps.components.BaseCheckbox, _extends({
      ref: handleRef,
      tabIndex,
      checked: isChecked,
      onChange: handleChange,
      className: classes.root,
      color: "primary",
      inputProps: {
        "aria-label": label
      },
      onKeyDown: handleKeyDown2,
      disabled: !isSelectable,
      touchRippleRef: rippleRef
    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox, other));
  });
  true ? GridCellCheckboxForwardRef.propTypes = {
    api: import_prop_types82.default.any.isRequired,
    cellMode: import_prop_types82.default.oneOf(["edit", "view"]).isRequired,
    colDef: import_prop_types82.default.object.isRequired,
    field: import_prop_types82.default.string.isRequired,
    focusElementRef: import_prop_types82.default.oneOfType([import_prop_types82.default.func, import_prop_types82.default.shape({
      current: import_prop_types82.default.shape({
        focus: import_prop_types82.default.func.isRequired
      })
    })]),
    formattedValue: import_prop_types82.default.any,
    getValue: import_prop_types82.default.func.isRequired,
    hasFocus: import_prop_types82.default.bool.isRequired,
    id: import_prop_types82.default.oneOfType([import_prop_types82.default.number, import_prop_types82.default.string]).isRequired,
    isEditable: import_prop_types82.default.bool,
    row: import_prop_types82.default.object.isRequired,
    rowNode: import_prop_types82.default.object.isRequired,
    tabIndex: import_prop_types82.default.oneOf([-1, 0]).isRequired,
    value: import_prop_types82.default.any
  } : void 0;
  var GridCellCheckboxRenderer2 = /* @__PURE__ */ React129.memo(GridCellCheckboxForwardRef);

  // node_modules/@mui/x-data-grid/components/columnSelection/GridHeaderCheckbox.js
  var React130 = __toModule(require_react());
  var import_prop_types83 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/features/selection/gridSelectionSelector.js
  var gridSelectionStateSelector = (state) => state.selection;
  var selectedGridRowsCountSelector = createSelector2(gridSelectionStateSelector, (selection) => selection.length);
  var selectedGridRowsSelector = createSelector2(gridSelectionStateSelector, gridRowsLookupSelector, (selectedRows, rowsLookup) => new Map(selectedRows.map((id) => [id, rowsLookup[id]])));
  var selectedIdsLookupSelector = createSelector2(gridSelectionStateSelector, (selection) => selection.reduce((lookup2, rowId) => {
    lookup2[rowId] = rowId;
    return lookup2;
  }, {}));

  // node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js
  var gridPaginationSelector = (state) => state.pagination;
  var gridPageSelector = createSelector2(gridPaginationSelector, (pagination) => pagination.page);
  var gridPageSizeSelector = createSelector2(gridPaginationSelector, (pagination) => pagination.pageSize);
  var gridPageCountSelector = createSelector2(gridPaginationSelector, (pagination) => pagination.pageCount);
  var gridPaginationRowRangeSelector = createSelector2(gridPaginationSelector, gridRowTreeSelector, gridRowTreeDepthSelector, gridVisibleSortedRowEntriesSelector, gridVisibleSortedTopLevelRowEntriesSelector, (pagination, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {
    const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;
    const topLevelFirstRowIndex = Math.min(pagination.pageSize * pagination.page, visibleTopLevelRowCount - 1);
    const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + pagination.pageSize - 1, visibleTopLevelRowCount - 1);
    if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {
      return null;
    }
    if (rowTreeDepth < 2) {
      return {
        firstRowIndex: topLevelFirstRowIndex,
        lastRowIndex: topLevelLastRowIndex
      };
    }
    const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];
    const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;
    const firstRowIndex = visibleSortedRowEntries.findIndex((row) => row.id === topLevelFirstRow.id);
    let lastRowIndex = firstRowIndex;
    let topLevelRowAdded = 0;
    while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {
      const row = visibleSortedRowEntries[lastRowIndex];
      const depth = rowTree[row.id].depth;
      if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {
        lastRowIndex += 1;
      }
      if (depth === 0) {
        topLevelRowAdded += 1;
      }
    }
    return {
      firstRowIndex,
      lastRowIndex: lastRowIndex - 1
    };
  });
  var gridPaginatedVisibleSortedGridRowEntriesSelector = createSelector2(gridVisibleSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {
    if (!paginationRange) {
      return [];
    }
    return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
  });
  var gridPaginatedVisibleSortedGridRowIdsSelector = createSelector2(gridVisibleSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {
    if (!paginationRange) {
      return [];
    }
    return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
  });

  // node_modules/@mui/x-data-grid/components/columnSelection/GridHeaderCheckbox.js
  var import_jsx_runtime125 = __toModule(require_jsx_runtime());
  var _excluded77 = ["field", "colDef"];
  var useUtilityClasses55 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["checkboxInput"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridHeaderCheckbox = /* @__PURE__ */ React130.forwardRef(function GridHeaderCheckbox2(props, ref) {
    var _rootProps$components;
    const other = _objectWithoutPropertiesLoose(props, _excluded77);
    const [, forceUpdate] = React130.useState(false);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses55(ownerState);
    const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);
    const selection = useGridSelector(apiRef, gridSelectionStateSelector);
    const visibleRowIds = useGridSelector(apiRef, gridVisibleSortedRowIdsSelector);
    const paginatedVisibleRowIds = useGridSelector(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);
    const filteredSelection = React130.useMemo(() => {
      if (typeof rootProps.isRowSelectable !== "function") {
        return selection;
      }
      return selection.filter((id) => {
        if (!apiRef.current.getRow(id)) {
          return false;
        }
        return rootProps.isRowSelectable(apiRef.current.getRowParams(id));
      });
    }, [apiRef, rootProps.isRowSelectable, selection]);
    const selectionCandidates = React130.useMemo(() => {
      const rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds;
      return rowIds.reduce((acc, id) => {
        acc[id] = true;
        return acc;
      }, {});
    }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]);
    const currentSelectionSize = React130.useMemo(() => filteredSelection.filter((id) => selectionCandidates[id]).length, [filteredSelection, selectionCandidates]);
    const isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;
    const isChecked = currentSelectionSize > 0;
    const handleChange = (event) => {
      const params = {
        value: event.target.checked
      };
      apiRef.current.publishEvent(GridEvents.headerSelectionCheckboxChange, params);
    };
    const tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;
    React130.useLayoutEffect(() => {
      const element = apiRef.current.getColumnHeaderElement(props.field);
      if (tabIndex === 0 && element) {
        element.tabIndex = -1;
      }
    }, [tabIndex, apiRef, props.field]);
    const handleKeyDown2 = React130.useCallback((event) => {
      if (event.key === " ") {
        apiRef.current.publishEvent(GridEvents.headerSelectionCheckboxChange, {
          value: !isChecked
        });
      }
      if (isNavigationKey(event.key) && !event.shiftKey) {
        apiRef.current.publishEvent(GridEvents.columnHeaderNavigationKeyDown, props, event);
      }
    }, [apiRef, props, isChecked]);
    const handleSelectionChange = React130.useCallback(() => {
      forceUpdate((p) => !p);
    }, []);
    React130.useEffect(() => {
      return apiRef.current.subscribeEvent(GridEvents.selectionChange, handleSelectionChange);
    }, [apiRef, handleSelectionChange]);
    const label = apiRef.current.getLocaleText(isChecked ? "checkboxSelectionUnselectAllRows" : "checkboxSelectionSelectAllRows");
    return /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(rootProps.components.BaseCheckbox, _extends({
      ref,
      indeterminate: isIndeterminate,
      checked: isChecked,
      onChange: handleChange,
      className: classes.root,
      color: "primary",
      inputProps: {
        "aria-label": label
      },
      tabIndex,
      onKeyDown: handleKeyDown2
    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox, other));
  });
  true ? GridHeaderCheckbox.propTypes = {
    colDef: import_prop_types83.default.object.isRequired,
    field: import_prop_types83.default.string.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnsMenuItem.js
  var React131 = __toModule(require_react());
  var import_prop_types84 = __toModule(require_prop_types());
  var import_jsx_runtime126 = __toModule(require_jsx_runtime());
  var GridColumnsMenuItem = (props) => {
    const {
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const showColumns = React131.useCallback((event) => {
      onClick(event);
      apiRef.current.showPreferences(GridPreferencePanelsValue.columns);
    }, [apiRef, onClick]);
    if (rootProps.disableColumnSelector) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(MenuItem_default, {
      onClick: showColumns,
      children: apiRef.current.getLocaleText("columnMenuShowColumns")
    });
  };
  true ? GridColumnsMenuItem.propTypes = {
    column: import_prop_types84.default.object.isRequired,
    onClick: import_prop_types84.default.func.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridFilterMenuItem.js
  var React132 = __toModule(require_react());
  var import_prop_types85 = __toModule(require_prop_types());
  var import_jsx_runtime127 = __toModule(require_jsx_runtime());
  var GridFilterMenuItem = (props) => {
    const {
      column: column2,
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const showFilter = React132.useCallback((event) => {
      onClick(event);
      apiRef.current.showFilterPanel(column2 == null ? void 0 : column2.field);
    }, [apiRef, column2 == null ? void 0 : column2.field, onClick]);
    if (rootProps.disableColumnFilter || !(column2 != null && column2.filterable)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(MenuItem_default, {
      onClick: showFilter,
      children: apiRef.current.getLocaleText("columnMenuFilter")
    });
  };
  true ? GridFilterMenuItem.propTypes = {
    column: import_prop_types85.default.object.isRequired,
    onClick: import_prop_types85.default.func.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenu.js
  var React145 = __toModule(require_react());
  var import_prop_types93 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenuContainer.js
  var import_prop_types86 = __toModule(require_prop_types());
  var React133 = __toModule(require_react());
  var import_jsx_runtime128 = __toModule(require_jsx_runtime());
  var _excluded78 = ["hideMenu", "currentColumn", "open", "id", "labelledby", "className", "children"];
  var GridColumnMenuContainer = /* @__PURE__ */ React133.forwardRef(function GridColumnMenuContainer2(props, ref) {
    const {
      hideMenu,
      open,
      id,
      labelledby,
      className,
      children
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded78);
    const handleListKeyDown = React133.useCallback((event) => {
      if (isTabKey(event.key)) {
        event.preventDefault();
      }
      if (isHideMenuKey(event.key)) {
        hideMenu(event);
      }
    }, [hideMenu]);
    return /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(MenuList_default, _extends({
      id,
      ref,
      className: clsx_m_default(gridClasses2.menuList, className),
      "aria-labelledby": labelledby,
      onKeyDown: handleListKeyDown,
      autoFocus: open
    }, other, {
      children
    }));
  });
  true ? GridColumnMenuContainer.propTypes = {
    currentColumn: import_prop_types86.default.object.isRequired,
    hideMenu: import_prop_types86.default.func.isRequired,
    id: import_prop_types86.default.string,
    labelledby: import_prop_types86.default.string,
    open: import_prop_types86.default.bool.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/HideGridColMenuItem.js
  var React143 = __toModule(require_react());
  var import_prop_types91 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingUtils.js
  var sortModelDisableMultiColumnsSortingWarning = buildWarning(["MUI: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.", "If you are using the community version of the `DataGrid`, this prop is always `true`."], "error");
  var sanitizeSortModel = (model, disableMultipleColumnsSorting) => {
    if (disableMultipleColumnsSorting && model.length > 1) {
      sortModelDisableMultiColumnsSortingWarning();
      return [model[0]];
    }
    return model;
  };
  var mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting) => (state) => _extends({}, state, {
    sorting: _extends({}, state.sorting, {
      sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)
    })
  });
  var isDesc = (direction) => direction === "desc";
  var parseSortItem = (sortItem, apiRef) => {
    const column2 = apiRef.current.getColumn(sortItem.field);
    if (!column2) {
      return null;
    }
    const comparator = isDesc(sortItem.sort) ? (...args) => -1 * column2.sortComparator(...args) : column2.sortComparator;
    const getSortCellParams = (id) => ({
      id,
      field: column2.field,
      rowNode: apiRef.current.getRowNode(id),
      value: apiRef.current.getCellValue(id, column2.field),
      api: apiRef.current
    });
    return {
      getSortCellParams,
      comparator
    };
  };
  var compareRows = (parsedSortItems, row1Params, row2Params) => {
    return parsedSortItems.reduce((res, item, index) => {
      if (res !== 0) {
        return res;
      }
      const sortCellParams1 = row1Params[index];
      const sortCellParams2 = row2Params[index];
      res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);
      return res;
    }, 0);
  };
  var buildAggregatedSortingApplier = (sortModel, apiRef) => {
    const comparatorList = sortModel.map((item) => parseSortItem(item, apiRef)).filter((comparator) => !!comparator);
    if (comparatorList.length === 0) {
      return null;
    }
    return (rowList) => rowList.map((value) => ({
      value,
      params: comparatorList.map((el) => el.getSortCellParams(value.id))
    })).sort((a, b) => compareRows(comparatorList, a.params, b.params)).map((row) => row.value.id);
  };
  var getNextGridSortDirection = (sortingOrder, current) => {
    const currentIdx = sortingOrder.indexOf(current);
    if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {
      return sortingOrder[0];
    }
    return sortingOrder[currentIdx + 1];
  };
  var gridNillComparator = (v1, v2) => {
    if (v1 == null && v2 != null) {
      return -1;
    }
    if (v2 == null && v1 != null) {
      return 1;
    }
    if (v1 == null && v2 == null) {
      return 0;
    }
    return null;
  };
  var collator = new Intl.Collator();
  var gridStringOrNumberComparator = (value1, value2) => {
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
      return nillResult;
    }
    if (typeof value1 === "string") {
      return collator.compare(value1.toString(), value2.toString());
    }
    return value1 - value2;
  };
  var gridNumberComparator = (value1, value2) => {
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
      return nillResult;
    }
    return Number(value1) - Number(value2);
  };
  var gridDateComparator = (value1, value2) => {
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
      return nillResult;
    }
    if (value1 > value2) {
      return 1;
    }
    if (value1 < value2) {
      return -1;
    }
    return 0;
  };

  // node_modules/@mui/x-data-grid/utils/utils.js
  function isNumber(value) {
    return typeof value === "number";
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function localStorageAvailable() {
    try {
      const key = "__some_random_key_you_are_not_going_to_use__";
      window.localStorage.setItem(key, key);
      window.localStorage.removeItem(key);
      return true;
    } catch (err) {
      return false;
    }
  }
  function escapeRegExp(value) {
    return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  var clamp2 = (value, min2, max2) => Math.max(min2, Math.min(max2, value));
  function isDeepEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (a && b && typeof a === "object" && typeof b === "object") {
      if (a.constructor !== b.constructor) {
        return false;
      }
      if (Array.isArray(a)) {
        const length3 = a.length;
        if (length3 !== b.length) {
          return false;
        }
        for (let i = 0; i < length3; i += 1) {
          if (!isDeepEqual(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
      if (a instanceof Map && b instanceof Map) {
        if (a.size !== b.size) {
          return false;
        }
        const entriesA = Array.from(a.entries());
        for (let i = 0; i < entriesA.length; i += 1) {
          if (!b.has(entriesA[i][0])) {
            return false;
          }
        }
        for (let i = 0; i < entriesA.length; i += 1) {
          const entryA = entriesA[i];
          if (!isDeepEqual(entryA[1], b.get(entryA[0]))) {
            return false;
          }
        }
        return true;
      }
      if (a instanceof Set && b instanceof Set) {
        if (a.size !== b.size) {
          return false;
        }
        const entries = Array.from(a.entries());
        for (let i = 0; i < entries.length; i += 1) {
          if (!b.has(entries[i][0])) {
            return false;
          }
        }
        return true;
      }
      if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
        const length3 = a.length;
        if (length3 !== b.length) {
          return false;
        }
        for (let i = 0; i < length3; i += 1) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      }
      if (a.constructor === RegExp) {
        return a.source === b.source && a.flags === b.flags;
      }
      if (a.valueOf !== Object.prototype.valueOf) {
        return a.valueOf() === b.valueOf();
      }
      if (a.toString !== Object.prototype.toString) {
        return a.toString() === b.toString();
      }
      const keys = Object.keys(a);
      const length2 = keys.length;
      if (length2 !== Object.keys(b).length) {
        return false;
      }
      for (let i = 0; i < length2; i += 1) {
        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {
          return false;
        }
      }
      for (let i = 0; i < length2; i += 1) {
        const key = keys[i];
        if (!isDeepEqual(a[key], b[key])) {
          return false;
        }
      }
      return true;
    }
    return a !== a && b !== b;
  }

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleValue.js
  var React134 = __toModule(require_react());
  var import_prop_types87 = __toModule(require_prop_types());
  var import_jsx_runtime129 = __toModule(require_jsx_runtime());
  var _excluded79 = ["item", "applyValue", "type", "apiRef", "focusElementRef"];
  function GridFilterInputMultipleValue(props) {
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded79);
    const [filterValueState, setFilterValueState] = React134.useState(item.value || []);
    const id = useId_default();
    React134.useEffect(() => {
      var _item$value;
      const itemValue = (_item$value = item.value) != null ? _item$value : [];
      setFilterValueState(itemValue.map(String));
    }, [item.value]);
    const handleChange = React134.useCallback((event, value) => {
      setFilterValueState(value.map(String));
      applyValue(_extends({}, item, {
        value: [...value]
      }));
    }, [applyValue, item]);
    return /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Autocomplete_default, _extends({
      multiple: true,
      freeSolo: true,
      limitTags: 1,
      options: [],
      filterOptions: (options, params) => {
        const {
          inputValue
        } = params;
        return inputValue == null || inputValue === "" ? [] : [inputValue];
      },
      id,
      value: filterValueState,
      onChange: handleChange,
      renderTags: (value, getTagProps) => value.map((option, index) => /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Chip_default, _extends({
        variant: "outlined",
        size: "small",
        label: option
      }, getTagProps({
        index
      })))),
      renderInput: (params) => /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TextField_default, _extends({}, params, {
        label: apiRef.current.getLocaleText("filterPanelInputLabel"),
        placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
        InputLabelProps: _extends({}, params.InputLabelProps, {
          shrink: true
        }),
        inputRef: focusElementRef,
        type: type || "text",
        variant: "standard"
      }))
    }, other));
  }
  true ? GridFilterInputMultipleValue.propTypes = {
    apiRef: import_prop_types87.default.any.isRequired,
    applyValue: import_prop_types87.default.func.isRequired,
    focusElementRef: import_prop_types87.default.oneOfType([import_prop_types87.default.func, import_prop_types87.default.object]),
    item: import_prop_types87.default.shape({
      columnField: import_prop_types87.default.string.isRequired,
      id: import_prop_types87.default.oneOfType([import_prop_types87.default.number, import_prop_types87.default.string]),
      operatorValue: import_prop_types87.default.string,
      value: import_prop_types87.default.any
    }).isRequired,
    type: import_prop_types87.default.oneOf(["number", "text"])
  } : void 0;

  // node_modules/@mui/x-data-grid/colDef/gridStringOperators.js
  var getGridStringOperators = () => [{
    value: "contains",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterRegex = new RegExp(escapeRegExp(filterItem.value), "i");
      return ({
        value
      }) => {
        return value != null ? filterRegex.test(value.toString()) : false;
      };
    },
    InputComponent: GridFilterInputValue
  }, {
    value: "equals",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const collator3 = new Intl.Collator(void 0, {
        sensitivity: "base",
        usage: "search"
      });
      return ({
        value
      }) => {
        return value != null ? collator3.compare(filterItem.value, value.toString()) === 0 : false;
      };
    },
    InputComponent: GridFilterInputValue
  }, {
    value: "startsWith",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterRegex = new RegExp(`^${escapeRegExp(filterItem.value)}.*$`, "i");
      return ({
        value
      }) => {
        return value != null ? filterRegex.test(value.toString()) : false;
      };
    },
    InputComponent: GridFilterInputValue
  }, {
    value: "endsWith",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterRegex = new RegExp(`.*${escapeRegExp(filterItem.value)}$`, "i");
      return ({
        value
      }) => {
        return value != null ? filterRegex.test(value.toString()) : false;
      };
    },
    InputComponent: GridFilterInputValue
  }, {
    value: "isEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value === "" || value == null;
      };
    }
  }, {
    value: "isNotEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value !== "" && value != null;
      };
    }
  }, {
    value: "isAnyOf",
    getApplyFilterFn: (filterItem) => {
      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
        return null;
      }
      const collator3 = new Intl.Collator(void 0, {
        sensitivity: "base",
        usage: "search"
      });
      return ({
        value
      }) => value != null ? filterItem.value.some((filterValue) => {
        return collator3.compare(filterValue, value.toString() || "") === 0;
      }) : false;
    },
    InputComponent: GridFilterInputMultipleValue
  }];

  // node_modules/@mui/x-data-grid/colDef/gridStringColDef.js
  var GRID_STRING_COL_DEF = {
    width: 100,
    minWidth: 50,
    maxWidth: Infinity,
    hide: false,
    hideable: true,
    sortable: true,
    resizable: true,
    filterable: true,
    groupable: true,
    pinnable: true,
    editable: false,
    sortComparator: gridStringOrNumberComparator,
    type: "string",
    align: "left",
    filterOperators: getGridStringOperators(),
    renderEditCell: renderEditInputCell
  };

  // node_modules/@mui/x-data-grid/colDef/gridActionsColDef.js
  var GRID_ACTIONS_COLUMN_TYPE = "actions";
  var GRID_ACTIONS_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    sortable: false,
    filterable: false,
    width: 100,
    align: "center",
    headerAlign: "center",
    headerName: "",
    disableColumnMenu: true,
    disableExport: true,
    renderCell: renderActionsCell
  });

  // node_modules/@mui/x-data-grid/components/cell/GridBooleanCell.js
  var React135 = __toModule(require_react());
  var import_jsx_runtime130 = __toModule(require_jsx_runtime());
  var _excluded80 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "hasFocus", "tabIndex", "getValue"];
  var useUtilityClasses56 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["booleanCell"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridBooleanCell = /* @__PURE__ */ React135.memo((props) => {
    const {
      value,
      api
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded80);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses56(ownerState);
    const Icon = React135.useMemo(() => value ? rootProps.components.BooleanCellTrueIcon : rootProps.components.BooleanCellFalseIcon, [rootProps.components.BooleanCellFalseIcon, rootProps.components.BooleanCellTrueIcon, value]);
    return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(Icon, _extends({
      fontSize: "small",
      className: classes.root,
      titleAccess: api.getLocaleText(value ? "booleanCellTrueLabel" : "booleanCellFalseLabel"),
      "data-value": Boolean(value)
    }, other));
  });
  var renderBooleanCell = (params) => {
    if (params.rowNode.isAutoGenerated) {
      return "";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(GridBooleanCell, _extends({}, params));
  };

  // node_modules/@mui/x-data-grid/components/cell/GridEditBooleanCell.js
  var React136 = __toModule(require_react());
  var import_jsx_runtime131 = __toModule(require_jsx_runtime());
  var _excluded81 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "getValue", "hasFocus", "isValidating", "isProcessingProps", "error"];
  var useUtilityClasses57 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["editBooleanCell"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridEditBooleanCell(props) {
    var _rootProps$components;
    const {
      id: idProp,
      value,
      api,
      field,
      className,
      hasFocus
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded81);
    const inputRef = React136.useRef(null);
    const id = useId_default();
    const [valueState, setValueState] = React136.useState(value);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses57(ownerState);
    const handleChange = React136.useCallback((event) => {
      const newValue = event.target.checked;
      setValueState(newValue);
      api.setEditCellValue({
        id: idProp,
        field,
        value: newValue
      }, event);
    }, [api, field, idProp]);
    React136.useEffect(() => {
      setValueState(value);
    }, [value]);
    useEnhancedEffect_default2(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)("label", _extends({
      htmlFor: id,
      className: clsx_m_default(classes.root, className)
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(rootProps.components.BaseCheckbox, _extends({
        id,
        inputRef,
        checked: Boolean(valueState),
        onChange: handleChange,
        size: "small"
      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox))
    }));
  }
  var renderEditBooleanCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(GridEditBooleanCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputBoolean.js
  var React137 = __toModule(require_react());
  var import_jsx_runtime132 = __toModule(require_jsx_runtime());
  var import_jsx_runtime133 = __toModule(require_jsx_runtime());
  var _excluded82 = ["item", "applyValue", "apiRef", "focusElementRef"];
  function GridFilterInputBoolean(props) {
    var _rootProps$components, _baseSelectProps$nati, _rootProps$components2, _rootProps$components3;
    const {
      item,
      applyValue,
      apiRef,
      focusElementRef
    } = props, others = _objectWithoutPropertiesLoose(props, _excluded82);
    const [filterValueState, setFilterValueState] = React137.useState(item.value || "");
    const rootProps = useGridRootProps();
    const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};
    const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
    const OptionComponent = isSelectNative ? "option" : MenuItem_default;
    const onFilterChange = React137.useCallback((event) => {
      const value = event.target.value;
      setFilterValueState(value);
      applyValue(_extends({}, item, {
        value
      }));
    }, [applyValue, item]);
    React137.useEffect(() => {
      setFilterValueState(item.value || "");
    }, [item.value]);
    return /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(rootProps.components.BaseTextField, _extends({
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      value: filterValueState,
      onChange: onFilterChange,
      variant: "standard",
      select: true,
      SelectProps: _extends({
        native: isSelectNative,
        displayEmpty: true
      }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect),
      InputLabelProps: {
        shrink: true
      },
      inputRef: focusElementRef
    }, others, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseTextField, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime132.jsx)(OptionComponent, {
        value: "",
        children: apiRef.current.getLocaleText("filterValueAny")
      }), /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(OptionComponent, {
        value: "true",
        children: apiRef.current.getLocaleText("filterValueTrue")
      }), /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(OptionComponent, {
        value: "false",
        children: apiRef.current.getLocaleText("filterValueFalse")
      })]
    }));
  }

  // node_modules/@mui/x-data-grid/colDef/gridBooleanOperators.js
  var getGridBooleanOperators = () => [{
    value: "is",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const valueAsBoolean = filterItem.value === "true";
      return ({
        value
      }) => {
        return Boolean(value) === valueAsBoolean;
      };
    },
    InputComponent: GridFilterInputBoolean
  }];

  // node_modules/@mui/x-data-grid/colDef/gridBooleanColDef.js
  function gridBooleanFormatter({
    value,
    api
  }) {
    return value ? api.getLocaleText("booleanCellTrueLabel") : api.getLocaleText("booleanCellFalseLabel");
  }
  var GRID_BOOLEAN_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "boolean",
    align: "center",
    headerAlign: "center",
    renderCell: renderBooleanCell,
    renderEditCell: renderEditBooleanCell,
    sortComparator: gridNumberComparator,
    valueFormatter: gridBooleanFormatter,
    filterOperators: getGridBooleanOperators()
  });

  // node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js
  var React138 = __toModule(require_react());
  var import_jsx_runtime134 = __toModule(require_jsx_runtime());
  var GRID_CHECKBOX_SELECTION_COL_DEF = _extends({}, GRID_BOOLEAN_COL_DEF, {
    field: "__check__",
    type: "checkboxSelection",
    width: 50,
    resizable: false,
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
    disableReorder: true,
    disableExport: true,
    valueGetter: (params) => {
      const selectionLookup = selectedIdsLookupSelector(params.api.state, params.api.instanceId);
      return selectionLookup[params.id] !== void 0;
    },
    renderHeader: (params) => /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(GridHeaderCheckbox, _extends({}, params)),
    renderCell: (params) => /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(GridCellCheckboxRenderer2, _extends({}, params))
  });

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputDate.js
  var React139 = __toModule(require_react());
  var import_prop_types88 = __toModule(require_prop_types());
  var import_jsx_runtime135 = __toModule(require_jsx_runtime());
  var _excluded83 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "InputProps"];
  var SUBMIT_FILTER_DATE_STROKE_TIME = 500;
  function GridFilterInputDate(props) {
    var _item$value, _rootProps$components;
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef,
      InputProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded83);
    const filterTimeout = React139.useRef();
    const [filterValueState, setFilterValueState] = React139.useState((_item$value = item.value) != null ? _item$value : "");
    const [applying, setIsApplying] = React139.useState(false);
    const id = useId_default();
    const rootProps = useGridRootProps();
    const onFilterChange = React139.useCallback((event) => {
      const value = event.target.value;
      clearTimeout(filterTimeout.current);
      setFilterValueState(String(value));
      setIsApplying(true);
      filterTimeout.current = setTimeout(() => {
        applyValue(_extends({}, item, {
          value
        }));
        setIsApplying(false);
      }, SUBMIT_FILTER_DATE_STROKE_TIME);
    }, [applyValue, item]);
    React139.useEffect(() => {
      return () => {
        clearTimeout(filterTimeout.current);
      };
    }, []);
    React139.useEffect(() => {
      var _item$value2;
      const itemValue = (_item$value2 = item.value) != null ? _item$value2 : "";
      setFilterValueState(String(itemValue));
    }, [item.value]);
    return /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(rootProps.components.BaseTextField, _extends({
      id,
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
      value: filterValueState,
      onChange: onFilterChange,
      type: type || "text",
      variant: "standard",
      InputLabelProps: {
        shrink: true
      },
      inputRef: focusElementRef,
      InputProps: _extends({}, applying ? {
        endAdornment: /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(GridLoadIcon, {})
      } : {}, InputProps, {
        inputProps: _extends({
          max: type === "datetime-local" ? "9999-12-31T23:59" : "9999-12-31"
        }, InputProps == null ? void 0 : InputProps.inputProps)
      })
    }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));
  }
  true ? GridFilterInputDate.propTypes = {
    apiRef: import_prop_types88.default.any.isRequired,
    applyValue: import_prop_types88.default.func.isRequired,
    focusElementRef: import_prop_types88.default.oneOfType([import_prop_types88.default.func, import_prop_types88.default.object]),
    item: import_prop_types88.default.shape({
      columnField: import_prop_types88.default.string.isRequired,
      id: import_prop_types88.default.oneOfType([import_prop_types88.default.number, import_prop_types88.default.string]),
      operatorValue: import_prop_types88.default.string,
      value: import_prop_types88.default.any
    }).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/colDef/gridDateOperators.js
  var dateRegex = /(\d+)-(\d+)-(\d+)/;
  var dateTimeRegex = /(\d+)-(\d+)-(\d+)T(\d+):(\d+)/;
  function buildApplyFilterFn(filterItem, compareFn, showTime, keepHours) {
    if (!filterItem.value) {
      return null;
    }
    const [year, month, day, hour, minute] = filterItem.value.match(showTime ? dateTimeRegex : dateRegex).slice(1).map(Number);
    const time = new Date(year, month - 1, day, hour || 0, minute || 0).getTime();
    return ({
      value
    }) => {
      if (!value) {
        return false;
      }
      const valueAsDate = value instanceof Date ? value : new Date(value.toString());
      if (keepHours) {
        return compareFn(valueAsDate.getTime(), time);
      }
      const dateCopy = value instanceof Date ? new Date(valueAsDate) : valueAsDate;
      const timeToCompare = dateCopy.setHours(showTime ? valueAsDate.getHours() : 0, showTime ? valueAsDate.getMinutes() : 0, 0, 0);
      return compareFn(timeToCompare, time);
    };
  }
  var getGridDateOperators = (showTime) => [{
    value: "is",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 === value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "not",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 !== value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "after",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 > value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "onOrAfter",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 >= value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "before",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 < value2, showTime, !showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "onOrBefore",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 <= value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "isEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value == null;
      };
    }
  }, {
    value: "isNotEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value != null;
      };
    }
  }];

  // node_modules/@mui/x-data-grid/components/cell/GridEditDateCell.js
  var React140 = __toModule(require_react());
  var import_jsx_runtime136 = __toModule(require_jsx_runtime());
  var _excluded84 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "getValue", "inputProps", "isValidating", "isProcessingProps"];
  var useUtilityClasses58 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["editInputCell"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridEditDateCell(props) {
    const {
      id,
      value: valueProp,
      api,
      field,
      colDef,
      hasFocus,
      inputProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded84);
    const isDateTime = colDef.type === "dateTime";
    const inputRef = React140.useRef();
    const valueTransformed = React140.useMemo(() => {
      let parsedDate;
      if (valueProp == null) {
        parsedDate = null;
      } else if (valueProp instanceof Date) {
        parsedDate = valueProp;
      } else {
        parsedDate = new Date((valueProp != null ? valueProp : "").toString());
      }
      let formattedDate;
      if (parsedDate == null || Number.isNaN(parsedDate.getTime())) {
        formattedDate = "";
      } else {
        const localDate = new Date(parsedDate.getTime() - parsedDate.getTimezoneOffset() * 60 * 1e3);
        formattedDate = localDate.toISOString().substr(0, isDateTime ? 16 : 10);
      }
      return {
        parsed: parsedDate,
        formatted: formattedDate
      };
    }, [valueProp, isDateTime]);
    const [valueState, setValueState] = React140.useState(valueTransformed);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses58(ownerState);
    const handleChange = React140.useCallback((event) => {
      const newFormattedDate = event.target.value;
      let newParsedDate;
      if (newFormattedDate === "") {
        newParsedDate = null;
      } else {
        const [date, time] = newFormattedDate.split("T");
        const [year, month, day] = date.split("-");
        newParsedDate = new Date();
        newParsedDate.setFullYear(year, Number(month) - 1, day);
        newParsedDate.setHours(0, 0, 0, 0);
        if (time) {
          const [hours, minutes] = time.split(":");
          newParsedDate.setHours(Number(hours), Number(minutes), 0, 0);
        }
      }
      setValueState({
        parsed: newParsedDate,
        formatted: newFormattedDate
      });
      api.setEditCellValue({
        id,
        field,
        value: newParsedDate
      }, event);
    }, [api, field, id]);
    React140.useEffect(() => {
      setValueState((state) => {
        var _valueTransformed$par, _state$parsed;
        if (valueTransformed.parsed !== state.parsed && ((_valueTransformed$par = valueTransformed.parsed) == null ? void 0 : _valueTransformed$par.getTime()) !== ((_state$parsed = state.parsed) == null ? void 0 : _state$parsed.getTime())) {
          return valueTransformed;
        }
        return state;
      });
    }, [valueTransformed]);
    useEnhancedEffect_default2(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(InputBase_default, _extends({
      inputRef,
      fullWidth: true,
      className: classes.root,
      type: isDateTime ? "datetime-local" : "date",
      inputProps: _extends({
        max: isDateTime ? "9999-12-31T23:59" : "9999-12-31"
      }, inputProps),
      value: valueState.formatted,
      onChange: handleChange
    }, other));
  }
  var renderEditDateCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(GridEditDateCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/colDef/gridDateColDef.js
  function gridDateFormatter({
    value
  }) {
    if (value instanceof Date) {
      return value.toLocaleDateString();
    }
    return value != null ? value : "";
  }
  function gridDateTimeFormatter({
    value
  }) {
    if (value instanceof Date) {
      return value.toLocaleString();
    }
    return value != null ? value : "";
  }
  var GRID_DATE_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "date",
    sortComparator: gridDateComparator,
    valueFormatter: gridDateFormatter,
    filterOperators: getGridDateOperators(),
    renderEditCell: renderEditDateCell
  });
  var GRID_DATETIME_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "dateTime",
    sortComparator: gridDateComparator,
    valueFormatter: gridDateTimeFormatter,
    filterOperators: getGridDateOperators(true),
    renderEditCell: renderEditDateCell
  });

  // node_modules/@mui/x-data-grid/colDef/gridNumericOperators.js
  var parseNumericValue = (value) => {
    if (value == null) {
      return null;
    }
    return Number(value);
  };
  var getGridNumericOperators = () => [{
    label: "=",
    value: "=",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        return parseNumericValue(value) === filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: "!=",
    value: "!=",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        return parseNumericValue(value) !== filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: ">",
    value: ">",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) > filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: ">=",
    value: ">=",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) >= filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: "<",
    value: "<",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) < filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: "<=",
    value: "<=",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) <= filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    value: "isEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value == null;
      };
    }
  }, {
    value: "isNotEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value != null;
      };
    }
  }, {
    value: "isAnyOf",
    getApplyFilterFn: (filterItem) => {
      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
        return null;
      }
      return ({
        value
      }) => {
        return value != null && filterItem.value.includes(Number(value));
      };
    },
    InputComponent: GridFilterInputMultipleValue,
    InputComponentProps: {
      type: "number"
    }
  }];
  var getGridNumericColumnOperators = wrapWithWarningOnCall(getGridNumericOperators, ["MUI: The method getGridNumericColumnOperators is deprecated and will be removed in the next major version.", "Use getGridNumericOperators instead."]);

  // node_modules/@mui/x-data-grid/colDef/gridNumericColDef.js
  var GRID_NUMERIC_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "number",
    align: "right",
    headerAlign: "right",
    sortComparator: gridNumberComparator,
    valueParser: (value) => value === "" ? null : Number(value),
    valueFormatter: ({
      value
    }) => value && isNumber(value) && value.toLocaleString() || value,
    filterOperators: getGridNumericOperators()
  });

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputSingleSelect.js
  var React141 = __toModule(require_react());
  var import_prop_types89 = __toModule(require_prop_types());
  var import_jsx_runtime137 = __toModule(require_jsx_runtime());
  var _excluded85 = ["item", "applyValue", "type", "apiRef", "focusElementRef"];
  var renderSingleSelectOptions3 = ({
    valueOptions,
    valueFormatter,
    field
  }, api, OptionComponent) => {
    const iterableColumnValues = typeof valueOptions === "function" ? ["", ...valueOptions({
      field
    })] : ["", ...valueOptions || []];
    return iterableColumnValues.map((option) => {
      const isOptionTypeObject = typeof option === "object";
      const key = isOptionTypeObject ? option.value : option;
      const value = isOptionTypeObject ? option.value : option;
      const formattedValue = valueFormatter && option !== "" ? valueFormatter({
        value: option,
        field,
        api
      }) : option;
      const content = isOptionTypeObject ? option.label : formattedValue;
      return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(OptionComponent, {
        value,
        children: content
      }, key);
    });
  };
  function GridFilterInputSingleSelect(props) {
    var _item$value, _rootProps$components, _baseSelectProps$nati, _rootProps$components2, _rootProps$components3;
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef
    } = props, others = _objectWithoutPropertiesLoose(props, _excluded85);
    const [filterValueState, setFilterValueState] = React141.useState((_item$value = item.value) != null ? _item$value : "");
    const id = useId_default();
    const rootProps = useGridRootProps();
    const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};
    const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
    const currentColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;
    const currentValueOptions = React141.useMemo(() => {
      return typeof currentColumn.valueOptions === "function" ? currentColumn.valueOptions({
        field: currentColumn.field
      }) : currentColumn.valueOptions;
    }, [currentColumn]);
    const onFilterChange = React141.useCallback((event) => {
      let value = event.target.value;
      value = getValueFromValueOptions(value, currentValueOptions);
      setFilterValueState(String(value));
      applyValue(_extends({}, item, {
        value
      }));
    }, [applyValue, item, currentValueOptions]);
    React141.useEffect(() => {
      var _itemValue;
      let itemValue;
      if (currentValueOptions !== void 0) {
        itemValue = getValueFromValueOptions(item.value, currentValueOptions);
        if (itemValue !== item.value) {
          applyValue(_extends({}, item, {
            value: itemValue
          }));
          return;
        }
      } else {
        itemValue = item.value;
      }
      itemValue = (_itemValue = itemValue) != null ? _itemValue : "";
      setFilterValueState(String(itemValue));
    }, [item, currentValueOptions, applyValue]);
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(rootProps.components.BaseTextField, _extends({
      id,
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
      value: filterValueState,
      onChange: onFilterChange,
      type: type || "text",
      variant: "standard",
      InputLabelProps: {
        shrink: true
      },
      inputRef: focusElementRef,
      select: true,
      SelectProps: _extends({
        native: isSelectNative
      }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect)
    }, others, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseTextField, {
      children: renderSingleSelectOptions3(apiRef.current.getColumn(item.columnField), apiRef.current, isSelectNative ? "option" : MenuItem_default)
    }));
  }
  true ? GridFilterInputSingleSelect.propTypes = {
    apiRef: import_prop_types89.default.any.isRequired,
    applyValue: import_prop_types89.default.func.isRequired,
    focusElementRef: import_prop_types89.default.oneOfType([import_prop_types89.default.func, import_prop_types89.default.object]),
    item: import_prop_types89.default.shape({
      columnField: import_prop_types89.default.string.isRequired,
      id: import_prop_types89.default.oneOfType([import_prop_types89.default.number, import_prop_types89.default.string]),
      operatorValue: import_prop_types89.default.string,
      value: import_prop_types89.default.any
    }).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js
  var React142 = __toModule(require_react());
  var import_prop_types90 = __toModule(require_prop_types());
  var import_jsx_runtime138 = __toModule(require_jsx_runtime());
  var _excluded86 = ["item", "applyValue", "type", "apiRef", "focusElementRef"];
  var isOptionEqualToValue = (option, value) => getValueFromOption(option) === getValueFromOption(value);
  var filter = createFilterOptions();
  function GridFilterInputMultipleSingleSelect(props) {
    const {
      item,
      applyValue,
      apiRef,
      focusElementRef
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded86);
    const id = useId_default();
    const resolvedColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;
    const resolvedValueOptions = React142.useMemo(() => {
      return typeof (resolvedColumn == null ? void 0 : resolvedColumn.valueOptions) === "function" ? resolvedColumn.valueOptions({
        field: resolvedColumn.field
      }) : resolvedColumn == null ? void 0 : resolvedColumn.valueOptions;
    }, [resolvedColumn]);
    const resolvedFormattedValueOptions = React142.useMemo(() => {
      return resolvedValueOptions == null ? void 0 : resolvedValueOptions.map(getValueFromOption);
    }, [resolvedValueOptions]);
    const {
      valueFormatter,
      field
    } = apiRef.current.getColumn(item.columnField);
    const filterValueOptionFormatter = (option) => {
      if (typeof option === "object") {
        return option.label;
      }
      return valueFormatter && option !== "" ? valueFormatter({
        value: option,
        field,
        api: apiRef.current
      }) : option;
    };
    const filterValues = React142.useMemo(() => {
      if (!Array.isArray(item.value)) {
        return [];
      }
      if (resolvedValueOptions !== void 0) {
        const itemValueIndexes = item.value.map((element) => {
          const formattedElement = getValueFromOption(element);
          const index = (resolvedFormattedValueOptions == null ? void 0 : resolvedFormattedValueOptions.findIndex((formatedOption) => formatedOption === formattedElement)) || 0;
          return index;
        });
        return itemValueIndexes.filter((index) => index >= 0).map((index) => resolvedValueOptions[index]);
      }
      return item.value;
    }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);
    React142.useEffect(() => {
      if (!Array.isArray(item.value) || filterValues.length !== item.value.length) {
        applyValue(_extends({}, item, {
          value: filterValues.map(getValueFromOption)
        }));
      }
    }, [item, filterValues, applyValue]);
    const handleChange = React142.useCallback((event, value) => {
      applyValue(_extends({}, item, {
        value: [...value.map(getValueFromOption)]
      }));
    }, [applyValue, item]);
    return /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(Autocomplete_default, _extends({
      multiple: true,
      freeSolo: false,
      limitTags: 1,
      options: resolvedValueOptions,
      isOptionEqualToValue,
      filterOptions: filter,
      id,
      value: filterValues,
      onChange: handleChange,
      renderTags: (value, getTagProps) => value.map((option, index) => /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(Chip_default, _extends({
        variant: "outlined",
        size: "small",
        label: filterValueOptionFormatter(option)
      }, getTagProps({
        index
      })))),
      renderInput: (params) => /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(TextField_default, _extends({}, params, {
        label: apiRef.current.getLocaleText("filterPanelInputLabel"),
        placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
        InputLabelProps: _extends({}, params.InputLabelProps, {
          shrink: true
        }),
        inputRef: focusElementRef,
        type: "singleSelect",
        variant: "standard"
      }))
    }, other));
  }
  true ? GridFilterInputMultipleSingleSelect.propTypes = {
    apiRef: import_prop_types90.default.shape({
      current: import_prop_types90.default.object.isRequired
    }).isRequired,
    applyValue: import_prop_types90.default.func.isRequired,
    focusElementRef: import_prop_types90.default.oneOfType([import_prop_types90.default.func, import_prop_types90.default.object]),
    item: import_prop_types90.default.shape({
      columnField: import_prop_types90.default.string.isRequired,
      id: import_prop_types90.default.oneOfType([import_prop_types90.default.number, import_prop_types90.default.string]),
      operatorValue: import_prop_types90.default.string,
      value: import_prop_types90.default.any
    }).isRequired,
    type: import_prop_types90.default.oneOf(["singleSelect"])
  } : void 0;

  // node_modules/@mui/x-data-grid/colDef/gridSingleSelectOperators.js
  var parseObjectValue = (value) => {
    if (value == null || typeof value !== "object") {
      return value;
    }
    return value.value;
  };
  var getGridSingleSelectOperators = () => [{
    value: "is",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || filterItem.value === "") {
        return null;
      }
      return ({
        value
      }) => parseObjectValue(value) === parseObjectValue(filterItem.value);
    },
    InputComponent: GridFilterInputSingleSelect
  }, {
    value: "not",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || filterItem.value === "") {
        return null;
      }
      return ({
        value
      }) => parseObjectValue(value) !== parseObjectValue(filterItem.value);
    },
    InputComponent: GridFilterInputSingleSelect
  }, {
    value: "isAnyOf",
    getApplyFilterFn: (filterItem) => {
      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
        return null;
      }
      const filterItemValues = filterItem.value.map(parseObjectValue);
      return ({
        value
      }) => filterItemValues.includes(parseObjectValue(value));
    },
    InputComponent: GridFilterInputMultipleSingleSelect
  }];

  // node_modules/@mui/x-data-grid/colDef/gridSingleSelectColDef.js
  var GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "singleSelect",
    renderEditCell: renderEditSingleSelectCell,
    filterOperators: getGridSingleSelectOperators()
  });

  // node_modules/@mui/x-data-grid/colDef/gridDefaultColumnTypes.js
  var DEFAULT_GRID_COL_TYPE_KEY = "__default__";
  var getGridDefaultColumnTypes = () => {
    const nativeColumnTypes = {
      string: GRID_STRING_COL_DEF,
      number: GRID_NUMERIC_COL_DEF,
      date: GRID_DATE_COL_DEF,
      dateTime: GRID_DATETIME_COL_DEF,
      boolean: GRID_BOOLEAN_COL_DEF,
      singleSelect: GRID_SINGLE_SELECT_COL_DEF,
      [GRID_ACTIONS_COLUMN_TYPE]: GRID_ACTIONS_COL_DEF,
      [DEFAULT_GRID_COL_TYPE_KEY]: GRID_STRING_COL_DEF
    };
    return nativeColumnTypes;
  };

  // node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js
  var COLUMNS_DIMENSION_PROPERTIES = ["maxWidth", "minWidth", "width", "flex"];
  var computeColumnTypes = (customColumnTypes = {}) => {
    const mergedColumnTypes = _extends({}, getGridDefaultColumnTypes());
    Object.entries(customColumnTypes).forEach(([colType, colTypeDef]) => {
      if (mergedColumnTypes[colType]) {
        mergedColumnTypes[colType] = _extends({}, mergedColumnTypes[colType], colTypeDef);
      } else {
        mergedColumnTypes[colType] = _extends({}, mergedColumnTypes[colTypeDef.extendType || DEFAULT_GRID_COL_TYPE_KEY], colTypeDef);
      }
    });
    return mergedColumnTypes;
  };
  function computeFlexColumnsWidth({
    initialFreeSpace,
    totalFlexUnits,
    flexColumns
  }) {
    const flexColumnsLookup = {
      all: {},
      frozenFields: [],
      freeze: (field) => {
        const value = flexColumnsLookup.all[field];
        if (value && value.frozen !== true) {
          flexColumnsLookup.all[field].frozen = true;
          flexColumnsLookup.frozenFields.push(field);
        }
      }
    };
    function loopOverFlexItems() {
      if (flexColumnsLookup.frozenFields.length === flexColumns.length) {
        return;
      }
      const violationsLookup = {
        min: {},
        max: {}
      };
      let remainingFreeSpace = initialFreeSpace;
      let flexUnits = totalFlexUnits;
      let totalViolation = 0;
      flexColumnsLookup.frozenFields.forEach((field) => {
        remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;
        flexUnits -= flexColumnsLookup.all[field].flex;
      });
      for (let i = 0; i < flexColumns.length; i += 1) {
        const column2 = flexColumns[i];
        if (flexColumnsLookup.all[column2.field] && flexColumnsLookup.all[column2.field].frozen === true) {
          continue;
        }
        const widthPerFlexUnit = remainingFreeSpace / flexUnits;
        let computedWidth = widthPerFlexUnit * column2.flex;
        if (computedWidth < column2.minWidth) {
          totalViolation += column2.minWidth - computedWidth;
          computedWidth = column2.minWidth;
          violationsLookup.min[column2.field] = true;
        } else if (computedWidth > column2.maxWidth) {
          totalViolation += column2.maxWidth - computedWidth;
          computedWidth = column2.maxWidth;
          violationsLookup.max[column2.field] = true;
        }
        flexColumnsLookup.all[column2.field] = {
          frozen: false,
          computedWidth,
          flex: column2.flex
        };
      }
      if (totalViolation < 0) {
        Object.keys(violationsLookup.max).forEach((field) => {
          flexColumnsLookup.freeze(field);
        });
      } else if (totalViolation > 0) {
        Object.keys(violationsLookup.min).forEach((field) => {
          flexColumnsLookup.freeze(field);
        });
      } else {
        flexColumns.forEach(({
          field
        }) => {
          flexColumnsLookup.freeze(field);
        });
      }
      loopOverFlexItems();
    }
    loopOverFlexItems();
    return flexColumnsLookup.all;
  }
  var hydrateColumnsWidth = (rawState, viewportInnerWidth) => {
    const columnsLookup = {};
    let totalFlexUnits = 0;
    let widthAllocatedBeforeFlex = 0;
    const flexColumns = [];
    rawState.all.forEach((columnField) => {
      const newColumn = _extends({}, rawState.lookup[columnField]);
      if (rawState.columnVisibilityModel[columnField] === false) {
        newColumn.computedWidth = 0;
      } else {
        let computedWidth;
        if (newColumn.flex && newColumn.flex > 0) {
          totalFlexUnits += newColumn.flex;
          computedWidth = 0;
          flexColumns.push(newColumn);
        } else {
          computedWidth = clamp2(newColumn.width, newColumn.minWidth, newColumn.maxWidth);
        }
        widthAllocatedBeforeFlex += computedWidth;
        newColumn.computedWidth = computedWidth;
      }
      columnsLookup[columnField] = newColumn;
    });
    const initialFreeSpace = Math.max(viewportInnerWidth - widthAllocatedBeforeFlex, 0);
    if (totalFlexUnits > 0 && viewportInnerWidth > 0) {
      const computedColumnWidths = computeFlexColumnsWidth({
        initialFreeSpace,
        totalFlexUnits,
        flexColumns
      });
      Object.keys(computedColumnWidths).forEach((field) => {
        columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;
      });
    }
    return _extends({}, rawState, {
      lookup: columnsLookup
    });
  };
  var columnTypeWarnedOnce = false;
  var applyInitialState = (columnsState, initialState) => {
    if (!initialState) {
      return columnsState;
    }
    const {
      orderedFields = [],
      dimensions = {}
    } = initialState;
    const columnsWithUpdatedDimensions = Object.keys(dimensions);
    if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {
      return columnsState;
    }
    const orderedFieldsLookup = {};
    const cleanOrderedFields = [];
    for (let i = 0; i < orderedFields.length; i += 1) {
      const field = orderedFields[i];
      if (columnsState.lookup[field]) {
        orderedFieldsLookup[field] = true;
        cleanOrderedFields.push(field);
      }
    }
    const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.all : [...cleanOrderedFields, ...columnsState.all.filter((field) => !orderedFieldsLookup[field])];
    const newColumnLookup = _extends({}, columnsState.lookup);
    for (let i = 0; i < columnsWithUpdatedDimensions.length; i += 1) {
      const field = columnsWithUpdatedDimensions[i];
      const newColDef = _extends({}, newColumnLookup[field], {
        hasBeenResized: true
      });
      Object.entries(dimensions[field]).forEach(([key, value]) => {
        newColDef[key] = value === -1 ? Infinity : value;
      });
      newColumnLookup[field] = newColDef;
    }
    const newColumnsState = {
      all: newOrderedFields,
      lookup: newColumnLookup
    };
    return newColumnsState;
  };
  var getGridColDef = (columnTypes, type) => {
    if (!type) {
      return columnTypes[DEFAULT_GRID_COL_TYPE_KEY];
    }
    if (true) {
      if (!columnTypeWarnedOnce && !columnTypes[type]) {
        console.warn([`MUI: The column type "${type}" you are using is not supported.`, `Column type "string" is being used instead.`].join("\n"));
        columnTypeWarnedOnce = true;
      }
    }
    if (!columnTypes[type]) {
      return columnTypes[DEFAULT_GRID_COL_TYPE_KEY];
    }
    return columnTypes[type];
  };
  var createColumnsState = ({
    apiRef,
    columnsToUpsert,
    initialState,
    columnTypes,
    currentColumnVisibilityModel = gridColumnVisibilityModelSelector(apiRef),
    shouldRegenColumnVisibilityModelFromColumns,
    keepOnlyColumnsToUpsert = false
  }) => {
    var _apiRef$current$getRo, _apiRef$current$getRo2, _apiRef$current, _apiRef$current$getRo3;
    const isInsideStateInitializer = !apiRef.current.state.columns;
    let columnsStateWithoutColumnVisibilityModel;
    if (isInsideStateInitializer) {
      columnsStateWithoutColumnVisibilityModel = {
        all: [],
        lookup: {}
      };
    } else {
      const currentState = gridColumnsSelector(apiRef.current.state);
      columnsStateWithoutColumnVisibilityModel = {
        all: keepOnlyColumnsToUpsert ? [] : [...currentState.all],
        lookup: _extends({}, currentState.lookup)
      };
    }
    let columnsToKeep = {};
    if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
      columnsToKeep = Object.keys(columnsStateWithoutColumnVisibilityModel.lookup).reduce((acc, key) => _extends({}, acc, {
        [key]: false
      }), {});
    }
    const columnsToUpsertLookup = {};
    columnsToUpsert.forEach((newColumn) => {
      const {
        field
      } = newColumn;
      columnsToUpsertLookup[field] = true;
      columnsToKeep[field] = true;
      let existingState = columnsStateWithoutColumnVisibilityModel.lookup[field];
      if (existingState == null) {
        existingState = _extends({}, getGridColDef(columnTypes, newColumn.type), {
          field,
          hasBeenResized: false
        });
        columnsStateWithoutColumnVisibilityModel.all.push(field);
      } else if (keepOnlyColumnsToUpsert) {
        columnsStateWithoutColumnVisibilityModel.all.push(field);
      }
      let hasBeenResized = existingState.hasBeenResized;
      COLUMNS_DIMENSION_PROPERTIES.forEach((key) => {
        if (newColumn[key] !== void 0) {
          hasBeenResized = true;
          if (newColumn[key] === -1) {
            newColumn[key] = Infinity;
          }
        }
      });
      columnsStateWithoutColumnVisibilityModel.lookup[field] = _extends({}, existingState, {
        hide: newColumn.hide == null ? false : newColumn.hide
      }, newColumn, {
        hasBeenResized
      });
    });
    if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
      Object.keys(columnsStateWithoutColumnVisibilityModel.lookup).forEach((field) => {
        if (!columnsToKeep[field]) {
          delete columnsStateWithoutColumnVisibilityModel.lookup[field];
        }
      });
    }
    const columnsLookupBeforePreProcessing = _extends({}, columnsStateWithoutColumnVisibilityModel.lookup);
    const columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors("hydrateColumns", columnsStateWithoutColumnVisibilityModel);
    let columnVisibilityModel = {};
    if (shouldRegenColumnVisibilityModelFromColumns) {
      let hasModelChanged = false;
      const newColumnVisibilityModel = _extends({}, currentColumnVisibilityModel);
      if (isInsideStateInitializer) {
        columnsStateWithPreProcessing.all.forEach((field) => {
          newColumnVisibilityModel[field] = !columnsStateWithoutColumnVisibilityModel.lookup[field].hide;
        });
      } else if (keepOnlyColumnsToUpsert) {
        Object.keys(newColumnVisibilityModel).forEach((field) => {
          if (!columnsStateWithPreProcessing.lookup[field]) {
            delete newColumnVisibilityModel[field];
            hasModelChanged = true;
          }
        });
      }
      columnsStateWithPreProcessing.all.forEach((field) => {
        if (!columnsToUpsertLookup[field] && columnsLookupBeforePreProcessing[field] === columnsStateWithPreProcessing.lookup[field]) {
          return;
        }
        let isVisibleBefore = currentColumnVisibilityModel[field];
        if (isVisibleBefore === void 0) {
          if (isInsideStateInitializer) {
            isVisibleBefore = true;
          } else {
            const currentState = gridColumnsSelector(apiRef.current.state);
            isVisibleBefore = !!currentState.lookup[field];
          }
        }
        const isVisibleAfter = !columnsStateWithPreProcessing.lookup[field].hide;
        if (isVisibleAfter !== isVisibleBefore) {
          hasModelChanged = true;
          newColumnVisibilityModel[field] = isVisibleAfter;
        }
      });
      if (hasModelChanged || isInsideStateInitializer) {
        columnVisibilityModel = newColumnVisibilityModel;
      } else {
        columnVisibilityModel = currentColumnVisibilityModel;
      }
    } else {
      columnVisibilityModel = currentColumnVisibilityModel;
    }
    const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);
    const columnsState = _extends({}, columnsStateWithPortableColumns, {
      columnVisibilityModel
    });
    return hydrateColumnsWidth(columnsState, (_apiRef$current$getRo = (_apiRef$current$getRo2 = (_apiRef$current = apiRef.current).getRootDimensions) == null ? void 0 : (_apiRef$current$getRo3 = _apiRef$current$getRo2.call(_apiRef$current)) == null ? void 0 : _apiRef$current$getRo3.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0);
  };
  var mergeColumnsState = (columnsState) => (state) => _extends({}, state, {
    columns: columnsState
  });
  function getFirstNonSpannedColumnToRender({
    firstColumnToRender,
    apiRef,
    firstRowToRender,
    lastRowToRender,
    visibleRows
  }) {
    let firstNonSpannedColumnToRender = firstColumnToRender;
    for (let i = firstRowToRender; i < lastRowToRender; i += 1) {
      const row = visibleRows[i];
      if (row) {
        const rowId = visibleRows[i].id;
        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);
        if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {
          firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;
        }
      }
    }
    return firstNonSpannedColumnToRender;
  }
  function getFirstColumnIndexToRender({
    firstColumnIndex,
    minColumnIndex,
    columnBuffer,
    firstRowToRender,
    lastRowToRender,
    apiRef,
    visibleRows
  }) {
    const initialFirstColumnToRender = Math.max(firstColumnIndex - columnBuffer, minColumnIndex);
    const firstColumnToRender = getFirstNonSpannedColumnToRender({
      firstColumnToRender: initialFirstColumnToRender,
      apiRef,
      firstRowToRender,
      lastRowToRender,
      visibleRows
    });
    return firstColumnToRender;
  }

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/HideGridColMenuItem.js
  var import_jsx_runtime139 = __toModule(require_jsx_runtime());
  var HideGridColMenuItem = (props) => {
    const {
      column: column2,
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const timeoutRef = React143.useRef();
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
    const columnsWithMenu = visibleColumns.filter((col) => col.disableColumnMenu !== true);
    const disabled = columnsWithMenu.length === 1;
    const toggleColumn = React143.useCallback((event) => {
      if (disabled) {
        return;
      }
      onClick(event);
      timeoutRef.current = setTimeout(() => {
        apiRef.current.setColumnVisibility(column2 == null ? void 0 : column2.field, false);
      }, 100);
    }, [apiRef, column2 == null ? void 0 : column2.field, onClick, disabled]);
    React143.useEffect(() => {
      return () => clearTimeout(timeoutRef.current);
    }, []);
    if (rootProps.disableColumnSelector) {
      return null;
    }
    if (column2.hideable === false) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(MenuItem_default, {
      onClick: toggleColumn,
      disabled,
      children: apiRef.current.getLocaleText("columnMenuHideColumn")
    });
  };
  true ? HideGridColMenuItem.propTypes = {
    column: import_prop_types91.default.object.isRequired,
    onClick: import_prop_types91.default.func.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/SortGridMenuItems.js
  var React144 = __toModule(require_react());
  var import_prop_types92 = __toModule(require_prop_types());
  var import_jsx_runtime140 = __toModule(require_jsx_runtime());
  var import_jsx_runtime141 = __toModule(require_jsx_runtime());
  var SortGridMenuItems = (props) => {
    const {
      column: column2,
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const sortModel = useGridSelector(apiRef, gridSortModelSelector);
    const sortDirection = React144.useMemo(() => {
      if (!column2) {
        return null;
      }
      const sortItem = sortModel.find((item) => item.field === column2.field);
      return sortItem == null ? void 0 : sortItem.sort;
    }, [column2, sortModel]);
    const onSortMenuItemClick = React144.useCallback((event) => {
      onClick(event);
      const direction = event.currentTarget.getAttribute("data-value") || null;
      apiRef.current.sortColumn(column2, direction);
    }, [apiRef, column2, onClick]);
    if (!column2 || !column2.sortable) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(React144.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime140.jsx)(MenuItem_default, {
        onClick: onSortMenuItemClick,
        disabled: sortDirection == null,
        children: apiRef.current.getLocaleText("columnMenuUnsort")
      }), /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(MenuItem_default, {
        onClick: onSortMenuItemClick,
        "data-value": "asc",
        disabled: sortDirection === "asc",
        children: apiRef.current.getLocaleText("columnMenuSortAsc")
      }), /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(MenuItem_default, {
        onClick: onSortMenuItemClick,
        "data-value": "desc",
        disabled: sortDirection === "desc",
        children: apiRef.current.getLocaleText("columnMenuSortDesc")
      })]
    });
  };
  true ? SortGridMenuItems.propTypes = {
    column: import_prop_types92.default.object.isRequired,
    onClick: import_prop_types92.default.func.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenu.js
  var import_jsx_runtime142 = __toModule(require_jsx_runtime());
  var GridColumnMenu = /* @__PURE__ */ React145.forwardRef(function GridColumnMenu2(props, ref) {
    const {
      hideMenu,
      currentColumn
    } = props;
    const apiRef = useGridApiContext();
    const defaultButtons = [
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(SortGridMenuItems, {
        onClick: hideMenu,
        column: currentColumn
      }),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(GridFilterMenuItem, {
        onClick: hideMenu,
        column: currentColumn
      }),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(HideGridColMenuItem, {
        onClick: hideMenu,
        column: currentColumn
      }),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(GridColumnsMenuItem, {
        onClick: hideMenu,
        column: currentColumn
      })
    ];
    const preProcessedButtons = apiRef.current.unstable_applyPipeProcessors("columnMenu", defaultButtons, currentColumn);
    return /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(GridColumnMenuContainer, _extends({
      ref
    }, props, {
      children: preProcessedButtons.map((button, index) => /* @__PURE__ */ React145.cloneElement(button, {
        key: index,
        onClick: hideMenu,
        column: currentColumn
      }))
    }));
  });
  true ? GridColumnMenu.propTypes = {
    currentColumn: import_prop_types93.default.object.isRequired,
    hideMenu: import_prop_types93.default.func.isRequired,
    id: import_prop_types93.default.string,
    labelledby: import_prop_types93.default.string,
    open: import_prop_types93.default.bool.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/GridColumnsPanel.js
  var React150 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/components/panel/GridPanelContent.js
  var React146 = __toModule(require_react());
  var import_jsx_runtime143 = __toModule(require_jsx_runtime());
  var _excluded87 = ["className"];
  var useUtilityClasses59 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelContent"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridPanelContentRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "PanelContent",
    overridesResolver: (props, styles4) => styles4.panelContent
  })({
    display: "flex",
    flexDirection: "column",
    overflow: "auto",
    flex: "1 1",
    maxHeight: 400
  });
  function GridPanelContent(props) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded87);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses59(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(GridPanelContentRoot, _extends({
      className: clsx_m_default(className, classes.root)
    }, other));
  }

  // node_modules/@mui/x-data-grid/components/panel/GridPanelFooter.js
  var React147 = __toModule(require_react());
  var import_jsx_runtime144 = __toModule(require_jsx_runtime());
  var _excluded88 = ["className"];
  var useUtilityClasses60 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelFooter"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridPanelFooterRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "PanelFooter",
    overridesResolver: (props, styles4) => styles4.panelFooter
  })(({
    theme
  }) => ({
    padding: theme.spacing(0.5),
    display: "flex",
    justifyContent: "space-between"
  }));
  function GridPanelFooter(props) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded88);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses60(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(GridPanelFooterRoot, _extends({
      className: clsx_m_default(className, classes.root)
    }, other));
  }

  // node_modules/@mui/x-data-grid/components/panel/GridPanelHeader.js
  var React148 = __toModule(require_react());
  var import_jsx_runtime145 = __toModule(require_jsx_runtime());
  var _excluded89 = ["className"];
  var useUtilityClasses61 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelHeader"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridPanelHeaderRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "PanelHeader",
    overridesResolver: (props, styles4) => styles4.panelHeader
  })(({
    theme
  }) => ({
    padding: theme.spacing(1)
  }));
  function GridPanelHeader(props) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded89);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses61(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(GridPanelHeaderRoot, _extends({
      className: clsx_m_default(className, classes.root)
    }, other));
  }

  // node_modules/@mui/x-data-grid/components/panel/GridPanelWrapper.js
  var React149 = __toModule(require_react());
  var import_jsx_runtime146 = __toModule(require_jsx_runtime());
  var _excluded90 = ["className"];
  var useUtilityClasses62 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelWrapper"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridPanelWrapperRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "PanelWrapper",
    overridesResolver: (props, styles4) => styles4.panelWrapper
  })({
    display: "flex",
    flexDirection: "column",
    flex: 1,
    "&:focus": {
      outline: 0
    }
  });
  var isEnabled = () => true;
  function GridPanelWrapper(props) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded90);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses62(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(TrapFocus_default, {
      open: true,
      disableEnforceFocus: true,
      isEnabled,
      children: /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(GridPanelWrapperRoot, _extends({
        tabIndex: -1,
        className: clsx_m_default(className, classes.root)
      }, other))
    });
  }

  // node_modules/@mui/x-data-grid/constants/envConstants.js
  var experimentalEnabled = false;
  if (typeof process !== "undefined" && process.env.GRID_EXPERIMENTAL_ENABLED !== void 0 && localStorageAvailable() && window.localStorage.getItem("GRID_EXPERIMENTAL_ENABLED")) {
    experimentalEnabled = window.localStorage.getItem("GRID_EXPERIMENTAL_ENABLED") === "true";
  } else if (typeof process !== "undefined") {
    experimentalEnabled = process.env.GRID_EXPERIMENTAL_ENABLED === "true";
  }
  var GRID_EXPERIMENTAL_ENABLED = experimentalEnabled;

  // node_modules/@mui/x-data-grid/components/panel/GridColumnsPanel.js
  var import_jsx_runtime147 = __toModule(require_jsx_runtime());
  var import_jsx_runtime148 = __toModule(require_jsx_runtime());
  var useUtilityClasses63 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["columnsPanel"],
      columnsPanelRow: ["columnsPanelRow"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridColumnsPanelRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ColumnsPanel",
    overridesResolver: (props, styles4) => styles4.columnsPanel
  })(() => ({
    padding: "8px 0px 8px 8px"
  }));
  var GridColumnsPanelRowRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ColumnsPanelRow",
    overridesResolver: (props, styles4) => styles4.columnsPanelRow
  })(({
    theme
  }) => ({
    display: "flex",
    justifyContent: "space-between",
    padding: "1px 8px 1px 7px",
    [`& .${switchClasses_default.root}`]: {
      marginRight: theme.spacing(0.5)
    }
  }));
  var GridIconButtonRoot = styled_default(IconButton_default)({
    justifyContent: "flex-end"
  });
  function GridColumnsPanel(props) {
    var _rootProps$components, _rootProps$components3, _rootProps$components4;
    const apiRef = useGridApiContext();
    const searchInputRef = React150.useRef(null);
    const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);
    const columnVisibilityModel = useGridSelector(apiRef, gridColumnVisibilityModelSelector);
    const rootProps = useGridRootProps();
    const [searchValue, setSearchValue] = React150.useState("");
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses63(ownerState);
    const toggleColumn = (event) => {
      const {
        name: field
      } = event.target;
      apiRef.current.setColumnVisibility(field, columnVisibilityModel[field] === false);
    };
    const toggleAllColumns = React150.useCallback((isVisible) => {
      apiRef.current.updateColumns(columns.map((col) => {
        if (col.hideable !== false) {
          return {
            field: col.field,
            hide: !isVisible
          };
        }
        return col;
      }));
    }, [apiRef, columns]);
    const handleSearchValueChange = React150.useCallback((event) => {
      setSearchValue(event.target.value);
    }, []);
    const currentColumns = React150.useMemo(() => {
      if (!searchValue) {
        return columns;
      }
      const searchValueToCheck = searchValue.toLowerCase();
      return columns.filter((column2) => (column2.headerName || column2.field).toLowerCase().indexOf(searchValueToCheck) > -1);
    }, [columns, searchValue]);
    React150.useEffect(() => {
      searchInputRef.current.focus();
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime148.jsxs)(GridPanelWrapper, _extends({}, props, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime147.jsx)(GridPanelHeader, {
        children: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(rootProps.components.BaseTextField, _extends({
          label: apiRef.current.getLocaleText("columnsPanelTextFieldLabel"),
          placeholder: apiRef.current.getLocaleText("columnsPanelTextFieldPlaceholder"),
          inputRef: searchInputRef,
          value: searchValue,
          onChange: handleSearchValueChange,
          variant: "standard",
          fullWidth: true
        }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField))
      }), /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(GridPanelContent, {
        children: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(GridColumnsPanelRoot, {
          className: classes.root,
          children: currentColumns.map((column2) => {
            var _rootProps$components2;
            return /* @__PURE__ */ (0, import_jsx_runtime148.jsxs)(GridColumnsPanelRowRoot, {
              className: classes.columnsPanelRow,
              children: [/* @__PURE__ */ (0, import_jsx_runtime147.jsx)(FormControlLabel_default, {
                control: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(rootProps.components.BaseSwitch, _extends({
                  disabled: column2.hideable === false,
                  checked: columnVisibilityModel[column2.field] !== false,
                  onClick: toggleColumn,
                  name: column2.field,
                  color: "primary",
                  size: "small"
                }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSwitch)),
                label: column2.headerName || column2.field
              }), !rootProps.disableColumnReorder && GRID_EXPERIMENTAL_ENABLED && /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(GridIconButtonRoot, {
                draggable: true,
                "aria-label": apiRef.current.getLocaleText("columnsPanelDragIconLabel"),
                title: apiRef.current.getLocaleText("columnsPanelDragIconLabel"),
                size: "small",
                disabled: true,
                children: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(GridDragIcon, {})
              })]
            }, column2.field);
          })
        })
      }), /* @__PURE__ */ (0, import_jsx_runtime148.jsxs)(GridPanelFooter, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime147.jsx)(rootProps.components.BaseButton, _extends({
          onClick: () => toggleAllColumns(false),
          color: "primary"
        }, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseButton, {
          children: apiRef.current.getLocaleText("columnsPanelHideAllButton")
        })), /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(rootProps.components.BaseButton, _extends({
          onClick: () => toggleAllColumns(true),
          color: "primary"
        }, (_rootProps$components4 = rootProps.componentsProps) == null ? void 0 : _rootProps$components4.baseButton, {
          children: apiRef.current.getLocaleText("columnsPanelShowAllButton")
        }))]
      })]
    }));
  }

  // node_modules/@mui/x-data-grid/components/panel/GridPanel.js
  var React151 = __toModule(require_react());
  var import_prop_types94 = __toModule(require_prop_types());
  var import_jsx_runtime149 = __toModule(require_jsx_runtime());
  var _excluded91 = ["children", "className", "classes"];
  var gridPanelClasses = generateUtilityClasses("MuiDataGrid", ["panel", "paper"]);
  var GridPanelRoot = styled_default(Popper_default, {
    name: "MuiDataGrid",
    slot: "Panel",
    overridesResolver: (props, styles4) => styles4.panel
  })(({
    theme
  }) => ({
    zIndex: theme.zIndex.modal
  }));
  var GridPaperRoot = styled_default(Paper_default, {
    name: "MuiDataGrid",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })(({
    theme
  }) => ({
    backgroundColor: theme.palette.background.paper,
    minWidth: 300,
    maxHeight: 450,
    display: "flex"
  }));
  var GridPanel = /* @__PURE__ */ React151.forwardRef((props, ref) => {
    var _apiRef$current$colum;
    const {
      children,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded91);
    const apiRef = useGridApiContext();
    const classes = gridPanelClasses;
    const [isPlaced, setIsPlaced] = React151.useState(false);
    const handleClickAway = React151.useCallback(() => {
      apiRef.current.hidePreferences();
    }, [apiRef]);
    const handleKeyDown2 = React151.useCallback((event) => {
      if (isEscapeKey(event.key)) {
        apiRef.current.hidePreferences();
      }
    }, [apiRef]);
    const modifiers = React151.useMemo(() => [{
      name: "flip",
      enabled: false
    }, {
      name: "isPlaced",
      enabled: true,
      phase: "main",
      fn: () => {
        setIsPlaced(true);
      },
      effect: () => () => {
        setIsPlaced(false);
      }
    }], []);
    const anchorEl = (_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current;
    if (!anchorEl) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(GridPanelRoot, _extends({
      ref,
      placement: "bottom-start",
      className: clsx_m_default(className, classes.panel),
      anchorEl,
      modifiers
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(ClickAwayListener_default, {
        mouseEvent: "onMouseUp",
        onClickAway: handleClickAway,
        children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(GridPaperRoot, {
          className: classes.paper,
          elevation: 8,
          onKeyDown: handleKeyDown2,
          children: isPlaced && children
        })
      })
    }));
  });
  true ? GridPanel.propTypes = {
    classes: import_prop_types94.default.object,
    open: import_prop_types94.default.bool.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/GridPreferencesPanel.js
  var React152 = __toModule(require_react());
  var import_jsx_runtime150 = __toModule(require_jsx_runtime());
  var GridPreferencesPanel = /* @__PURE__ */ React152.forwardRef(function GridPreferencesPanel2(props, ref) {
    var _preferencePanelState, _rootProps$components, _rootProps$components2;
    const apiRef = useGridApiContext();
    const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);
    const rootProps = useGridRootProps();
    const preferencePanelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);
    const panelContent = apiRef.current.unstable_applyPipeProcessors("preferencePanel", null, (_preferencePanelState = preferencePanelState.openedPanelValue) != null ? _preferencePanelState : GridPreferencePanelsValue.filters);
    return /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(rootProps.components.Panel, _extends({
      ref,
      as: rootProps.components.BasePopper,
      open: columns.length > 0 && preferencePanelState.open
    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.panel, props, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.basePopper, {
      children: panelContent
    }));
  });

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterForm.js
  var React153 = __toModule(require_react());
  var import_prop_types95 = __toModule(require_prop_types());
  var import_jsx_runtime151 = __toModule(require_jsx_runtime());
  var import_jsx_runtime152 = __toModule(require_jsx_runtime());
  var useUtilityClasses64 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["filterForm"],
      deleteIcon: ["filterFormDeleteIcon"],
      linkOperatorInput: ["filterFormLinkOperatorInput"],
      columnInput: ["filterFormColumnInput"],
      operatorInput: ["filterFormOperatorInput"],
      valueInput: ["filterFormValueInput"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridFilterFormRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "FilterForm",
    overridesResolver: (props, styles4) => styles4.filterForm
  })(({
    theme
  }) => ({
    display: "flex",
    padding: theme.spacing(1)
  }));
  var FilterFormDeleteIcon = styled_default(FormControl_default, {
    name: "MuiDataGrid",
    slot: "FilterFormDeleteIcon",
    overridesResolver: (_3, styles4) => styles4.filterFormDeleteIcon
  })(({
    theme
  }) => ({
    flexShrink: 0,
    justifyContent: "flex-end",
    marginRight: theme.spacing(0.5),
    marginBottom: theme.spacing(0.2)
  }));
  var FilterFormLinkOperatorInput = styled_default(FormControl_default, {
    name: "MuiDataGrid",
    slot: "FilterFormLinkOperatorInput",
    overridesResolver: (_3, styles4) => styles4.filterFormLinkOperatorInput
  })({
    minWidth: 55,
    marginRight: 5,
    justifyContent: "end"
  });
  var FilterFormColumnInput = styled_default(FormControl_default, {
    name: "MuiDataGrid",
    slot: "FilterFormColumnInput",
    overridesResolver: (_3, styles4) => styles4.filterFormColumnInput
  })({
    width: 150
  });
  var FilterFormOperatorInput = styled_default(FormControl_default, {
    name: "MuiDataGrid",
    slot: "FilterFormOperatorInput",
    overridesResolver: (_3, styles4) => styles4.filterFormOperatorInput
  })({
    width: 120
  });
  var FilterFormValueInput = styled_default(FormControl_default, {
    name: "MuiDataGrid",
    slot: "FilterFormValueInput",
    overridesResolver: (_3, styles4) => styles4.filterFormValueInput
  })({
    width: 190
  });
  var getLinkOperatorLocaleKey = (linkOperator) => {
    switch (linkOperator) {
      case GridLinkOperator.And:
        return "filterPanelOperatorAnd";
      case GridLinkOperator.Or:
        return "filterPanelOperatorOr";
      default:
        throw new Error("MUI: Invalid `linkOperator` property in the `GridFilterPanel`.");
    }
  };
  var getColumnLabel = (col) => col.headerName || col.field;
  var collator2 = new Intl.Collator();
  function GridFilterForm(props) {
    var _rootProps$components, _rootProps$components2, _baseSelectProps$nati, _rootProps$components3, _rootProps$components4, _rootProps$components5, _currentColumn$filter2;
    const {
      item,
      hasMultipleFilters,
      deleteFilter,
      applyFilterChanges,
      multiFilterOperator,
      showMultiFilterOperators,
      disableMultiFilterOperator,
      applyMultiFilterOperatorChanges,
      focusElementRef,
      linkOperators = [GridLinkOperator.And, GridLinkOperator.Or],
      columnsSort,
      deleteIconProps = {},
      linkOperatorInputProps = {},
      operatorInputProps = {},
      columnInputProps = {},
      valueInputProps = {}
    } = props;
    const apiRef = useGridApiContext();
    const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);
    const columnSelectId = useId_default();
    const columnSelectLabelId = useId_default();
    const operatorSelectId = useId_default();
    const operatorSelectLabelId = useId_default();
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses64(ownerState);
    const valueRef = React153.useRef(null);
    const filterSelectorRef = React153.useRef(null);
    const hasLinkOperatorColumn = hasMultipleFilters && linkOperators.length > 0;
    const baseFormControlProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseFormControl) || {};
    const baseSelectProps = ((_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect) || {};
    const isBaseSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
    const OptionComponent = isBaseSelectNative ? "option" : MenuItem_default;
    const sortedFilterableColumns = React153.useMemo(() => {
      switch (columnsSort) {
        case "asc":
          return filterableColumns.sort((a, b) => collator2.compare(getColumnLabel(a), getColumnLabel(b)));
        case "desc":
          return filterableColumns.sort((a, b) => -collator2.compare(getColumnLabel(a), getColumnLabel(b)));
        default:
          return filterableColumns;
      }
    }, [filterableColumns, columnsSort]);
    const currentColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;
    const currentOperator = React153.useMemo(() => {
      var _currentColumn$filter;
      if (!item.operatorValue || !currentColumn) {
        return null;
      }
      return (_currentColumn$filter = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter.find((operator) => operator.value === item.operatorValue);
    }, [item, currentColumn]);
    const changeColumn = React153.useCallback((event) => {
      const columnField = event.target.value;
      const column2 = apiRef.current.getColumn(columnField);
      if (column2.field === currentColumn.field) {
        return;
      }
      const newOperator = column2.filterOperators.find((operator) => operator.value === item.operatorValue) || column2.filterOperators[0];
      const eraseItemValue = !newOperator.InputComponent || newOperator.InputComponent !== (currentOperator == null ? void 0 : currentOperator.InputComponent);
      applyFilterChanges(_extends({}, item, {
        columnField,
        operatorValue: newOperator.value,
        value: eraseItemValue ? void 0 : item.value
      }));
    }, [apiRef, applyFilterChanges, item, currentColumn, currentOperator]);
    const changeOperator = React153.useCallback((event) => {
      const operatorValue = event.target.value;
      const newOperator = currentColumn == null ? void 0 : currentColumn.filterOperators.find((operator) => operator.value === operatorValue);
      const eraseItemValue = !(newOperator != null && newOperator.InputComponent) || (newOperator == null ? void 0 : newOperator.InputComponent) !== (currentOperator == null ? void 0 : currentOperator.InputComponent);
      applyFilterChanges(_extends({}, item, {
        operatorValue,
        value: eraseItemValue ? void 0 : item.value
      }));
    }, [applyFilterChanges, item, currentColumn, currentOperator]);
    const changeLinkOperator = React153.useCallback((event) => {
      const linkOperator = event.target.value === GridLinkOperator.And.toString() ? GridLinkOperator.And : GridLinkOperator.Or;
      applyMultiFilterOperatorChanges(linkOperator);
    }, [applyMultiFilterOperatorChanges]);
    const handleDeleteFilter = () => {
      if (rootProps.disableMultipleColumnsFiltering) {
        if (item.value === void 0) {
          deleteFilter(item);
        } else {
          applyFilterChanges(_extends({}, item, {
            value: void 0
          }));
        }
      } else {
        deleteFilter(item);
      }
    };
    React153.useImperativeHandle(focusElementRef, () => ({
      focus: () => {
        if (currentOperator != null && currentOperator.InputComponent) {
          var _valueRef$current;
          valueRef == null ? void 0 : (_valueRef$current = valueRef.current) == null ? void 0 : _valueRef$current.focus();
        } else {
          filterSelectorRef.current.focus();
        }
      }
    }), [currentOperator]);
    return /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(GridFilterFormRoot, {
      className: classes.root,
      children: [/* @__PURE__ */ (0, import_jsx_runtime151.jsx)(FilterFormDeleteIcon, _extends({
        variant: "standard",
        as: rootProps.components.BaseFormControl
      }, baseFormControlProps, deleteIconProps, {
        className: clsx_m_default(classes.deleteIcon, baseFormControlProps.className, deleteIconProps.className),
        children: /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(IconButton_default, {
          "aria-label": apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),
          title: apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),
          onClick: handleDeleteFilter,
          size: "small",
          children: /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(rootProps.components.FilterPanelDeleteIcon, {
            fontSize: "small"
          })
        })
      })), /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(FilterFormLinkOperatorInput, _extends({
        variant: "standard",
        as: rootProps.components.BaseFormControl
      }, baseFormControlProps, linkOperatorInputProps, {
        sx: _extends({
          display: hasLinkOperatorColumn ? "flex" : "none",
          visibility: showMultiFilterOperators ? "visible" : "hidden"
        }, baseFormControlProps.sx || {}, linkOperatorInputProps.sx || {}),
        className: clsx_m_default(classes.linkOperatorInput, baseFormControlProps.className, linkOperatorInputProps.className),
        children: /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(rootProps.components.BaseSelect, _extends({
          inputProps: {
            "aria-label": apiRef.current.getLocaleText("filterPanelLinkOperator")
          },
          value: multiFilterOperator,
          onChange: changeLinkOperator,
          disabled: !!disableMultiFilterOperator || linkOperators.length === 1,
          native: isBaseSelectNative
        }, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseSelect, {
          children: linkOperators.map((linkOperator) => /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(OptionComponent, {
            value: linkOperator.toString(),
            children: apiRef.current.getLocaleText(getLinkOperatorLocaleKey(linkOperator))
          }, linkOperator.toString()))
        }))
      })), /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(FilterFormColumnInput, _extends({
        variant: "standard",
        as: rootProps.components.BaseFormControl
      }, baseFormControlProps, columnInputProps, {
        className: clsx_m_default(classes.columnInput, baseFormControlProps.className, columnInputProps.className),
        children: [/* @__PURE__ */ (0, import_jsx_runtime151.jsx)(InputLabel_default, {
          htmlFor: columnSelectId,
          id: columnSelectLabelId,
          children: apiRef.current.getLocaleText("filterPanelColumns")
        }), /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(rootProps.components.BaseSelect, _extends({
          labelId: columnSelectLabelId,
          id: columnSelectId,
          label: apiRef.current.getLocaleText("filterPanelColumns"),
          value: item.columnField || "",
          onChange: changeColumn,
          native: isBaseSelectNative
        }, (_rootProps$components4 = rootProps.componentsProps) == null ? void 0 : _rootProps$components4.baseSelect, {
          children: sortedFilterableColumns.map((col) => /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(OptionComponent, {
            value: col.field,
            children: getColumnLabel(col)
          }, col.field))
        }))]
      })), /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(FilterFormOperatorInput, _extends({
        variant: "standard",
        as: rootProps.components.BaseFormControl
      }, baseFormControlProps, operatorInputProps, {
        className: clsx_m_default(classes.operatorInput, baseFormControlProps.className, operatorInputProps.className),
        children: [/* @__PURE__ */ (0, import_jsx_runtime151.jsx)(InputLabel_default, {
          htmlFor: operatorSelectId,
          id: operatorSelectLabelId,
          children: apiRef.current.getLocaleText("filterPanelOperators")
        }), /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(rootProps.components.BaseSelect, _extends({
          labelId: operatorSelectLabelId,
          label: apiRef.current.getLocaleText("filterPanelOperators"),
          id: operatorSelectId,
          value: item.operatorValue,
          onChange: changeOperator,
          native: isBaseSelectNative,
          inputRef: filterSelectorRef
        }, (_rootProps$components5 = rootProps.componentsProps) == null ? void 0 : _rootProps$components5.baseSelect, {
          children: currentColumn == null ? void 0 : (_currentColumn$filter2 = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter2.map((operator) => /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(OptionComponent, {
            value: operator.value,
            children: operator.label || apiRef.current.getLocaleText(`filterOperator${capitalize_default(operator.value)}`)
          }, operator.value))
        }))]
      })), /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(FilterFormValueInput, _extends({
        variant: "standard",
        as: rootProps.components.BaseFormControl
      }, baseFormControlProps, valueInputProps, {
        className: clsx_m_default(classes.valueInput, baseFormControlProps.className, valueInputProps.className),
        children: currentOperator != null && currentOperator.InputComponent ? /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(currentOperator.InputComponent, _extends({
          apiRef,
          item,
          applyValue: applyFilterChanges,
          focusElementRef: valueRef
        }, currentOperator.InputComponentProps)) : null
      }))]
    });
  }
  true ? GridFilterForm.propTypes = {
    applyFilterChanges: import_prop_types95.default.func.isRequired,
    applyMultiFilterOperatorChanges: import_prop_types95.default.func.isRequired,
    columnInputProps: import_prop_types95.default.any,
    columnsSort: import_prop_types95.default.oneOf(["asc", "desc"]),
    deleteFilter: import_prop_types95.default.func.isRequired,
    deleteIconProps: import_prop_types95.default.any,
    disableMultiFilterOperator: import_prop_types95.default.bool,
    focusElementRef: import_prop_types95.default.oneOfType([import_prop_types95.default.func, import_prop_types95.default.object]),
    hasMultipleFilters: import_prop_types95.default.bool.isRequired,
    item: import_prop_types95.default.shape({
      columnField: import_prop_types95.default.string.isRequired,
      id: import_prop_types95.default.oneOfType([import_prop_types95.default.number, import_prop_types95.default.string]),
      operatorValue: import_prop_types95.default.string,
      value: import_prop_types95.default.any
    }).isRequired,
    linkOperatorInputProps: import_prop_types95.default.any,
    linkOperators: import_prop_types95.default.arrayOf(import_prop_types95.default.oneOf(["and", "or"]).isRequired),
    multiFilterOperator: import_prop_types95.default.oneOf(["and", "or"]),
    operatorInputProps: import_prop_types95.default.any,
    showMultiFilterOperators: import_prop_types95.default.bool,
    valueInputProps: import_prop_types95.default.any
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterPanel.js
  var React154 = __toModule(require_react());
  var import_prop_types96 = __toModule(require_prop_types());
  var import_jsx_runtime153 = __toModule(require_jsx_runtime());
  var import_jsx_runtime154 = __toModule(require_jsx_runtime());
  var _excluded92 = ["linkOperators", "columnsSort", "filterFormProps"];
  function GridFilterPanel(props) {
    var _rootProps$components;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const filterModel = useGridSelector(apiRef, gridFilterModelSelector);
    const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);
    const lastFilterRef = React154.useRef(null);
    const {
      linkOperators = [GridLinkOperator.And, GridLinkOperator.Or],
      columnsSort,
      filterFormProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded92);
    const applyFilter = React154.useCallback((item) => {
      apiRef.current.upsertFilterItem(item);
    }, [apiRef]);
    const applyFilterLinkOperator = React154.useCallback((operator) => {
      apiRef.current.setFilterLinkOperator(operator);
    }, [apiRef]);
    const getDefaultItem = React154.useCallback(() => {
      const firstColumnWithOperator = filterableColumns.find((colDef) => {
        var _colDef$filterOperato;
        return (_colDef$filterOperato = colDef.filterOperators) == null ? void 0 : _colDef$filterOperato.length;
      });
      if (!firstColumnWithOperator) {
        return null;
      }
      return {
        columnField: firstColumnWithOperator.field,
        operatorValue: firstColumnWithOperator.filterOperators[0].value,
        id: Math.round(Math.random() * 1e5)
      };
    }, [filterableColumns]);
    const items = React154.useMemo(() => {
      if (filterModel.items.length) {
        return filterModel.items;
      }
      const defaultItem = getDefaultItem();
      return defaultItem ? [defaultItem] : [];
    }, [filterModel.items, getDefaultItem]);
    const hasMultipleFilters = items.length > 1;
    const addNewFilter = () => {
      const defaultItem = getDefaultItem();
      if (!defaultItem) {
        return;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items: [...items, defaultItem]
      }));
    };
    const deleteFilter = React154.useCallback((item) => {
      const shouldCloseFilterPanel = items.length === 1;
      apiRef.current.deleteFilterItem(item);
      if (shouldCloseFilterPanel) {
        apiRef.current.hideFilterPanel();
      }
    }, [apiRef, items.length]);
    React154.useEffect(() => {
      if (linkOperators.length > 0 && filterModel.linkOperator && !linkOperators.includes(filterModel.linkOperator)) {
        applyFilterLinkOperator(linkOperators[0]);
      }
    }, [linkOperators, applyFilterLinkOperator, filterModel.linkOperator]);
    React154.useEffect(() => {
      if (items.length > 0) {
        lastFilterRef.current.focus();
      }
    }, [items.length]);
    return /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)(GridPanelWrapper, _extends({}, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime153.jsx)(GridPanelContent, {
        children: items.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(GridFilterForm, _extends({
          item,
          applyFilterChanges: applyFilter,
          deleteFilter,
          hasMultipleFilters,
          showMultiFilterOperators: index > 0,
          multiFilterOperator: filterModel.linkOperator,
          disableMultiFilterOperator: index !== 1,
          applyMultiFilterOperatorChanges: applyFilterLinkOperator,
          focusElementRef: index === items.length - 1 ? lastFilterRef : null,
          linkOperators,
          columnsSort
        }, filterFormProps), item.id == null ? index : item.id))
      }), !rootProps.disableMultipleColumnsFiltering && /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(GridPanelFooter, {
        children: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(rootProps.components.BaseButton, _extends({
          onClick: addNewFilter,
          startIcon: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(GridAddIcon, {}),
          color: "primary"
        }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseButton, {
          children: apiRef.current.getLocaleText("filterPanelAddFilter")
        }))
      })]
    }));
  }
  true ? GridFilterPanel.propTypes = {
    columnsSort: import_prop_types96.default.oneOf(["asc", "desc"]),
    filterFormProps: import_prop_types96.default.shape({
      columnInputProps: import_prop_types96.default.any,
      columnsSort: import_prop_types96.default.oneOf(["asc", "desc"]),
      deleteIconProps: import_prop_types96.default.any,
      linkOperatorInputProps: import_prop_types96.default.any,
      operatorInputProps: import_prop_types96.default.any,
      valueInputProps: import_prop_types96.default.any
    }),
    linkOperators: import_prop_types96.default.arrayOf(import_prop_types96.default.oneOf(["and", "or"]).isRequired),
    sx: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.object, import_prop_types96.default.bool])), import_prop_types96.default.func, import_prop_types96.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridFooter.js
  var React157 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/components/GridRowCount.js
  var React155 = __toModule(require_react());
  var import_prop_types97 = __toModule(require_prop_types());
  var import_jsx_runtime155 = __toModule(require_jsx_runtime());
  var _excluded93 = ["className", "rowCount", "visibleRowCount"];
  var useUtilityClasses65 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["rowCount"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridRowCountRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "RowCount",
    overridesResolver: (props, styles4) => styles4.rowCount
  })(({
    theme
  }) => ({
    alignItems: "center",
    display: "flex",
    margin: theme.spacing(0, 2)
  }));
  var GridRowCount = /* @__PURE__ */ React155.forwardRef(function GridRowCount2(props, ref) {
    const {
      className,
      rowCount,
      visibleRowCount
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded93);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses65(ownerState);
    if (rowCount === 0) {
      return null;
    }
    const text = visibleRowCount < rowCount ? apiRef.current.getLocaleText("footerTotalVisibleRows")(visibleRowCount, rowCount) : rowCount.toLocaleString();
    return /* @__PURE__ */ (0, import_jsx_runtime155.jsxs)(GridRowCountRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className)
    }, other, {
      children: [apiRef.current.getLocaleText("footerTotalRows"), " ", text]
    }));
  });
  true ? GridRowCount.propTypes = {
    rowCount: import_prop_types97.default.number.isRequired,
    visibleRowCount: import_prop_types97.default.number.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridSelectedRowCount.js
  var React156 = __toModule(require_react());
  var import_prop_types98 = __toModule(require_prop_types());
  var import_jsx_runtime156 = __toModule(require_jsx_runtime());
  var _excluded94 = ["className", "selectedRowCount"];
  var useUtilityClasses66 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["selectedRowCount"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridSelectedRowCountRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "SelectedRowCount",
    overridesResolver: (props, styles4) => styles4.selectedRowCount
  })(({
    theme
  }) => ({
    alignItems: "center",
    display: "flex",
    margin: theme.spacing(0, 2),
    visibility: "hidden",
    width: 0,
    height: 0,
    [theme.breakpoints.up("sm")]: {
      visibility: "visible",
      width: "auto",
      height: "auto"
    }
  }));
  var GridSelectedRowCount = /* @__PURE__ */ React156.forwardRef(function GridSelectedRowCount2(props, ref) {
    const {
      className,
      selectedRowCount
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded94);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses66(ownerState);
    const rowSelectedText = apiRef.current.getLocaleText("footerRowSelected")(selectedRowCount);
    return /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(GridSelectedRowCountRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className)
    }, other, {
      children: rowSelectedText
    }));
  });
  true ? GridSelectedRowCount.propTypes = {
    selectedRowCount: import_prop_types98.default.number.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridFooter.js
  var import_jsx_runtime157 = __toModule(require_jsx_runtime());
  var import_jsx_runtime158 = __toModule(require_jsx_runtime());
  var GridFooter = /* @__PURE__ */ React157.forwardRef(function GridFooter2(props, ref) {
    var _rootProps$components;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const totalTopLevelRowCount = useGridSelector(apiRef, gridTopLevelRowCountSelector);
    const selectedRowCount = useGridSelector(apiRef, selectedGridRowsCountSelector);
    const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);
    const selectedRowCountElement = !rootProps.hideFooterSelectedRowCount && selectedRowCount > 0 ? /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(GridSelectedRowCount, {
      selectedRowCount
    }) : /* @__PURE__ */ (0, import_jsx_runtime157.jsx)("div", {});
    const rowCountElement = !rootProps.hideFooterRowCount && !rootProps.pagination ? /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(GridRowCount, {
      rowCount: totalTopLevelRowCount,
      visibleRowCount: visibleTopLevelRowCount
    }) : null;
    const paginationElement = rootProps.pagination && !rootProps.hideFooterPagination && rootProps.components.Pagination && /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(rootProps.components.Pagination, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.pagination));
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(GridFooterContainer, _extends({
      ref
    }, props, {
      children: [selectedRowCountElement, rowCountElement, paginationElement]
    }));
  });

  // node_modules/@mui/x-data-grid/components/GridHeader.js
  var React158 = __toModule(require_react());
  var import_jsx_runtime159 = __toModule(require_jsx_runtime());
  var import_jsx_runtime160 = __toModule(require_jsx_runtime());
  var GridHeader = /* @__PURE__ */ React158.forwardRef(function GridHeader2(props, ref) {
    var _rootProps$components, _rootProps$components2;
    const rootProps = useGridRootProps();
    return /* @__PURE__ */ (0, import_jsx_runtime160.jsxs)("div", _extends({
      ref
    }, props, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime159.jsx)(rootProps.components.PreferencesPanel, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.preferencesPanel)), rootProps.components.Toolbar && /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(rootProps.components.Toolbar, _extends({}, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.toolbar))]
    }));
  });

  // node_modules/@mui/x-data-grid/components/GridLoadingOverlay.js
  var React159 = __toModule(require_react());
  var import_prop_types99 = __toModule(require_prop_types());
  var import_jsx_runtime161 = __toModule(require_jsx_runtime());
  var GridLoadingOverlay = /* @__PURE__ */ React159.forwardRef(function GridLoadingOverlay2(props, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(GridOverlay, _extends({
      ref
    }, props, {
      children: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(CircularProgress_default, {})
    }));
  });
  true ? GridLoadingOverlay.propTypes = {
    sx: import_prop_types99.default.oneOfType([import_prop_types99.default.arrayOf(import_prop_types99.default.oneOfType([import_prop_types99.default.func, import_prop_types99.default.object, import_prop_types99.default.bool])), import_prop_types99.default.func, import_prop_types99.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridNoRowsOverlay.js
  var React160 = __toModule(require_react());
  var import_prop_types100 = __toModule(require_prop_types());
  var import_jsx_runtime162 = __toModule(require_jsx_runtime());
  var GridNoRowsOverlay = /* @__PURE__ */ React160.forwardRef(function GridNoRowsOverlay2(props, ref) {
    const apiRef = useGridApiContext();
    const noRowsLabel = apiRef.current.getLocaleText("noRowsLabel");
    return /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(GridOverlay, _extends({
      ref
    }, props, {
      children: noRowsLabel
    }));
  });
  true ? GridNoRowsOverlay.propTypes = {
    sx: import_prop_types100.default.oneOfType([import_prop_types100.default.arrayOf(import_prop_types100.default.oneOfType([import_prop_types100.default.func, import_prop_types100.default.object, import_prop_types100.default.bool])), import_prop_types100.default.func, import_prop_types100.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridPagination.js
  var React161 = __toModule(require_react());
  var import_jsx_runtime163 = __toModule(require_jsx_runtime());
  var GridPaginationRoot = styled_default(TablePagination_default)(({
    theme
  }) => ({
    [`& .${tablePaginationClasses_default.selectLabel}`]: {
      display: "none",
      [theme.breakpoints.up("sm")]: {
        display: "block"
      }
    },
    [`& .${tablePaginationClasses_default.input}`]: {
      display: "none",
      [theme.breakpoints.up("sm")]: {
        display: "inline-flex"
      }
    }
  }));
  var GridPagination = /* @__PURE__ */ React161.forwardRef(function GridPagination2(props, ref) {
    var _rootProps$rowsPerPag;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const paginationState = useGridSelector(apiRef, gridPaginationSelector);
    const lastPage = React161.useMemo(() => Math.floor(paginationState.rowCount / (paginationState.pageSize || 1)), [paginationState.rowCount, paginationState.pageSize]);
    const handlePageSizeChange = React161.useCallback((event) => {
      const newPageSize = Number(event.target.value);
      apiRef.current.setPageSize(newPageSize);
    }, [apiRef]);
    const handlePageChange = React161.useCallback((event, page) => {
      apiRef.current.setPage(page);
    }, [apiRef]);
    if (true) {
      var _rootProps$pageSize;
      const warnedOnceMissingPageSizeInRowsPerPageOptions = React161.useRef(false);
      if (!warnedOnceMissingPageSizeInRowsPerPageOptions.current && !rootProps.autoPageSize && !rootProps.rowsPerPageOptions.includes((_rootProps$pageSize = rootProps.pageSize) != null ? _rootProps$pageSize : paginationState.pageSize)) {
        var _rootProps$pageSize2;
        console.warn([`MUI: The page size \`${(_rootProps$pageSize2 = rootProps.pageSize) != null ? _rootProps$pageSize2 : paginationState.pageSize}\` is not preset in the \`rowsPerPageOptions\``, `Add it to show the pagination select.`].join("\n"));
        warnedOnceMissingPageSizeInRowsPerPageOptions.current = true;
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(GridPaginationRoot, _extends({
      ref,
      component: "div",
      count: paginationState.rowCount,
      page: paginationState.page <= lastPage ? paginationState.page : lastPage,
      rowsPerPageOptions: (_rootProps$rowsPerPag = rootProps.rowsPerPageOptions) != null && _rootProps$rowsPerPag.includes(paginationState.pageSize) ? rootProps.rowsPerPageOptions : [],
      rowsPerPage: paginationState.pageSize,
      onPageChange: handlePageChange,
      onRowsPerPageChange: handlePageSizeChange
    }, apiRef.current.getLocaleText("MuiTablePagination"), props));
  });

  // node_modules/@mui/x-data-grid/components/GridRow.js
  var React163 = __toModule(require_react());
  var import_prop_types101 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js
  var React162 = __toModule(require_react());
  var getVisibleRows = (apiRef, props) => {
    let rows;
    let range;
    if (props.pagination && props.paginationMode === "client") {
      range = gridPaginationRowRangeSelector(apiRef);
      rows = gridPaginatedVisibleSortedGridRowEntriesSelector(apiRef);
    } else {
      rows = gridVisibleSortedRowEntriesSelector(apiRef);
      if (rows.length === 0) {
        range = null;
      } else {
        range = {
          firstRowIndex: 0,
          lastRowIndex: rows.length - 1
        };
      }
    }
    return {
      rows,
      range
    };
  };
  var useGridVisibleRows = (apiRef, props) => {
    const response = getVisibleRows(apiRef, props);
    return React162.useMemo(() => ({
      rows: response.rows,
      range: response.range
    }), [response.rows, response.range]);
  };

  // node_modules/@mui/x-data-grid/constants/gridDetailPanelToggleField.js
  var GRID_DETAIL_PANEL_TOGGLE_FIELD = "__detail_panel_toggle__";

  // node_modules/@mui/x-data-grid/components/GridRow.js
  var import_jsx_runtime164 = __toModule(require_jsx_runtime());
  var import_jsx_runtime165 = __toModule(require_jsx_runtime());
  var _excluded95 = ["selected", "rowId", "row", "index", "style", "rowHeight", "className", "visibleColumns", "renderedColumns", "containerWidth", "firstColumnToRender", "lastColumnToRender", "cellFocus", "cellTabIndex", "editRowsState", "isLastVisible", "onClick", "onDoubleClick", "onMouseEnter", "onMouseLeave"];
  var useUtilityClasses67 = (ownerState) => {
    const {
      editable,
      editing,
      selected,
      isLastVisible,
      classes
    } = ownerState;
    const slots = {
      root: ["row", selected && "selected", editable && "row--editable", editing && "row--editing", isLastVisible && "row--lastVisible"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var EmptyCell = ({
    width: width2,
    height: height2
  }) => {
    if (!width2 || !height2) {
      return null;
    }
    const style3 = {
      width: width2,
      height: height2
    };
    return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("div", {
      className: "MuiDataGrid-cell",
      style: style3
    });
  };
  function GridRow(props) {
    var _apiRef$current$getRo;
    const {
      selected,
      rowId,
      row,
      index,
      style: styleProp,
      rowHeight,
      className,
      visibleColumns,
      renderedColumns,
      containerWidth,
      firstColumnToRender,
      cellFocus,
      cellTabIndex,
      editRowsState,
      isLastVisible = false,
      onClick,
      onDoubleClick,
      onMouseEnter,
      onMouseLeave
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded95);
    const ariaRowIndex = index + 2;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const currentPage = useGridVisibleRows(apiRef, rootProps);
    const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);
    const {
      hasScrollX,
      hasScrollY
    } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {
      hasScrollX: false,
      hasScrollY: false
    };
    const ownerState = {
      selected,
      isLastVisible,
      classes: rootProps.classes,
      editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,
      editable: rootProps.editMode === GridEditModes.Row
    };
    const classes = useUtilityClasses67(ownerState);
    const publish = React163.useCallback((eventName, propHandler) => (event) => {
      if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {
        return;
      }
      if (!apiRef.current.getRow(rowId)) {
        return;
      }
      apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);
      if (propHandler) {
        propHandler(event);
      }
    }, [apiRef, rowId]);
    const publishClick = React163.useCallback((event) => {
      const cell = findParentElementFromClassName(event.target, gridClasses2.cell);
      const field = cell == null ? void 0 : cell.getAttribute("data-field");
      if (field) {
        if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
          return;
        }
        if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
          return;
        }
        if (field === "__reorder__") {
          return;
        }
        if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {
          return;
        }
        const column2 = apiRef.current.getColumn(field);
        if (column2.type === GRID_ACTIONS_COLUMN_TYPE) {
          return;
        }
      }
      publish(GridEvents.rowClick, onClick)(event);
    }, [apiRef, onClick, publish, rowId]);
    const style3 = _extends({}, styleProp, {
      maxHeight: rowHeight,
      minHeight: rowHeight
    });
    const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);
    if (sizes != null && sizes.spacingTop) {
      const property = rootProps.rowSpacingType === "border" ? "borderTopWidth" : "marginTop";
      style3[property] = sizes.spacingTop;
    }
    if (sizes != null && sizes.spacingBottom) {
      const property = rootProps.rowSpacingType === "border" ? "borderBottomWidth" : "marginBottom";
      style3[property] = sizes.spacingBottom;
    }
    let rowClassName = null;
    if (typeof rootProps.getRowClassName === "function") {
      const indexRelativeToCurrentPage = index - currentPage.range.firstRowIndex;
      const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {
        isFirstVisible: indexRelativeToCurrentPage === 0,
        isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
        indexRelativeToCurrentPage
      });
      rowClassName = rootProps.getRowClassName(rowParams);
    }
    const cells = [];
    for (let i = 0; i < renderedColumns.length; i += 1) {
      const column2 = renderedColumns[i];
      const indexRelativeToAllColumns = firstColumnToRender + i;
      const isLastColumn = indexRelativeToAllColumns === visibleColumns.length - 1;
      const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;
      const showRightBorder = !isLastColumn ? rootProps.showCellRightBorder : !removeLastBorderRight && rootProps.disableExtendRowFullWidth;
      const cellParams = apiRef.current.getCellParams(rowId, column2.field);
      const classNames = [];
      if (column2.cellClassName) {
        classNames.push(clsx_m_default(typeof column2.cellClassName === "function" ? column2.cellClassName(cellParams) : column2.cellClassName));
      }
      const editCellState = editRowsState[rowId] ? editRowsState[rowId][column2.field] : null;
      let content = null;
      if (editCellState == null && column2.renderCell) {
        var _rootProps$classes;
        content = column2.renderCell(_extends({}, cellParams, {
          api: apiRef.current
        }));
        classNames.push(clsx_m_default(gridClasses2["cell--withRenderer"], (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes["cell--withRenderer"]));
      }
      if (editCellState != null && column2.renderEditCell) {
        var _rootProps$classes2;
        let updatedRow = row;
        if (apiRef.current.unstable_getRowWithUpdatedValues) {
          updatedRow = apiRef.current.unstable_getRowWithUpdatedValues(rowId, column2.field);
        }
        const params = _extends({}, cellParams, {
          row: updatedRow
        }, editCellState, {
          api: apiRef.current
        });
        content = column2.renderEditCell(params);
        classNames.push(clsx_m_default(gridClasses2["cell--editing"], (_rootProps$classes2 = rootProps.classes) == null ? void 0 : _rootProps$classes2["cell--editing"]));
      }
      if (rootProps.getCellClassName) {
        classNames.push(rootProps.getCellClassName(cellParams));
      }
      const hasFocus = cellFocus !== null && cellFocus.id === rowId && cellFocus.field === column2.field;
      const tabIndex = cellTabIndex !== null && cellTabIndex.id === rowId && cellTabIndex.field === column2.field && cellParams.cellMode === "view" ? 0 : -1;
      const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);
      if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
        var _rootProps$components;
        const {
          colSpan,
          width: width2
        } = cellColSpanInfo.cellProps;
        cells.push(/* @__PURE__ */ (0, import_jsx_runtime164.jsx)(rootProps.components.Cell, _extends({
          value: cellParams.value,
          field: column2.field,
          width: width2,
          rowId,
          height: rowHeight,
          showRightBorder,
          formattedValue: cellParams.formattedValue,
          align: column2.align || "left",
          cellMode: cellParams.cellMode,
          colIndex: indexRelativeToAllColumns,
          isEditable: cellParams.isEditable,
          hasFocus,
          tabIndex,
          className: clsx_m_default(classNames),
          colSpan
        }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.cell, {
          children: content
        }), column2.field));
      }
    }
    const emptyCellWidth = containerWidth - columnsTotalWidth;
    return /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)("div", _extends({
      "data-id": rowId,
      "data-rowindex": index,
      role: "row",
      className: clsx_m_default(rowClassName, classes.root, className),
      "aria-rowindex": ariaRowIndex,
      "aria-selected": selected,
      style: style3,
      onClick: publishClick,
      onDoubleClick: publish(GridEvents.rowDoubleClick, onDoubleClick),
      onMouseEnter: publish(GridEvents.rowMouseEnter, onMouseEnter),
      onMouseLeave: publish(GridEvents.rowMouseLeave, onMouseLeave)
    }, other, {
      children: [cells, emptyCellWidth > 0 && /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(EmptyCell, {
        width: emptyCellWidth,
        height: rowHeight
      })]
    }));
  }
  true ? GridRow.propTypes = {
    cellFocus: import_prop_types101.default.object,
    cellTabIndex: import_prop_types101.default.object,
    containerWidth: import_prop_types101.default.number.isRequired,
    editRowsState: import_prop_types101.default.object.isRequired,
    firstColumnToRender: import_prop_types101.default.number.isRequired,
    index: import_prop_types101.default.number.isRequired,
    isLastVisible: import_prop_types101.default.bool,
    lastColumnToRender: import_prop_types101.default.number.isRequired,
    renderedColumns: import_prop_types101.default.arrayOf(import_prop_types101.default.object).isRequired,
    row: import_prop_types101.default.any.isRequired,
    rowHeight: import_prop_types101.default.number.isRequired,
    rowId: import_prop_types101.default.oneOfType([import_prop_types101.default.number, import_prop_types101.default.string]).isRequired,
    selected: import_prop_types101.default.bool.isRequired,
    visibleColumns: import_prop_types101.default.arrayOf(import_prop_types101.default.object).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridScrollArea.js
  var React165 = __toModule(require_react());
  var import_prop_types102 = __toModule(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js
  var React164 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/utils/cleanupTracking/TimerBasedCleanupTracking.js
  var CLEANUP_TIMER_LOOP_MILLIS = 1e3;
  var TimerBasedCleanupTracking = class {
    constructor(timeout2 = CLEANUP_TIMER_LOOP_MILLIS) {
      this.timeouts = new Map();
      this.cleanupTimeout = CLEANUP_TIMER_LOOP_MILLIS;
      this.cleanupTimeout = timeout2;
    }
    register(object, unsubscribe, unregisterToken) {
      if (!this.timeouts) {
        this.timeouts = new Map();
      }
      const timeout2 = setTimeout(() => {
        if (typeof unsubscribe === "function") {
          unsubscribe();
        }
        this.timeouts.delete(unregisterToken.cleanupToken);
      }, this.cleanupTimeout);
      this.timeouts.set(unregisterToken.cleanupToken, timeout2);
    }
    unregister(unregisterToken) {
      const timeout2 = this.timeouts.get(unregisterToken.cleanupToken);
      if (timeout2) {
        this.timeouts.delete(unregisterToken.cleanupToken);
        clearTimeout(timeout2);
      }
    }
    reset() {
      if (this.timeouts) {
        this.timeouts.forEach((value, key) => {
          this.unregister({
            cleanupToken: key
          });
        });
        this.timeouts = void 0;
      }
    }
  };

  // node_modules/@mui/x-data-grid/utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js
  var FinalizationRegistryBasedCleanupTracking = class {
    constructor() {
      this.registry = new FinalizationRegistry((unsubscribe) => {
        if (typeof unsubscribe === "function") {
          unsubscribe();
        }
      });
    }
    register(object, unsubscribe, unregisterToken) {
      this.registry.register(object, unsubscribe, unregisterToken);
    }
    unregister(unregisterToken) {
      this.registry.unregister(unregisterToken);
    }
    reset() {
    }
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js
  var GridSignature;
  (function(GridSignature2) {
    GridSignature2["DataGrid"] = "DataGrid";
    GridSignature2["DataGridPro"] = "DataGridPro";
  })(GridSignature || (GridSignature = {}));
  var ObjectToBeRetainedByReact = class {
  };
  function createUseGridApiEventHandler(registry2) {
    let cleanupTokensCounter = 0;
    return function useGridApiEventHandler2(apiRef, eventName, handler, options) {
      const [objectRetainedByReact] = React164.useState(new ObjectToBeRetainedByReact());
      const subscription = React164.useRef(null);
      const handlerRef = React164.useRef();
      handlerRef.current = handler;
      const cleanupTokenRef = React164.useRef(null);
      if (!subscription.current && handlerRef.current) {
        const enhancedHandler = (params, event, details) => {
          if (!event.defaultMuiPrevented) {
            var _handlerRef$current;
            (_handlerRef$current = handlerRef.current) == null ? void 0 : _handlerRef$current.call(handlerRef, params, event, details);
          }
        };
        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
        cleanupTokensCounter += 1;
        cleanupTokenRef.current = {
          cleanupToken: cleanupTokensCounter
        };
        registry2.register(objectRetainedByReact, () => {
          var _subscription$current;
          (_subscription$current = subscription.current) == null ? void 0 : _subscription$current.call(subscription);
          subscription.current = null;
          cleanupTokenRef.current = null;
        }, cleanupTokenRef.current);
      } else if (!handlerRef.current && subscription.current) {
        subscription.current();
        subscription.current = null;
        if (cleanupTokenRef.current) {
          registry2.unregister(cleanupTokenRef.current);
          cleanupTokenRef.current = null;
        }
      }
      React164.useEffect(() => {
        if (!subscription.current && handlerRef.current) {
          const enhancedHandler = (params, event, details) => {
            if (!event.defaultMuiPrevented) {
              var _handlerRef$current2;
              (_handlerRef$current2 = handlerRef.current) == null ? void 0 : _handlerRef$current2.call(handlerRef, params, event, details);
            }
          };
          subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
        }
        if (cleanupTokenRef.current && registry2) {
          registry2.unregister(cleanupTokenRef.current);
          cleanupTokenRef.current = null;
        }
        return () => {
          var _subscription$current2;
          (_subscription$current2 = subscription.current) == null ? void 0 : _subscription$current2.call(subscription);
          subscription.current = null;
        };
      }, [apiRef, eventName, options]);
    };
  }
  var registry = typeof FinalizationRegistry !== "undefined" ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();
  var useGridApiEventHandler = createUseGridApiEventHandler(registry);
  var optionsSubscriberOptions = {
    isFirst: true
  };
  function useGridApiOptionHandler(apiRef, eventName, handler) {
    useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);
  }

  // node_modules/@mui/x-data-grid/components/GridScrollArea.js
  var import_jsx_runtime166 = __toModule(require_jsx_runtime());
  var CLIFF = 1;
  var SLOP = 1.5;
  var useUtilityClasses68 = (ownerState) => {
    const {
      scrollDirection,
      classes
    } = ownerState;
    const slots = {
      root: ["scrollArea", `scrollArea--${scrollDirection}`]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridScrollAreaRawRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ScrollArea",
    overridesResolver: (props, styles4) => [{
      [`&.${gridClasses2["scrollArea--left"]}`]: styles4["scrollArea--left"]
    }, {
      [`&.${gridClasses2["scrollArea--right"]}`]: styles4["scrollArea--right"]
    }, styles4.scrollArea]
  })(() => ({
    position: "absolute",
    top: 0,
    zIndex: 101,
    width: 20,
    bottom: 0,
    [`&.${gridClasses2["scrollArea--left"]}`]: {
      left: 0
    },
    [`&.${gridClasses2["scrollArea--right"]}`]: {
      right: 0
    }
  }));
  function GridScrollAreaRaw(props) {
    const {
      scrollDirection
    } = props;
    const rootRef = React165.useRef(null);
    const apiRef = useGridApiContext();
    const timeout2 = React165.useRef();
    const [dragging, setDragging] = React165.useState(false);
    const height2 = useGridSelector(apiRef, gridDensityHeaderHeightSelector);
    const scrollPosition = React165.useRef({
      left: 0,
      top: 0
    });
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses68(ownerState);
    const handleScrolling = React165.useCallback((newScrollPosition) => {
      scrollPosition.current = newScrollPosition;
    }, []);
    const handleDragOver = React165.useCallback((event) => {
      let offset2;
      if (scrollDirection === "left") {
        offset2 = event.clientX - rootRef.current.getBoundingClientRect().right;
      } else if (scrollDirection === "right") {
        offset2 = Math.max(1, event.clientX - rootRef.current.getBoundingClientRect().left);
      } else {
        throw new Error("MUI: Wrong drag direction");
      }
      offset2 = (offset2 - CLIFF) * SLOP + CLIFF;
      clearTimeout(timeout2.current);
      timeout2.current = setTimeout(() => {
        apiRef.current.scroll({
          left: scrollPosition.current.left + offset2,
          top: scrollPosition.current.top
        });
      });
    }, [scrollDirection, apiRef]);
    React165.useEffect(() => {
      return () => {
        clearTimeout(timeout2.current);
      };
    }, []);
    const toggleDragging = React165.useCallback(() => {
      setDragging((prevDragging) => !prevDragging);
    }, []);
    useGridApiEventHandler(apiRef, GridEvents.rowsScroll, handleScrolling);
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, toggleDragging);
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragEnd, toggleDragging);
    return dragging ? /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(GridScrollAreaRawRoot, {
      ref: rootRef,
      className: clsx_m_default(classes.root),
      onDragOver: handleDragOver,
      style: {
        height: height2
      }
    }) : null;
  }
  true ? GridScrollAreaRaw.propTypes = {
    scrollDirection: import_prop_types102.default.oneOf(["left", "right"]).isRequired
  } : void 0;
  var GridScrollArea = /* @__PURE__ */ React165.memo(GridScrollAreaRaw);

  // node_modules/@mui/x-data-grid/context/GridContextProvider.js
  var React166 = __toModule(require_react());
  var import_jsx_runtime167 = __toModule(require_jsx_runtime());
  var GridContextProvider = ({
    apiRef,
    props,
    children
  }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(GridRootPropsContext.Provider, {
      value: props,
      children: /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(GridApiContext.Provider, {
        value: apiRef,
        children
      })
    });
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridLoggerFactory.js
  var React167 = __toModule(require_react());
  var forceDebug = localStorageAvailable() && window.localStorage.getItem("DEBUG") != null;
  var noop2 = () => {
  };
  var noopLogger = {
    debug: noop2,
    info: noop2,
    warn: noop2,
    error: noop2
  };
  var LOG_LEVELS = ["debug", "info", "warn", "error"];
  function getAppender(name, logLevel, appender = console) {
    const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);
    if (minLogLevelIdx === -1) {
      throw new Error(`MUI: Log level ${logLevel} not recognized.`);
    }
    const logger = LOG_LEVELS.reduce((loggerObj, method, idx) => {
      if (idx >= minLogLevelIdx) {
        loggerObj[method] = (...args) => {
          const [message, ...other] = args;
          appender[method](`MUI: ${name} - ${message}`, ...other);
        };
      } else {
        loggerObj[method] = noop2;
      }
      return loggerObj;
    }, {});
    return logger;
  }
  var useGridLoggerFactory = (apiRef, props) => {
    apiRef.current.getLogger = React167.useCallback((name) => {
      if (forceDebug) {
        return getAppender(name, "debug", props.logger);
      }
      if (!props.logLevel) {
        return noopLogger;
      }
      return getAppender(name, props.logLevel.toString(), props.logger);
    }, [props.logLevel, props.logger]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js
  var React169 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js
  var React168 = __toModule(require_react());
  function useGridApiMethod(apiRef, apiMethods, apiName) {
    const apiMethodsRef = React168.useRef(apiMethods);
    const [apiMethodsNames] = React168.useState(Object.keys(apiMethods));
    const installMethods = React168.useCallback(() => {
      if (!apiRef.current) {
        return;
      }
      apiMethodsNames.forEach((methodName) => {
        if (!apiRef.current.hasOwnProperty(methodName)) {
          apiRef.current[methodName] = (...args) => apiMethodsRef.current[methodName](...args);
        }
      });
    }, [apiMethodsNames, apiRef]);
    React168.useEffect(() => {
      apiMethodsRef.current = apiMethods;
    }, [apiMethods]);
    React168.useEffect(() => {
      installMethods();
    }, [installMethods]);
    installMethods();
  }

  // node_modules/@mui/x-data-grid/utils/EventManager.js
  var EventManager = class {
    constructor() {
      this.maxListeners = 10;
      this.warnOnce = false;
      this.events = {};
    }
    on(eventName, listener, options = {}) {
      let collection = this.events[eventName];
      if (!collection) {
        collection = {
          highPriority: new Map(),
          regular: new Map()
        };
        this.events[eventName] = collection;
      }
      if (options.isFirst) {
        collection.highPriority.set(listener, true);
      } else {
        collection.regular.set(listener, true);
      }
      if (true) {
        const collectionSize = collection.highPriority.size + collection.regular.size;
        if (collectionSize > this.maxListeners && !this.warnOnce) {
          this.warnOnce = true;
          console.warn([`Possible EventEmitter memory leak detected. ${collectionSize} ${eventName} listeners added.`, `Use emitter.setMaxListeners() to increase limit.`].join("\n"));
        }
      }
    }
    removeListener(eventName, listener) {
      if (this.events[eventName]) {
        this.events[eventName].regular.delete(listener);
        this.events[eventName].highPriority.delete(listener);
      }
    }
    removeAllListeners() {
      this.events = {};
    }
    emit(eventName, ...args) {
      const collection = this.events[eventName];
      if (!collection) {
        return;
      }
      const highPriorityListeners = Array.from(collection.highPriority.keys());
      const regularListeners = Array.from(collection.regular.keys());
      for (let i = highPriorityListeners.length - 1; i >= 0; i -= 1) {
        const listener = highPriorityListeners[i];
        if (collection.highPriority.has(listener)) {
          listener.apply(this, args);
        }
      }
      for (let i = 0; i < regularListeners.length; i += 1) {
        const listener = regularListeners[i];
        if (collection.regular.has(listener)) {
          listener.apply(this, args);
        }
      }
    }
    once(eventName, listener) {
      const that = this;
      this.on(eventName, function oneTimeListener(...args) {
        that.removeListener(eventName, oneTimeListener);
        listener.apply(that, args);
      });
    }
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js
  var isSyntheticEvent = (event) => {
    return event.isPropagationStopped !== void 0;
  };
  var globalId2 = 0;
  function useGridApiInitialization(inputApiRef, props) {
    const apiRef = React169.useRef();
    if (!apiRef.current) {
      apiRef.current = {
        unstable_eventManager: new EventManager(),
        state: {},
        instanceId: globalId2
      };
      globalId2 += 1;
    }
    React169.useImperativeHandle(inputApiRef, () => apiRef.current, [apiRef]);
    const publishEvent = React169.useCallback((...args) => {
      const [name, params, event = {}] = args;
      event.defaultMuiPrevented = false;
      if (isSyntheticEvent(event) && event.isPropagationStopped()) {
        return;
      }
      const details = props.signature === GridSignature.DataGridPro ? {
        api: apiRef.current
      } : {};
      apiRef.current.unstable_eventManager.emit(name, params, event, details);
    }, [apiRef, props.signature]);
    const subscribeEvent = React169.useCallback((event, handler, options) => {
      apiRef.current.unstable_eventManager.on(event, handler, options);
      const api = apiRef.current;
      return () => {
        api.unstable_eventManager.removeListener(event, handler);
      };
    }, [apiRef]);
    const showError = React169.useCallback((args) => {
      apiRef.current.publishEvent(GridEvents.componentError, args);
    }, [apiRef]);
    useGridApiMethod(apiRef, {
      subscribeEvent,
      publishEvent,
      showError
    }, "GridCoreApi");
    React169.useEffect(() => {
      const api = apiRef.current;
      return () => {
        api.publishEvent(GridEvents.unmount);
      };
    }, [apiRef]);
    return apiRef;
  }

  // node_modules/@mui/x-data-grid/hooks/core/useGridErrorHandler.js
  var React170 = __toModule(require_react());
  function useGridErrorHandler(apiRef, props) {
    const handleError = React170.useCallback((args) => {
      apiRef.current.setState((state) => _extends({}, state, {
        error: args
      }));
    }, [apiRef]);
    React170.useEffect(() => {
      handleError(props.error);
    }, [handleError, props.error]);
    useGridApiEventHandler(apiRef, GridEvents.componentError, handleError);
  }

  // node_modules/@mui/x-data-grid/hooks/core/useGridLocaleText.js
  var React171 = __toModule(require_react());
  var useGridLocaleText = (apiRef, props) => {
    const getLocaleText = React171.useCallback((key) => {
      if (props.localeText[key] == null) {
        throw new Error(`Missing translation for key ${key}.`);
      }
      return props.localeText[key];
    }, [props.localeText]);
    const localeTextApi = {
      getLocaleText
    };
    useGridApiMethod(apiRef, localeTextApi, "LocaleTextApi");
  };

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  }

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.js
  var React172 = __toModule(require_react());
  var useGridPipeProcessing = (apiRef) => {
    const processorsCache = React172.useRef({});
    const runAppliers = React172.useCallback((groupCache) => {
      if (!groupCache) {
        return;
      }
      Object.values(groupCache.appliers).forEach((callback) => {
        callback();
      });
    }, []);
    const registerPipeProcessor = React172.useCallback((group, id, processor) => {
      if (!processorsCache.current[group]) {
        processorsCache.current[group] = {
          processors: {},
          appliers: {}
        };
      }
      const groupCache = processorsCache.current[group];
      const oldProcessor = groupCache.processors[id];
      if (oldProcessor !== processor) {
        groupCache.processors[id] = processor;
        runAppliers(groupCache);
      }
      return () => {
        const _processors = processorsCache.current[group].processors, otherProcessors = _objectWithoutPropertiesLoose(_processors, [id].map(_toPropertyKey));
        processorsCache.current[group].processors = otherProcessors;
      };
    }, [runAppliers]);
    const registerPipeApplier = React172.useCallback((group, id, applier) => {
      if (!processorsCache.current[group]) {
        processorsCache.current[group] = {
          processors: {},
          appliers: {}
        };
      }
      processorsCache.current[group].appliers[id] = applier;
      return () => {
        const _appliers = processorsCache.current[group].appliers, otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(_toPropertyKey));
        processorsCache.current[group].appliers = otherAppliers;
      };
    }, []);
    const requestPipeProcessorsApplication = React172.useCallback((group) => {
      const groupCache = processorsCache.current[group];
      runAppliers(groupCache);
    }, [runAppliers]);
    const applyPipeProcessors = React172.useCallback((...args) => {
      const [group, value, context] = args;
      if (!processorsCache.current[group]) {
        return value;
      }
      const preProcessors = Object.values(processorsCache.current[group].processors);
      return preProcessors.reduce((acc, preProcessor) => {
        return preProcessor(acc, context);
      }, value);
    }, []);
    const preProcessingApi = {
      unstable_registerPipeProcessor: registerPipeProcessor,
      unstable_registerPipeApplier: registerPipeApplier,
      unstable_requestPipeProcessorsApplication: requestPipeProcessorsApplication,
      unstable_applyPipeProcessors: applyPipeProcessors
    };
    useGridApiMethod(apiRef, preProcessingApi, "GridPipeProcessingApi");
  };

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js
  var React174 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js
  var React173 = __toModule(require_react());
  var useFirstRender = (callback) => {
    const isFirstRender = React173.useRef(true);
    if (isFirstRender.current) {
      isFirstRender.current = false;
      callback();
    }
  };

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js
  var useGridRegisterPipeProcessor = (apiRef, group, callback) => {
    const cleanup = React174.useRef();
    const id = React174.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
    const registerPreProcessor = React174.useCallback(() => {
      cleanup.current = apiRef.current.unstable_registerPipeProcessor(group, id.current, callback);
    }, [apiRef, callback, group]);
    useFirstRender(() => {
      registerPreProcessor();
    });
    const isFirstRender = React174.useRef(true);
    React174.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else {
        registerPreProcessor();
      }
      return () => {
        if (cleanup.current) {
          cleanup.current();
          cleanup.current = null;
        }
      };
    }, [registerPreProcessor]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeApplier.js
  var React175 = __toModule(require_react());
  var useGridRegisterPipeApplier = (apiRef, group, callback) => {
    const cleanup = React175.useRef();
    const id = React175.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
    const registerPreProcessor = React175.useCallback(() => {
      cleanup.current = apiRef.current.unstable_registerPipeApplier(group, id.current, callback);
    }, [apiRef, callback, group]);
    useFirstRender(() => {
      registerPreProcessor();
    });
    const isFirstRender = React175.useRef(true);
    React175.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else {
        registerPreProcessor();
      }
      return () => {
        if (cleanup.current) {
          cleanup.current();
          cleanup.current = null;
        }
      };
    }, [registerPreProcessor]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js
  var React176 = __toModule(require_react());
  var useGridRegisterStrategyProcessor = (apiRef, strategyName, group, processor) => {
    const registerPreProcessor = React176.useCallback(() => {
      apiRef.current.unstable_registerStrategyProcessor(strategyName, group, processor);
    }, [apiRef, processor, group, strategyName]);
    useFirstRender(() => {
      registerPreProcessor();
    });
    const isFirstRender = React176.useRef(true);
    React176.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else {
        registerPreProcessor();
      }
    }, [registerPreProcessor]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.js
  var React177 = __toModule(require_react());
  var GRID_DEFAULT_STRATEGY = "none";
  var GRID_STRATEGIES_PROCESSORS = {
    rowTreeCreation: "rowTree",
    filtering: "rowTree",
    sorting: "rowTree"
  };
  var useGridStrategyProcessing = (apiRef) => {
    const availableStrategies = React177.useRef(new Map());
    const strategiesCache = React177.useRef({});
    const registerStrategyProcessor = React177.useCallback((strategyName, processorName, processor) => {
      const cleanup = () => {
        const _ref = strategiesCache.current[processorName], otherProcessors = _objectWithoutPropertiesLoose(_ref, [strategyName].map(_toPropertyKey));
        strategiesCache.current[processorName] = otherProcessors;
      };
      if (!strategiesCache.current[processorName]) {
        strategiesCache.current[processorName] = {};
      }
      const groupPreProcessors = strategiesCache.current[processorName];
      const previousProcessor = groupPreProcessors[strategyName];
      groupPreProcessors[strategyName] = processor;
      if (!previousProcessor || previousProcessor === processor) {
        return cleanup;
      }
      if (strategyName === apiRef.current.unstable_getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName])) {
        apiRef.current.publishEvent(GridEvents.activeStrategyProcessorChange, processorName);
      }
      return cleanup;
    }, [apiRef]);
    const applyStrategyProcessor = React177.useCallback((processorName, params) => {
      const activeStrategy = apiRef.current.unstable_getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName]);
      if (activeStrategy == null) {
        throw new Error("Can't apply a strategy processor before defining an active strategy");
      }
      const groupCache = strategiesCache.current[processorName];
      if (!groupCache || !groupCache[activeStrategy]) {
        throw new Error(`No processor found for processor "${processorName}" on strategy "${activeStrategy}"`);
      }
      const processor = groupCache[activeStrategy];
      return processor(params);
    }, [apiRef]);
    const getActiveStrategy = React177.useCallback((strategyGroup) => {
      var _availableStrategyEnt;
      const strategyEntries = Array.from(availableStrategies.current.entries());
      const availableStrategyEntry = strategyEntries.find(([, strategy]) => {
        if (strategy.group !== strategyGroup) {
          return false;
        }
        return strategy.isAvailable();
      });
      return (_availableStrategyEnt = availableStrategyEntry == null ? void 0 : availableStrategyEntry[0]) != null ? _availableStrategyEnt : GRID_DEFAULT_STRATEGY;
    }, []);
    const setStrategyAvailability = React177.useCallback((strategyGroup, strategyName, isAvailable) => {
      availableStrategies.current.set(strategyName, {
        group: strategyGroup,
        isAvailable
      });
      apiRef.current.publishEvent(GridEvents.strategyAvailabilityChange);
    }, [apiRef]);
    const strategyProcessingApi = {
      unstable_registerStrategyProcessor: registerStrategyProcessor,
      unstable_applyStrategyProcessor: applyStrategyProcessor,
      unstable_getActiveStrategy: getActiveStrategy,
      unstable_setStrategyAvailability: setStrategyAvailability
    };
    useGridApiMethod(apiRef, strategyProcessingApi, "GridStrategyProcessing");
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridStateInitialization.js
  var React179 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.js
  var React178 = __toModule(require_react());
  var useGridNativeEventListener = (apiRef, ref, eventName, handler, options) => {
    const logger = useGridLogger(apiRef, "useNativeEventListener");
    const [added, setAdded] = React178.useState(false);
    const handlerRef = React178.useRef(handler);
    const wrapHandler = React178.useCallback((args) => {
      return handlerRef.current && handlerRef.current(args);
    }, []);
    React178.useEffect(() => {
      handlerRef.current = handler;
    }, [handler]);
    React178.useEffect(() => {
      let targetElement;
      if (isFunction(ref)) {
        targetElement = ref();
      } else {
        targetElement = ref && ref.current ? ref.current : null;
      }
      if (targetElement && wrapHandler && eventName && !added) {
        logger.debug(`Binding native ${eventName} event`);
        targetElement.addEventListener(eventName, wrapHandler, options);
        const boundElem = targetElement;
        setAdded(true);
        const unsubscribe = () => {
          logger.debug(`Clearing native ${eventName} event`);
          boundElem.removeEventListener(eventName, wrapHandler, options);
        };
        apiRef.current.subscribeEvent(GridEvents.unmount, unsubscribe);
      }
    }, [ref, wrapHandler, eventName, added, logger, options, apiRef]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridStateInitialization.js
  var _excluded96 = ["stateId"];
  var useGridStateInitialization = (apiRef, props) => {
    const controlStateMapRef = React179.useRef({});
    const [, rawForceUpdate] = React179.useState();
    const updateControlState = React179.useCallback((controlStateItem) => {
      const {
        stateId
      } = controlStateItem, others = _objectWithoutPropertiesLoose(controlStateItem, _excluded96);
      controlStateMapRef.current[stateId] = _extends({}, others, {
        stateId
      });
    }, []);
    const setState = React179.useCallback((state) => {
      let newState;
      if (isFunction(state)) {
        newState = state(apiRef.current.state);
      } else {
        newState = state;
      }
      if (apiRef.current.state === newState) {
        return false;
      }
      let ignoreSetState = false;
      const updatedControlStateIds = [];
      Object.keys(controlStateMapRef.current).forEach((stateId) => {
        const controlState = controlStateMapRef.current[stateId];
        const oldSubState = controlState.stateSelector(apiRef.current.state, apiRef.current.instanceId);
        const newSubState = controlState.stateSelector(newState, apiRef.current.instanceId);
        if (newSubState === oldSubState) {
          return;
        }
        updatedControlStateIds.push({
          stateId: controlState.stateId,
          hasPropChanged: newSubState !== controlState.propModel
        });
        if (controlState.propModel !== void 0 && newSubState !== controlState.propModel) {
          ignoreSetState = true;
        }
      });
      if (updatedControlStateIds.length > 1) {
        throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map((el) => el.stateId).join(", ")} in the same transaction.`);
      }
      if (!ignoreSetState) {
        apiRef.current.state = newState;
        if (apiRef.current.publishEvent) {
          apiRef.current.publishEvent(GridEvents.stateChange, newState);
        }
      }
      if (updatedControlStateIds.length === 1) {
        const {
          stateId,
          hasPropChanged
        } = updatedControlStateIds[0];
        const controlState = controlStateMapRef.current[stateId];
        const model = controlState.stateSelector(newState, apiRef.current.instanceId);
        if (controlState.propOnChange && hasPropChanged) {
          const details = props.signature === GridSignature.DataGridPro ? {
            api: apiRef.current
          } : {};
          controlState.propOnChange(model, details);
        }
        if (!ignoreSetState) {
          apiRef.current.publishEvent(controlState.changeEvent, model);
        }
      }
      return !ignoreSetState;
    }, [apiRef, props.signature]);
    const forceUpdate = React179.useCallback(() => rawForceUpdate(() => apiRef.current.state), [apiRef]);
    const stateApi = {
      setState,
      forceUpdate,
      unstable_updateControlState: updateControlState
    };
    useGridApiMethod(apiRef, stateApi, "GridStateApi");
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridInitialization.js
  var useGridInitialization = (inputApiRef, props) => {
    const apiRef = useGridApiInitialization(inputApiRef, props);
    useGridLoggerFactory(apiRef, props);
    useGridErrorHandler(apiRef, props);
    useGridStateInitialization(apiRef, props);
    useGridPipeProcessing(apiRef);
    useGridStrategyProcessing(apiRef);
    useGridLocaleText(apiRef, props);
    return apiRef;
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useGridInitializeState.js
  var React180 = __toModule(require_react());
  var useGridInitializeState = (initializer, apiRef, props) => {
    const isInitialized = React180.useRef(false);
    if (!isInitialized.current) {
      apiRef.current.state = initializer(apiRef.current.state, props, apiRef);
      isInitialized.current = true;
    }
  };

  // node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js
  var React181 = __toModule(require_react());
  function writeToClipboardPolyfill(data) {
    const span = document.createElement("span");
    span.style.whiteSpace = "pre";
    span.style.userSelect = "all";
    span.style.opacity = "0px";
    span.textContent = data;
    document.body.appendChild(span);
    const range = document.createRange();
    range.selectNode(span);
    const selection = window.getSelection();
    selection.removeAllRanges();
    selection.addRange(range);
    try {
      document.execCommand("copy");
    } finally {
      document.body.removeChild(span);
    }
  }
  var useGridClipboard = (apiRef) => {
    const copySelectedRowsToClipboard = React181.useCallback((includeHeaders = false) => {
      if (apiRef.current.getSelectedRows().size === 0) {
        return;
      }
      const data = apiRef.current.getDataAsCsv({
        includeHeaders,
        delimiter: "	"
      });
      if (navigator.clipboard) {
        navigator.clipboard.writeText(data).catch(() => {
          writeToClipboardPolyfill(data);
        });
      } else {
        writeToClipboardPolyfill(data);
      }
    }, [apiRef]);
    const handleKeydown = React181.useCallback((event) => {
      var _window$getSelection;
      const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;
      if (String.fromCharCode(event.keyCode) !== "C" || !isModifierKeyPressed) {
        return;
      }
      if (((_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.toString()) !== "") {
        return;
      }
      apiRef.current.unstable_copySelectedRowsToClipboard(event.altKey);
    }, [apiRef]);
    useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, "keydown", handleKeydown);
    const clipboardApi = {
      unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard
    };
    useGridApiMethod(apiRef, clipboardApi, "GridClipboardApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js
  var React182 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/columnMenu/columnMenuSelector.js
  var gridColumnMenuSelector = (state) => state.columnMenu;

  // node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js
  var columnMenuStateInitializer = (state) => _extends({}, state, {
    columnMenu: {
      open: false
    }
  });
  var useGridColumnMenu = (apiRef) => {
    const logger = useGridLogger(apiRef, "useGridColumnMenu");
    const showColumnMenu = React182.useCallback((field) => {
      const shouldUpdate = apiRef.current.setState((state) => {
        if (state.columnMenu.open && state.columnMenu.field === field) {
          return state;
        }
        logger.debug("Opening Column Menu");
        return _extends({}, state, {
          columnMenu: {
            open: true,
            field
          }
        });
      });
      if (shouldUpdate) {
        apiRef.current.hidePreferences();
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger]);
    const hideColumnMenu = React182.useCallback(() => {
      const shouldUpdate = apiRef.current.setState((state) => {
        if (!state.columnMenu.open && state.columnMenu.field === void 0) {
          return state;
        }
        logger.debug("Hiding Column Menu");
        return _extends({}, state, {
          columnMenu: _extends({}, state.columnMenu, {
            open: false,
            field: void 0
          })
        });
      });
      if (shouldUpdate) {
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger]);
    const toggleColumnMenu = React182.useCallback((field) => {
      logger.debug("Toggle Column Menu");
      const columnMenu = gridColumnMenuSelector(apiRef.current.state);
      if (!columnMenu.open || columnMenu.field !== field) {
        showColumnMenu(field);
      } else {
        hideColumnMenu();
      }
    }, [apiRef, logger, showColumnMenu, hideColumnMenu]);
    const columnMenuApi = {
      showColumnMenu,
      hideColumnMenu,
      toggleColumnMenu
    };
    useGridApiMethod(apiRef, columnMenuApi, "GridColumnMenuApi");
    useGridApiEventHandler(apiRef, GridEvents.columnResizeStart, hideColumnMenu);
    useGridApiEventHandler(apiRef, GridEvents.virtualScrollerWheel, apiRef.current.hideColumnMenu);
    useGridApiEventHandler(apiRef, GridEvents.virtualScrollerTouchMove, apiRef.current.hideColumnMenu);
  };

  // node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js
  var React183 = __toModule(require_react());
  var import_jsx_runtime168 = __toModule(require_jsx_runtime());
  var columnsStateInitializer = (state, props, apiRef) => {
    var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;
    const isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);
    const columnsTypes = computeColumnTypes(props.columnTypes);
    const columnsState = createColumnsState({
      apiRef,
      columnTypes: columnsTypes,
      columnsToUpsert: props.columns,
      initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,
      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,
      currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},
      keepOnlyColumnsToUpsert: true
    });
    return _extends({}, state, {
      columns: columnsState
    });
  };
  function useGridColumns(apiRef, props) {
    var _props$initialState4, _props$initialState4$, _props$componentsProp2;
    const logger = useGridLogger(apiRef, "useGridColumns");
    const columnTypes = React183.useMemo(() => computeColumnTypes(props.columnTypes), [props.columnTypes]);
    const previousColumnsProp = React183.useRef(props.columns);
    const previousColumnTypesProp = React183.useRef(columnTypes);
    const isUsingColumnVisibilityModel = React183.useRef(!!props.columnVisibilityModel || !!((_props$initialState4 = props.initialState) != null && (_props$initialState4$ = _props$initialState4.columns) != null && _props$initialState4$.columnVisibilityModel));
    apiRef.current.unstable_updateControlState({
      stateId: "visibleColumns",
      propModel: props.columnVisibilityModel,
      propOnChange: props.onColumnVisibilityModelChange,
      stateSelector: gridColumnVisibilityModelSelector,
      changeEvent: GridEvents.columnVisibilityModelChange
    });
    const setGridColumnsState = React183.useCallback((columnsState) => {
      logger.debug("Updating columns state.");
      apiRef.current.setState(mergeColumnsState(columnsState));
      apiRef.current.forceUpdate();
      apiRef.current.publishEvent(GridEvents.columnsChange, columnsState.all);
    }, [logger, apiRef]);
    const getColumn = React183.useCallback((field) => gridColumnLookupSelector(apiRef)[field], [apiRef]);
    const getAllColumns = React183.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);
    const getVisibleColumns = React183.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);
    const getColumnsMeta = React183.useCallback(() => gridColumnsMetaSelector(apiRef), [apiRef]);
    const getColumnIndex = React183.useCallback((field, useVisibleColumns = true) => {
      const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);
      return columns.findIndex((col) => col.field === field);
    }, [apiRef]);
    const getColumnPosition = React183.useCallback((field) => {
      const index = getColumnIndex(field);
      return gridColumnPositionsSelector(apiRef)[index];
    }, [apiRef, getColumnIndex]);
    const setColumnVisibilityModel = React183.useCallback((model) => {
      const currentModel = gridColumnVisibilityModelSelector(apiRef);
      if (currentModel !== model) {
        apiRef.current.setState((state) => _extends({}, state, {
          columns: createColumnsState({
            apiRef,
            columnTypes,
            columnsToUpsert: [],
            initialState: void 0,
            shouldRegenColumnVisibilityModelFromColumns: false,
            currentColumnVisibilityModel: model,
            keepOnlyColumnsToUpsert: false
          })
        }));
        apiRef.current.forceUpdate();
      }
    }, [apiRef, columnTypes]);
    const updateColumns = React183.useCallback((columns) => {
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        columnsToUpsert: columns,
        initialState: void 0,
        shouldRegenColumnVisibilityModelFromColumns: true,
        keepOnlyColumnsToUpsert: false
      });
      setGridColumnsState(columnsState);
    }, [apiRef, setGridColumnsState, columnTypes]);
    const updateColumn = React183.useCallback((column2) => apiRef.current.updateColumns([column2]), [apiRef]);
    const setColumnVisibility = React183.useCallback((field, isVisible) => {
      if (isUsingColumnVisibilityModel.current) {
        var _columnVisibilityMode;
        const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
        const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;
        if (isVisible !== isCurrentlyVisible) {
          const newModel = _extends({}, columnVisibilityModel, {
            [field]: isVisible
          });
          apiRef.current.setColumnVisibilityModel(newModel);
        }
      } else {
        const column2 = apiRef.current.getColumn(field);
        const newColumn = _extends({}, column2, {
          hide: !isVisible
        });
        apiRef.current.updateColumns([newColumn]);
        const params = {
          field,
          colDef: newColumn,
          isVisible
        };
        apiRef.current.publishEvent(GridEvents.columnVisibilityChange, params);
      }
    }, [apiRef]);
    const setColumnIndex = React183.useCallback((field, targetIndexPosition) => {
      const allColumns = gridColumnFieldsSelector(apiRef);
      const oldIndexPosition = allColumns.findIndex((col) => col === field);
      if (oldIndexPosition === targetIndexPosition) {
        return;
      }
      logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);
      const updatedColumns = [...allColumns];
      updatedColumns.splice(targetIndexPosition, 0, updatedColumns.splice(oldIndexPosition, 1)[0]);
      setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {
        all: updatedColumns
      }));
      const params = {
        field,
        element: apiRef.current.getColumnHeaderElement(field),
        colDef: apiRef.current.getColumn(field),
        targetIndex: targetIndexPosition,
        oldIndex: oldIndexPosition
      };
      apiRef.current.publishEvent(GridEvents.columnOrderChange, params);
    }, [apiRef, logger, setGridColumnsState]);
    const setColumnWidth = React183.useCallback((field, width2) => {
      logger.debug(`Updating column ${field} width to ${width2}`);
      const column2 = apiRef.current.getColumn(field);
      const newColumn = _extends({}, column2, {
        width: width2
      });
      apiRef.current.updateColumns([newColumn]);
      apiRef.current.publishEvent(GridEvents.columnWidthChange, {
        element: apiRef.current.getColumnHeaderElement(field),
        colDef: newColumn,
        width: width2
      });
    }, [apiRef, logger]);
    const columnApi = {
      getColumn,
      getAllColumns,
      getColumnIndex,
      getColumnPosition,
      getVisibleColumns,
      getColumnsMeta,
      updateColumn,
      updateColumns,
      setColumnVisibilityModel,
      setColumnVisibility,
      setColumnIndex,
      setColumnWidth
    };
    useGridApiMethod(apiRef, columnApi, "GridColumnApi");
    const stateExportPreProcessing = React183.useCallback((prevState) => {
      const columnsStateToExport = {};
      if (isUsingColumnVisibilityModel.current) {
        const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);
        const hasHiddenColumns = Object.values(columnVisibilityModelToExport).some((value) => value === false);
        if (hasHiddenColumns) {
          columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;
        }
      }
      columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);
      const columns = gridColumnDefinitionsSelector(apiRef);
      const dimensions = {};
      columns.forEach((colDef) => {
        if (colDef.hasBeenResized) {
          const colDefDimensions = {};
          COLUMNS_DIMENSION_PROPERTIES.forEach((propertyName) => {
            let propertyValue = colDef[propertyName];
            if (propertyValue === Infinity) {
              propertyValue = -1;
            }
            colDefDimensions[propertyName] = propertyValue;
          });
          dimensions[colDef.field] = colDefDimensions;
        }
      });
      if (Object.keys(dimensions).length > 0) {
        columnsStateToExport.dimensions = dimensions;
      }
      return _extends({}, prevState, {
        columns: columnsStateToExport
      });
    }, [apiRef]);
    const stateRestorePreProcessing = React183.useCallback((params, context) => {
      var _context$stateToResto;
      const columnVisibilityModelToImport = isUsingColumnVisibilityModel.current ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : void 0;
      const initialState = context.stateToRestore.columns;
      if (columnVisibilityModelToImport == null && initialState == null) {
        return params;
      }
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        columnsToUpsert: [],
        initialState,
        shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel.current,
        currentColumnVisibilityModel: columnVisibilityModelToImport,
        keepOnlyColumnsToUpsert: false
      });
      apiRef.current.setState(mergeColumnsState(columnsState));
      if (initialState != null) {
        apiRef.current.publishEvent(GridEvents.columnsChange, columnsState.all);
      }
      return params;
    }, [apiRef, columnTypes]);
    const preferencePanelPreProcessing = React183.useCallback((initialValue, value) => {
      if (value === GridPreferencePanelsValue.columns) {
        var _props$componentsProp;
        const ColumnsPanel = props.components.ColumnsPanel;
        return /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));
      }
      return initialValue;
    }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    useGridRegisterPipeProcessor(apiRef, "preferencePanel", preferencePanelPreProcessing);
    const prevInnerWidth = React183.useRef(null);
    const handleGridSizeChange = (viewportInnerSize) => {
      if (prevInnerWidth.current !== viewportInnerSize.width) {
        prevInnerWidth.current = viewportInnerSize.width;
        setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));
      }
    };
    useGridApiEventHandler(apiRef, GridEvents.viewportInnerSizeChange, handleGridSizeChange);
    useGridApiOptionHandler(apiRef, GridEvents.columnVisibilityChange, props.onColumnVisibilityChange);
    const hydrateColumns = React183.useCallback(() => {
      logger.info(`Columns pipe processing have changed, regenerating the columns`);
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        columnsToUpsert: [],
        initialState: void 0,
        shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel.current,
        keepOnlyColumnsToUpsert: false
      });
      setGridColumnsState(columnsState);
    }, [apiRef, logger, setGridColumnsState, columnTypes]);
    useGridRegisterPipeApplier(apiRef, "hydrateColumns", hydrateColumns);
    const isFirstRender = React183.useRef(true);
    React183.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
        return;
      }
      logger.info(`GridColumns have changed, new length ${props.columns.length}`);
      if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {
        return;
      }
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        initialState: void 0,
        shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel.current,
        columnsToUpsert: props.columns,
        keepOnlyColumnsToUpsert: true
      });
      previousColumnsProp.current = props.columns;
      previousColumnTypesProp.current = columnTypes;
      setGridColumnsState(columnsState);
    }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);
    React183.useEffect(() => {
      if (props.columnVisibilityModel !== void 0) {
        apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);
      }
    }, [apiRef, logger, props.columnVisibilityModel]);
  }

  // node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js
  var React184 = __toModule(require_react());
  var COMPACT_DENSITY_FACTOR = 0.7;
  var COMFORTABLE_DENSITY_FACTOR = 1.3;
  var getUpdatedDensityState = (newDensity, newHeaderHeight, newRowHeight) => {
    switch (newDensity) {
      case GridDensityTypes.Compact:
        return {
          value: newDensity,
          headerHeight: Math.floor(newHeaderHeight * COMPACT_DENSITY_FACTOR),
          rowHeight: Math.floor(newRowHeight * COMPACT_DENSITY_FACTOR),
          factor: COMPACT_DENSITY_FACTOR
        };
      case GridDensityTypes.Comfortable:
        return {
          value: newDensity,
          headerHeight: Math.floor(newHeaderHeight * COMFORTABLE_DENSITY_FACTOR),
          rowHeight: Math.floor(newRowHeight * COMFORTABLE_DENSITY_FACTOR),
          factor: COMFORTABLE_DENSITY_FACTOR
        };
      default:
        return {
          value: newDensity,
          headerHeight: newHeaderHeight,
          rowHeight: newRowHeight,
          factor: 1
        };
    }
  };
  var densityStateInitializer = (state, props) => _extends({}, state, {
    density: getUpdatedDensityState(props.density, props.headerHeight, props.rowHeight)
  });
  var useGridDensity = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useDensity");
    const setDensity = React184.useCallback((newDensity, newHeaderHeight = props.headerHeight, newRowHeight = props.rowHeight) => {
      logger.debug(`Set grid density to ${newDensity}`);
      apiRef.current.setState((state) => {
        const currentDensityState = gridDensitySelector(state);
        const newDensityState = getUpdatedDensityState(newDensity, newHeaderHeight, newRowHeight);
        if (isDeepEqual(currentDensityState, newDensityState)) {
          return state;
        }
        return _extends({}, state, {
          density: newDensityState
        });
      });
      apiRef.current.forceUpdate();
    }, [logger, apiRef, props.headerHeight, props.rowHeight]);
    React184.useEffect(() => {
      apiRef.current.setDensity(props.density, props.headerHeight, props.rowHeight);
    }, [apiRef, props.density, props.rowHeight, props.headerHeight]);
    const densityApi = {
      setDensity
    };
    useGridApiMethod(apiRef, densityApi, "GridDensityApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js
  var React185 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterState.js
  var getDefaultGridFilterModel = () => ({
    items: [],
    linkOperator: GridLinkOperator.And
  });

  // node_modules/@mui/x-data-grid/utils/exportAs.js
  function exportAs(blob, extension = "csv", filename = document.title) {
    const fullName = `${filename}.${extension}`;
    if ("download" in HTMLAnchorElement.prototype) {
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = fullName;
      a.click();
      setTimeout(() => {
        URL.revokeObjectURL(url);
      });
      return;
    }
    throw new Error("MUI: exportAs not supported");
  }

  // node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js
  var serialiseCellValue = (value, delimiterCharacter) => {
    if (typeof value === "string") {
      const formattedValue = value.replace(/"/g, '""');
      if ([delimiterCharacter, "\n", "\r"].some((delimiter2) => formattedValue.includes(delimiter2))) {
        return `"${formattedValue}"`;
      }
      return formattedValue;
    }
    return value;
  };
  var objectFormattedValueWarning = buildWarning(["MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.", "You can provide a `valueFormatter` with a string representation to be used."]);
  var serialiseRow = (id, columns, getCellParams, delimiterCharacter) => columns.map((column2) => {
    const cellParams = getCellParams(id, column2.field);
    if (true) {
      if (String(cellParams.formattedValue) === "[object Object]") {
        objectFormattedValueWarning();
      }
    }
    return serialiseCellValue(cellParams.formattedValue, delimiterCharacter);
  });
  function buildCSV(options) {
    const {
      columns,
      rowIds,
      getCellParams,
      delimiterCharacter,
      includeHeaders
    } = options;
    const CSVBody = rowIds.reduce((acc, id) => `${acc}${serialiseRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter)}\r
`, "").trim();
    if (!includeHeaders) {
      return CSVBody;
    }
    const CSVHead = `${columns.filter((column2) => column2.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map((column2) => serialiseCellValue(column2.headerName || column2.field, delimiterCharacter)).join(delimiterCharacter)}\r
`;
    return `${CSVHead}${CSVBody}`.trim();
  }

  // node_modules/@mui/x-data-grid/hooks/features/export/utils.js
  var getColumnsToExport = ({
    apiRef,
    options
  }) => {
    const columns = gridColumnDefinitionsSelector(apiRef);
    if (options.fields) {
      return options.fields.map((field) => columns.find((column2) => column2.field === field)).filter((column2) => !!column2);
    }
    const validColumns = options.allColumns ? columns : gridVisibleColumnDefinitionsSelector(apiRef);
    return validColumns.filter((column2) => !column2.disableExport);
  };

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js
  var defaultGetRowsToExport = ({
    apiRef
  }) => {
    const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);
    const selectedRows = apiRef.current.getSelectedRows();
    if (selectedRows.size > 0) {
      return filteredSortedRowIds.filter((id) => selectedRows.has(id));
    }
    return filteredSortedRowIds;
  };
  var useGridCsvExport = (apiRef) => {
    const logger = useGridLogger(apiRef, "useGridCsvExport");
    const getDataAsCsv = React185.useCallback((options = {}) => {
      var _options$getRowsToExp, _options$includeHeade;
      logger.debug(`Get data as CSV`);
      const exportedColumns = getColumnsToExport({
        apiRef,
        options
      });
      const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;
      const exportedRowIds = getRowsToExport({
        apiRef
      });
      return buildCSV({
        columns: exportedColumns,
        rowIds: exportedRowIds,
        getCellParams: apiRef.current.getCellParams,
        delimiterCharacter: options.delimiter || ",",
        includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true
      });
    }, [logger, apiRef]);
    const exportDataAsCsv = React185.useCallback((options) => {
      logger.debug(`Export data as CSV`);
      const csv = getDataAsCsv(options);
      const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([239, 187, 191]) : "", csv], {
        type: "text/csv"
      });
      exportAs(blob, "csv", options == null ? void 0 : options.fileName);
    }, [logger, getDataAsCsv]);
    const csvExportApi = {
      getDataAsCsv,
      exportDataAsCsv
    };
    useGridApiMethod(apiRef, csvExportApi, "GridCsvExportApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js
  var React186 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.js
  var gridRowsMetaSelector = (state) => state.rowsMeta;

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js
  var useGridPrintExport = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridPrintExport");
    const doc = React186.useRef(null);
    const previousGridState = React186.useRef(null);
    const previousColumnVisibility = React186.useRef({});
    React186.useEffect(() => {
      doc.current = ownerDocument_default(apiRef.current.rootElementRef.current);
    }, [apiRef]);
    const updateGridColumnsForPrint = React186.useCallback((fields, allColumns) => new Promise((resolve) => {
      if (!fields && !allColumns) {
        resolve();
        return;
      }
      const exportedColumnFields = getColumnsToExport({
        apiRef,
        options: {
          fields,
          allColumns
        }
      }).map((column2) => column2.field);
      const columns = gridColumnDefinitionsSelector(apiRef);
      const newColumnVisibilityModel = {};
      columns.forEach((column2) => {
        newColumnVisibilityModel[column2.field] = exportedColumnFields.includes(column2.field);
      });
      apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);
      resolve();
    }), [apiRef]);
    const buildPrintWindow = React186.useCallback((title) => {
      const iframeEl = document.createElement("iframe");
      iframeEl.id = "grid-print-window";
      iframeEl.src = window.location.href;
      iframeEl.style.position = "absolute";
      iframeEl.style.width = "0px";
      iframeEl.style.height = "0px";
      iframeEl.title = title || document.title;
      return iframeEl;
    }, []);
    const handlePrintWindowLoad = React186.useCallback((printWindow, options) => {
      var _printWindow$contentW, _querySelector, _querySelector2;
      const normalizeOptions = _extends({
        copyStyles: true,
        hideToolbar: false,
        hideFooter: false
      }, options);
      printWindow.onload = null;
      const printDoc = printWindow.contentDocument || ((_printWindow$contentW = printWindow.contentWindow) == null ? void 0 : _printWindow$contentW.document);
      if (!printDoc) {
        return;
      }
      const headerHeight = gridDensityHeaderHeightSelector(apiRef);
      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);
      const gridRootElement = apiRef.current.rootElementRef.current;
      const gridClone = gridRootElement.cloneNode(true);
      const gridCloneViewport = gridClone.querySelector(`.${gridClasses2.virtualScroller}`);
      gridCloneViewport.style.height = "auto";
      gridCloneViewport.style.width = "auto";
      gridCloneViewport.parentElement.style.width = "auto";
      gridCloneViewport.parentElement.style.height = "auto";
      const gridMain = gridClone.querySelector(`.${gridClasses2.main}`);
      gridMain.style.overflow = "visible";
      const columnHeaders = gridClone.querySelector(`.${gridClasses2.columnHeaders}`);
      const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses2.columnHeadersInner}`);
      columnHeadersInner.style.width = "100%";
      let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses2.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;
      let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses2.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;
      if (normalizeOptions.hideToolbar) {
        var _gridClone$querySelec;
        (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses2.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();
        gridToolbarElementHeight = 0;
      }
      if (normalizeOptions.hideFooter) {
        var _gridClone$querySelec2;
        (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses2.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();
        gridFooterElementHeight = 0;
      }
      gridClone.style.height = `${rowsMeta.currentPageTotalHeight + headerHeight + gridToolbarElementHeight + gridFooterElementHeight}px`;
      printDoc.body.innerHTML = "";
      printDoc.body.appendChild(gridClone);
      const defaultPageStyle = typeof normalizeOptions.pageStyle === "function" ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;
      if (typeof defaultPageStyle === "string") {
        const styleElement = printDoc.createElement("style");
        styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));
        printDoc.head.appendChild(styleElement);
      }
      if (normalizeOptions.bodyClassName) {
        printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(" "));
      }
      if (normalizeOptions.copyStyles) {
        const headStyleElements = doc.current.querySelectorAll("style, link[rel='stylesheet']");
        for (let i = 0; i < headStyleElements.length; i += 1) {
          const node2 = headStyleElements[i];
          if (node2.tagName === "STYLE") {
            const newHeadStyleElements = printDoc.createElement(node2.tagName);
            const sheet = node2.sheet;
            if (sheet) {
              let styleCSS = "";
              for (let j = 0; j < sheet.cssRules.length; j += 1) {
                if (typeof sheet.cssRules[j].cssText === "string") {
                  styleCSS += `${sheet.cssRules[j].cssText}\r
`;
                }
              }
              newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));
              printDoc.head.appendChild(newHeadStyleElements);
            }
          } else if (node2.getAttribute("href")) {
            const newHeadStyleElements = printDoc.createElement(node2.tagName);
            for (let j = 0; j < node2.attributes.length; j += 1) {
              const attr = node2.attributes[j];
              if (attr) {
                newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || "");
              }
            }
            printDoc.head.appendChild(newHeadStyleElements);
          }
        }
      }
      if (true) {
        printWindow.contentWindow.print();
      }
    }, [apiRef, doc]);
    const handlePrintWindowAfterPrint = React186.useCallback((printWindow) => {
      var _previousGridState$cu, _previousGridState$cu2;
      doc.current.body.removeChild(printWindow);
      apiRef.current.restoreState(previousGridState.current || {});
      if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {
        apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);
      }
      apiRef.current.unstable_enableVirtualization();
      previousGridState.current = null;
      previousColumnVisibility.current = {};
    }, [apiRef]);
    const exportDataAsPrint = React186.useCallback(async (options) => {
      logger.debug(`Export data as Print`);
      if (!apiRef.current.rootElementRef.current) {
        throw new Error("MUI: No grid root element available.");
      }
      previousGridState.current = apiRef.current.exportState();
      previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);
      if (props.pagination) {
        const visibleRowCount = gridVisibleRowCountSelector(apiRef);
        apiRef.current.setPageSize(visibleRowCount);
      }
      await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);
      apiRef.current.unstable_disableVirtualization();
      const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);
      doc.current.body.appendChild(printWindow);
      if (false) {
        handlePrintWindowLoad(printWindow, options);
        handlePrintWindowAfterPrint(printWindow);
      } else {
        printWindow.onload = () => handlePrintWindowLoad(printWindow, options);
        printWindow.contentWindow.onafterprint = () => handlePrintWindowAfterPrint(printWindow);
      }
    }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);
    const printExportApi = {
      exportDataAsPrint
    };
    useGridApiMethod(apiRef, printExportApi, "GridPrintExportApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js
  var React187 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js
  function checkGridRowIdIsValid(id, row, detailErrorMessage = "A row was provided without id in the rows prop:") {
    if (id == null) {
      throw new Error(["MUI: The data grid component requires all rows to have a unique `id` property.", "Alternatively, you can use the `getRowId` prop to specify a custom id for each row.", detailErrorMessage, JSON.stringify(row)].join("\n"));
    }
  }

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js
  var cleanFilterItem = (item, apiRef) => {
    const cleanItem = _extends({}, item);
    if (cleanItem.id == null) {
      cleanItem.id = Math.round(Math.random() * 1e5);
    }
    if (cleanItem.operatorValue == null) {
      const column2 = apiRef.current.getColumn(cleanItem.columnField);
      cleanItem.operatorValue = column2 && column2.filterOperators[0].value;
    }
    return cleanItem;
  };
  var filterModelDisableMultiColumnsFilteringWarning = buildWarning(["MUI: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.", "If you are using the community version of the `DataGrid`, this prop is always `true`."], "error");
  var filterModelMissingItemIdWarning = buildWarning("MUI: The 'id' field is required on `filterModel.items` when you use multiple filters.", "error");
  var filterModelMissingItemOperatorWarning = buildWarning(["MUI: One of your filtering item have no `operatorValue` provided.", "This property will become required on `@mui/x-data-grid@6.X`."]);
  var sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {
    const hasSeveralItems = model.items.length > 1;
    let items;
    if (hasSeveralItems && disableMultipleColumnsFiltering) {
      filterModelDisableMultiColumnsFilteringWarning();
      items = [model.items[0]];
    } else {
      items = model.items;
    }
    const hasItemsWithoutIds = hasSeveralItems && items.some((item) => item.id == null);
    const hasItemWithoutOperator = items.some((item) => item.operatorValue == null);
    if (hasItemsWithoutIds) {
      filterModelMissingItemIdWarning();
    }
    if (hasItemWithoutOperator) {
      filterModelMissingItemOperatorWarning();
    }
    if (hasItemWithoutOperator || hasItemsWithoutIds) {
      return _extends({}, model, {
        items: items.map((item) => cleanFilterItem(item, apiRef))
      });
    }
    if (model.items !== items) {
      return _extends({}, model, {
        items
      });
    }
    return model;
  };
  var mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => (state) => _extends({}, state, {
    filter: _extends({}, state.filter, {
      filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)
    })
  });
  var buildAggregatedFilterApplier = (filterModel, apiRef) => {
    const {
      items,
      linkOperator = GridLinkOperator.And
    } = filterModel;
    const getFilterCallbackFromItem = (filterItem) => {
      if (!filterItem.columnField || !filterItem.operatorValue) {
        return null;
      }
      const column2 = apiRef.current.getColumn(filterItem.columnField);
      if (!column2) {
        return null;
      }
      let parsedValue;
      if (column2.valueParser) {
        var _filterItem$value;
        const parser = column2.valueParser;
        parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map((x) => parser(x)) : parser(filterItem.value);
      } else {
        parsedValue = filterItem.value;
      }
      const newFilterItem = _extends({}, filterItem, {
        value: parsedValue
      });
      const filterOperators = column2.filterOperators;
      if (!(filterOperators != null && filterOperators.length)) {
        throw new Error(`MUI: No filter operators found for column '${column2.field}'.`);
      }
      const filterOperator = filterOperators.find((operator) => operator.value === newFilterItem.operatorValue);
      if (!filterOperator) {
        throw new Error(`MUI: No filter operator found for column '${column2.field}' and operator value '${newFilterItem.operatorValue}'.`);
      }
      const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column2);
      if (typeof applyFilterOnRow !== "function") {
        return null;
      }
      const fn2 = (rowId) => {
        const cellParams = apiRef.current.getCellParams(rowId, newFilterItem.columnField);
        return applyFilterOnRow(cellParams);
      };
      return {
        fn: fn2,
        item: newFilterItem
      };
    };
    const appliers = items.map(getFilterCallbackFromItem).filter((callback) => !!callback);
    if (appliers.length === 0) {
      return null;
    }
    return (rowId, shouldApplyFilter) => {
      const filteredAppliers = shouldApplyFilter ? appliers.filter((applier) => shouldApplyFilter(applier.item)) : appliers;
      if (linkOperator === GridLinkOperator.And) {
        return filteredAppliers.every((applier) => applier.fn(rowId));
      }
      return filteredAppliers.some((applier) => applier.fn(rowId));
    };
  };

  // node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js
  var import_jsx_runtime169 = __toModule(require_jsx_runtime());
  var filterStateInitializer = (state, props, apiRef) => {
    var _ref, _props$filterModel, _props$initialState, _props$initialState$f;
    const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();
    return _extends({}, state, {
      filter: {
        filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),
        visibleRowsLookup: {},
        filteredDescendantCountLookup: {}
      }
    });
  };
  var useGridFilter = (apiRef, props) => {
    var _props$componentsProp2;
    const logger = useGridLogger(apiRef, "useGridFilter");
    apiRef.current.unstable_updateControlState({
      stateId: "filter",
      propModel: props.filterModel,
      propOnChange: props.onFilterModelChange,
      stateSelector: gridFilterModelSelector,
      changeEvent: GridEvents.filterModelChange
    });
    const updateFilteredRows = React187.useCallback(() => {
      apiRef.current.setState((state) => {
        const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);
        const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;
        const filteringResult = apiRef.current.unstable_applyStrategyProcessor("filtering", {
          isRowMatchingFilters
        });
        return _extends({}, state, {
          filter: _extends({}, state.filter, filteringResult)
        });
      });
      apiRef.current.publishEvent(GridEvents.filteredRowsSet);
    }, [props.filterMode, apiRef]);
    const applyFilters = React187.useCallback(() => {
      updateFilteredRows();
      apiRef.current.forceUpdate();
    }, [apiRef, updateFilteredRows]);
    const upsertFilterItem = React187.useCallback((item) => {
      const filterModel = gridFilterModelSelector(apiRef);
      const items = [...filterModel.items];
      const itemIndex = items.findIndex((filterItem) => filterItem.id === item.id);
      if (itemIndex === -1) {
        items.push(item);
      } else {
        items[itemIndex] = item;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items
      }));
    }, [apiRef]);
    const deleteFilterItem = React187.useCallback((itemToDelete) => {
      const filterModel = gridFilterModelSelector(apiRef);
      const items = filterModel.items.filter((item) => item.id !== itemToDelete.id);
      if (items.length === filterModel.items.length) {
        return;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items
      }));
    }, [apiRef]);
    const showFilterPanel = React187.useCallback((targetColumnField) => {
      logger.debug("Displaying filter panel");
      if (targetColumnField) {
        const filterModel = gridFilterModelSelector(apiRef);
        const filterItemsWithValue = filterModel.items.filter((item) => item.value !== void 0);
        let newFilterItems;
        const filterItemOnTarget = filterItemsWithValue.find((item) => item.columnField === targetColumnField);
        if (filterItemOnTarget) {
          newFilterItems = filterItemsWithValue;
        } else if (props.disableMultipleColumnsFiltering) {
          newFilterItems = [{
            columnField: targetColumnField
          }];
        } else {
          newFilterItems = [...filterItemsWithValue, {
            columnField: targetColumnField
          }];
        }
        apiRef.current.setFilterModel(_extends({}, filterModel, {
          items: newFilterItems
        }));
      }
      apiRef.current.showPreferences(GridPreferencePanelsValue.filters);
    }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
    const hideFilterPanel = React187.useCallback(() => {
      logger.debug("Hiding filter panel");
      apiRef.current.hidePreferences();
    }, [apiRef, logger]);
    const setFilterLinkOperator = React187.useCallback((linkOperator) => {
      const filterModel = gridFilterModelSelector(apiRef);
      if (filterModel.linkOperator === linkOperator) {
        return;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        linkOperator
      }));
    }, [apiRef]);
    const setFilterModel = React187.useCallback((model) => {
      const currentModel = gridFilterModelSelector(apiRef);
      if (currentModel !== model) {
        logger.debug("Setting filter model");
        apiRef.current.setState(mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef));
        apiRef.current.unstable_applyFilters();
      }
    }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
    const getVisibleRowModels = React187.useCallback(() => {
      const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);
      return new Map(visibleSortedRows.map((row) => [row.id, row.model]));
    }, [apiRef]);
    const filterApi = {
      setFilterLinkOperator,
      unstable_applyFilters: applyFilters,
      deleteFilterItem,
      upsertFilterItem,
      setFilterModel,
      showFilterPanel,
      hideFilterPanel,
      getVisibleRowModels
    };
    useGridApiMethod(apiRef, filterApi, "GridFilterApi");
    const stateExportPreProcessing = React187.useCallback((prevState) => {
      const filterModelToExport = gridFilterModelSelector(apiRef);
      if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {
        return prevState;
      }
      return _extends({}, prevState, {
        filter: {
          filterModel: filterModelToExport
        }
      });
    }, [apiRef]);
    const stateRestorePreProcessing = React187.useCallback((params, context) => {
      var _context$stateToResto;
      const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;
      if (filterModel == null) {
        return params;
      }
      apiRef.current.setState(mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef));
      return _extends({}, params, {
        callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]
      });
    }, [apiRef, props.disableMultipleColumnsFiltering]);
    const preferencePanelPreProcessing = React187.useCallback((initialValue, value) => {
      if (value === GridPreferencePanelsValue.filters) {
        var _props$componentsProp;
        const FilterPanel = props.components.FilterPanel;
        return /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));
      }
      return initialValue;
    }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);
    const flatFilteringMethod = React187.useCallback((params) => {
      if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {
        const rowIds = gridRowIdsSelector(apiRef);
        const filteredRowsLookup = {};
        for (let i = 0; i < rowIds.length; i += 1) {
          const rowId = rowIds[i];
          filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);
        }
        return {
          filteredRowsLookup,
          visibleRowsLookup: filteredRowsLookup,
          filteredDescendantCountLookup: {}
        };
      }
      return {
        visibleRowsLookup: {},
        filteredRowsLookup: {},
        filteredDescendantCountLookup: {}
      };
    }, [apiRef, props.filterMode]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    useGridRegisterPipeProcessor(apiRef, "preferencePanel", preferencePanelPreProcessing);
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "filtering", flatFilteringMethod);
    const handleColumnsChange = React187.useCallback(() => {
      logger.debug("onColUpdated - GridColumns changed, applying filters");
      const filterModel = gridFilterModelSelector(apiRef);
      const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);
      const newFilterItems = filterModel.items.filter((item) => item.columnField && filterableColumnsLookup[item.columnField]);
      if (newFilterItems.length < filterModel.items.length) {
        apiRef.current.setFilterModel(_extends({}, filterModel, {
          items: newFilterItems
        }));
      }
    }, [apiRef, logger]);
    const handleStrategyProcessorChange = React187.useCallback((methodName) => {
      if (methodName === "filtering") {
        apiRef.current.unstable_applyFilters();
      }
    }, [apiRef]);
    useGridApiEventHandler(apiRef, GridEvents.rowsSet, updateFilteredRows);
    useGridApiEventHandler(apiRef, GridEvents.rowExpansionChange, apiRef.current.unstable_applyFilters);
    useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);
    useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);
    useFirstRender(() => {
      apiRef.current.unstable_applyFilters();
    });
    React187.useEffect(() => {
      if (props.filterModel !== void 0) {
        apiRef.current.setFilterModel(props.filterModel);
      }
    }, [apiRef, logger, props.filterModel]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js
  var React188 = __toModule(require_react());
  var focusStateInitializer = (state) => _extends({}, state, {
    focus: {
      cell: null,
      columnHeader: null
    },
    tabIndex: {
      cell: null,
      columnHeader: null
    }
  });
  var useGridFocus = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridFocus");
    const lastClickedCell = React188.useRef(null);
    const setCellFocus = React188.useCallback((id, field) => {
      if (!apiRef.current.getRow(id)) {
        return;
      }
      const focusedCell = gridFocusCellSelector(apiRef);
      if ((focusedCell == null ? void 0 : focusedCell.id) === id && focusedCell.field === field) {
        return;
      }
      apiRef.current.setState((state) => {
        logger.debug(`Focusing on cell with id=${id} and field=${field}`);
        return _extends({}, state, {
          tabIndex: {
            cell: {
              id,
              field
            },
            columnHeader: null
          },
          focus: {
            cell: {
              id,
              field
            },
            columnHeader: null
          }
        });
      });
      apiRef.current.forceUpdate();
      apiRef.current.publishEvent(GridEvents.cellFocusIn, apiRef.current.getCellParams(id, field));
    }, [apiRef, logger]);
    const setColumnHeaderFocus = React188.useCallback((field, event = {}) => {
      const cell = gridFocusCellSelector(apiRef);
      if (cell) {
        apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(cell.id, cell.field), event);
      }
      apiRef.current.setState((state) => {
        logger.debug(`Focusing on column header with colIndex=${field}`);
        return _extends({}, state, {
          tabIndex: {
            columnHeader: {
              field
            },
            cell: null
          },
          focus: {
            columnHeader: {
              field
            },
            cell: null
          }
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef, logger]);
    const moveFocusToRelativeCell = React188.useCallback((id, field, direction) => {
      let columnIndexToFocus = apiRef.current.getColumnIndex(field);
      let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);
      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
      if (direction === "right") {
        columnIndexToFocus += 1;
      } else if (direction === "left") {
        columnIndexToFocus -= 1;
      } else {
        rowIndexToFocus += 1;
      }
      const currentPage = getVisibleRows(apiRef, {
        pagination: props.pagination,
        paginationMode: props.paginationMode
      });
      if (columnIndexToFocus >= visibleColumns.length) {
        rowIndexToFocus += 1;
        if (rowIndexToFocus < currentPage.rows.length) {
          columnIndexToFocus = 0;
        }
      } else if (columnIndexToFocus < 0) {
        rowIndexToFocus -= 1;
        if (rowIndexToFocus >= 0) {
          columnIndexToFocus = visibleColumns.length - 1;
        }
      }
      rowIndexToFocus = clamp2(rowIndexToFocus, 0, currentPage.rows.length - 1);
      columnIndexToFocus = clamp2(columnIndexToFocus, 0, visibleColumns.length - 1);
      const rowToFocus = currentPage.rows[rowIndexToFocus];
      const columnToFocus = visibleColumns[columnIndexToFocus];
      apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);
    }, [apiRef, props.pagination, props.paginationMode]);
    const handleCellDoubleClick = React188.useCallback(({
      id,
      field
    }) => {
      apiRef.current.setCellFocus(id, field);
    }, [apiRef]);
    const handleCellKeyDown = React188.useCallback((params, event) => {
      if (event.key === "Enter" || event.key === "Tab" || isNavigationKey(event.key)) {
        return;
      }
      apiRef.current.setCellFocus(params.id, params.field);
    }, [apiRef]);
    const handleColumnHeaderFocus = React188.useCallback(({
      field
    }, event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      apiRef.current.setColumnHeaderFocus(field, event);
    }, [apiRef]);
    const handleBlur = React188.useCallback(() => {
      logger.debug(`Clearing focus`);
      apiRef.current.setState((state) => _extends({}, state, {
        focus: {
          cell: null,
          columnHeader: null
        }
      }));
    }, [logger, apiRef]);
    const handleCellMouseUp = React188.useCallback((params) => {
      lastClickedCell.current = params;
    }, []);
    const handleDocumentClick = React188.useCallback((event) => {
      const cellParams = lastClickedCell.current;
      lastClickedCell.current = null;
      const focusedCell = gridFocusCellSelector(apiRef);
      if (!focusedCell) {
        if (cellParams) {
          apiRef.current.setCellFocus(cellParams.id, cellParams.field);
        }
        return;
      }
      if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {
        return;
      }
      const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);
      if (cellElement != null && cellElement.contains(event.target)) {
        return;
      }
      if (!apiRef.current.getRow(focusedCell.id)) {
        return;
      }
      apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(focusedCell.id, focusedCell.field), event);
      if (cellParams) {
        apiRef.current.setCellFocus(cellParams.id, cellParams.field);
      } else {
        apiRef.current.setState((state) => _extends({}, state, {
          focus: {
            cell: null,
            columnHeader: null
          }
        }));
        apiRef.current.forceUpdate();
      }
    }, [apiRef]);
    const handleCellModeChange = React188.useCallback((params) => {
      if (params.cellMode === "view") {
        return;
      }
      const cell = gridFocusCellSelector(apiRef);
      if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {
        apiRef.current.setCellFocus(params.id, params.field);
      }
    }, [apiRef]);
    useGridApiMethod(apiRef, {
      setCellFocus,
      setColumnHeaderFocus,
      unstable_moveFocusToRelativeCell: moveFocusToRelativeCell
    }, "GridFocusApi");
    React188.useEffect(() => {
      const cell = gridFocusCellSelector(apiRef);
      if (cell) {
        const updatedRow = apiRef.current.getRow(cell.id);
        if (!updatedRow) {
          apiRef.current.setState((state) => _extends({}, state, {
            focus: {
              cell: null,
              columnHeader: null
            }
          }));
        }
      }
    }, [apiRef, props.rows]);
    React188.useEffect(() => {
      const doc = ownerDocument_default(apiRef.current.rootElementRef.current);
      doc.addEventListener("click", handleDocumentClick);
      return () => {
        doc.removeEventListener("click", handleDocumentClick);
      };
    }, [apiRef, handleDocumentClick]);
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderBlur, handleBlur);
    useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, handleCellDoubleClick);
    useGridApiEventHandler(apiRef, GridEvents.cellMouseUp, handleCellMouseUp);
    useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);
    useGridApiEventHandler(apiRef, GridEvents.cellModeChange, handleCellModeChange);
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderFocus, handleColumnHeaderFocus);
  };

  // node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js
  var React189 = __toModule(require_react());
  var useGridKeyboardNavigation = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridKeyboardNavigation");
    const currentPage = useGridVisibleRows(apiRef, props);
    const goToCell = React189.useCallback((colIndex, rowIndex, closestColumnToUse = "left") => {
      var _visibleSortedRows$ro;
      const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);
      const rowId = (_visibleSortedRows$ro = visibleSortedRows[rowIndex]) == null ? void 0 : _visibleSortedRows$ro.id;
      const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);
      if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {
        if (closestColumnToUse === "left") {
          colIndex = nextCellColSpanInfo.leftVisibleCellIndex;
        } else if (closestColumnToUse === "right") {
          colIndex = nextCellColSpanInfo.rightVisibleCellIndex;
        }
      }
      logger.debug(`Navigating to cell row ${rowIndex}, col ${colIndex}`);
      apiRef.current.scrollToIndexes({
        colIndex,
        rowIndex
      });
      const field = apiRef.current.getVisibleColumns()[colIndex].field;
      apiRef.current.setCellFocus(rowId, field);
    }, [apiRef, logger]);
    const goToHeader = React189.useCallback((colIndex, event) => {
      logger.debug(`Navigating to header col ${colIndex}`);
      apiRef.current.scrollToIndexes({
        colIndex
      });
      const field = apiRef.current.getVisibleColumns()[colIndex].field;
      apiRef.current.setColumnHeaderFocus(field, event);
    }, [apiRef, logger]);
    const handleCellNavigationKeyDown = React189.useCallback((params, event) => {
      const dimensions = apiRef.current.getRootDimensions();
      if (!currentPage.range || !dimensions) {
        return;
      }
      const viewportPageSize = apiRef.current.unstable_getViewportPageSize();
      const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);
      const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
      const rowIndexBefore = visibleSortedRows.findIndex((row) => row.id === params.id);
      const firstRowIndexInPage = currentPage.range.firstRowIndex;
      const lastRowIndexInPage = currentPage.range.lastRowIndex;
      const firstColIndex = 0;
      const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
      let shouldPreventDefault = true;
      switch (event.key) {
        case "ArrowDown":
        case "Enter": {
          if (rowIndexBefore < lastRowIndexInPage) {
            goToCell(colIndexBefore, rowIndexBefore + 1);
          }
          break;
        }
        case "ArrowUp": {
          if (rowIndexBefore > firstRowIndexInPage) {
            goToCell(colIndexBefore, rowIndexBefore - 1);
          } else {
            goToHeader(colIndexBefore, event);
          }
          break;
        }
        case "ArrowRight": {
          if (colIndexBefore < lastColIndex) {
            goToCell(colIndexBefore + 1, rowIndexBefore, "right");
          }
          break;
        }
        case "ArrowLeft": {
          if (colIndexBefore > firstColIndex) {
            goToCell(colIndexBefore - 1, rowIndexBefore);
          }
          break;
        }
        case "Tab": {
          if (event.shiftKey && colIndexBefore > firstColIndex) {
            goToCell(colIndexBefore - 1, rowIndexBefore, "left");
          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {
            goToCell(colIndexBefore + 1, rowIndexBefore, "right");
          }
          break;
        }
        case " ": {
          const field = params.field;
          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
            break;
          }
          const colDef = params.colDef;
          if (colDef && colDef.type === "treeDataGroup") {
            break;
          }
          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {
            goToCell(colIndexBefore, Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage));
          }
          break;
        }
        case "PageDown": {
          if (rowIndexBefore < lastRowIndexInPage) {
            goToCell(colIndexBefore, Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage));
          }
          break;
        }
        case "PageUp": {
          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);
          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {
            goToCell(colIndexBefore, nextRowIndex);
          } else {
            goToHeader(colIndexBefore, event);
          }
          break;
        }
        case "Home": {
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            goToCell(firstColIndex, firstRowIndexInPage);
          } else {
            goToCell(firstColIndex, rowIndexBefore);
          }
          break;
        }
        case "End": {
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            goToCell(lastColIndex, lastRowIndexInPage);
          } else {
            goToCell(lastColIndex, rowIndexBefore);
          }
          break;
        }
        default: {
          shouldPreventDefault = false;
        }
      }
      if (shouldPreventDefault) {
        event.preventDefault();
      }
    }, [apiRef, currentPage, goToCell, goToHeader]);
    const handleColumnHeaderKeyDown = React189.useCallback((params, event) => {
      var _currentPage$range$fi, _currentPage$range, _currentPage$range$la, _currentPage$range2;
      const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses2.columnHeaderTitleContainerContent}`);
      const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);
      if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {
        return;
      }
      const dimensions = apiRef.current.getRootDimensions();
      if (!dimensions) {
        return;
      }
      const viewportPageSize = apiRef.current.unstable_getViewportPageSize();
      const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
      const firstRowIndexInPage = (_currentPage$range$fi = (_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) != null ? _currentPage$range$fi : null;
      const lastRowIndexInPage = (_currentPage$range$la = (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex) != null ? _currentPage$range$la : null;
      const firstColIndex = 0;
      const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
      let shouldPreventDefault = true;
      switch (event.key) {
        case "ArrowDown": {
          if (firstRowIndexInPage !== null) {
            goToCell(colIndexBefore, firstRowIndexInPage);
          }
          break;
        }
        case "ArrowRight": {
          if (colIndexBefore < lastColIndex) {
            goToHeader(colIndexBefore + 1, event);
          }
          break;
        }
        case "ArrowLeft": {
          if (colIndexBefore > firstColIndex) {
            goToHeader(colIndexBefore - 1, event);
          }
          break;
        }
        case "PageDown": {
          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
            goToCell(colIndexBefore, Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage));
          }
          break;
        }
        case "Home": {
          goToHeader(firstColIndex, event);
          break;
        }
        case "End": {
          goToHeader(lastColIndex, event);
          break;
        }
        case "Enter": {
          if (event.ctrlKey || event.metaKey) {
            apiRef.current.toggleColumnMenu(params.field);
          }
          break;
        }
        case " ": {
          break;
        }
        default: {
          shouldPreventDefault = false;
        }
      }
      if (shouldPreventDefault) {
        event.preventDefault();
      }
    }, [apiRef, currentPage, goToCell, goToHeader]);
    const handleCellKeyDown = React189.useCallback((params, event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      const cellParams = apiRef.current.getCellParams(params.id, params.field);
      if (cellParams.cellMode !== GridCellModes.Edit && isNavigationKey(event.key)) {
        apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, cellParams, event);
      }
    }, [apiRef]);
    useGridApiEventHandler(apiRef, GridEvents.cellNavigationKeyDown, handleCellNavigationKeyDown);
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderKeyDown, handleColumnHeaderKeyDown);
    useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPageSize.js
  var React190 = __toModule(require_react());
  var defaultPageSize = (autoPageSize) => autoPageSize ? 0 : 100;
  var mergeStateWithPageSize = (pageSize2) => (state) => _extends({}, state, {
    pagination: _extends({}, state.pagination, {
      pageSize: pageSize2
    })
  });
  var useGridPageSize = (apiRef, props) => {
    var _props$initialState2, _props$initialState2$;
    const logger = useGridLogger(apiRef, "useGridPageSize");
    const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);
    apiRef.current.unstable_updateControlState({
      stateId: "pageSize",
      propModel: props.pageSize,
      propOnChange: props.onPageSizeChange,
      stateSelector: gridPageSizeSelector,
      changeEvent: GridEvents.pageSizeChange
    });
    const setPageSize = React190.useCallback((pageSize2) => {
      if (pageSize2 === gridPageSizeSelector(apiRef)) {
        return;
      }
      logger.debug(`Setting page size to ${pageSize2}`);
      apiRef.current.setState(mergeStateWithPageSize(pageSize2));
      apiRef.current.forceUpdate();
    }, [apiRef, logger]);
    const pageSizeApi = {
      setPageSize
    };
    useGridApiMethod(apiRef, pageSizeApi, "GridPageSizeApi");
    const stateExportPreProcessing = React190.useCallback((prevState) => {
      var _props$initialState, _props$initialState$p;
      const pageSizeToExport = gridPageSizeSelector(apiRef);
      const shouldExportPageSize = props.pageSize != null || ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null || pageSizeToExport !== defaultPageSize(props.autoPageSize);
      if (!shouldExportPageSize) {
        return prevState;
      }
      return _extends({}, prevState, {
        pagination: _extends({}, prevState.pagination, {
          pageSize: pageSizeToExport
        })
      });
    }, [apiRef, props.pageSize, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.pageSize, props.autoPageSize]);
    const stateRestorePreProcessing = React190.useCallback((params, context) => {
      var _context$stateToResto;
      const pageSize2 = (_context$stateToResto = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto.pageSize;
      if (pageSize2 != null) {
        apiRef.current.setState(mergeStateWithPageSize(pageSize2));
      }
      return params;
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    const handleUpdateAutoPageSize = React190.useCallback(() => {
      const dimensions = apiRef.current.getRootDimensions();
      if (!props.autoPageSize || !dimensions) {
        return;
      }
      const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);
      apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);
    }, [apiRef, props.autoPageSize, rowHeight]);
    useGridApiEventHandler(apiRef, GridEvents.viewportInnerSizeChange, handleUpdateAutoPageSize);
    React190.useEffect(() => {
      if (props.pageSize != null && !props.autoPageSize) {
        apiRef.current.setPageSize(props.pageSize);
      }
    }, [apiRef, props.autoPageSize, props.pageSize]);
    React190.useEffect(() => {
      handleUpdateAutoPageSize();
    }, [handleUpdateAutoPageSize]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPage.js
  var React191 = __toModule(require_react());
  var getPageCount = (rowCount, pageSize2) => {
    if (pageSize2 > 0 && rowCount > 0) {
      return Math.ceil(rowCount / pageSize2);
    }
    return 0;
  };
  var applyValidPage = (paginationState) => {
    if (!paginationState.pageCount) {
      return paginationState;
    }
    return _extends({}, paginationState, {
      page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)
    });
  };
  var mergeStateWithPage = (page) => (state) => _extends({}, state, {
    pagination: applyValidPage(_extends({}, state.pagination, {
      page
    }))
  });
  var noRowCountInServerMode = buildWarning(["MUI: the 'rowCount' prop is undefined while using paginationMode='server'", "For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation"], "error");
  var useGridPage = (apiRef, props) => {
    var _props$initialState2, _props$initialState2$;
    const logger = useGridLogger(apiRef, "useGridPage");
    const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);
    apiRef.current.unstable_updateControlState({
      stateId: "page",
      propModel: props.page,
      propOnChange: props.onPageChange,
      stateSelector: gridPageSelector,
      changeEvent: GridEvents.pageChange
    });
    const setPage = React191.useCallback((page) => {
      logger.debug(`Setting page to ${page}`);
      apiRef.current.setState(mergeStateWithPage(page));
      apiRef.current.forceUpdate();
    }, [apiRef, logger]);
    const pageApi = {
      setPage
    };
    useGridApiMethod(apiRef, pageApi, "GridPageApi");
    const stateExportPreProcessing = React191.useCallback((prevState) => {
      var _props$initialState, _props$initialState$p;
      const pageToExport = gridPageSelector(apiRef);
      const shouldExportPage = props.page != null || ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null || pageToExport !== 0;
      if (!shouldExportPage) {
        return prevState;
      }
      return _extends({}, prevState, {
        pagination: _extends({}, prevState.pagination, {
          page: pageToExport
        })
      });
    }, [apiRef, props.page, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page]);
    const stateRestorePreProcessing = React191.useCallback((params, context) => {
      var _context$stateToResto, _context$stateToResto2;
      const page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);
      apiRef.current.setState(mergeStateWithPage(page));
      return params;
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    const handlePageSizeChange = (pageSize2) => {
      apiRef.current.setState((state) => {
        const pageCount = getPageCount(state.pagination.rowCount, pageSize2);
        return _extends({}, state, {
          pagination: applyValidPage(_extends({}, state.pagination, {
            pageCount,
            page: state.pagination.page
          }))
        });
      });
      apiRef.current.forceUpdate();
    };
    const handlePageChange = () => apiRef.current.scrollToIndexes({
      rowIndex: gridPageSelector(apiRef) * gridPageSizeSelector(apiRef)
    });
    useGridApiEventHandler(apiRef, GridEvents.pageSizeChange, handlePageSizeChange);
    useGridApiEventHandler(apiRef, GridEvents.pageChange, handlePageChange);
    React191.useEffect(() => {
      if (true) {
        if (props.paginationMode === "server" && props.rowCount == null) {
          noRowCountInServerMode();
        }
      }
    }, [props.rowCount, props.paginationMode]);
    React191.useEffect(() => {
      apiRef.current.setState((state) => {
        const rowCount = props.rowCount !== void 0 ? props.rowCount : visibleTopLevelRowCount;
        const pageCount = getPageCount(rowCount, state.pagination.pageSize);
        const page = props.page == null ? state.pagination.page : props.page;
        return _extends({}, state, {
          pagination: applyValidPage(_extends({}, state.pagination, {
            page,
            rowCount,
            pageCount
          }))
        });
      });
      apiRef.current.forceUpdate();
    }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPagination.js
  var paginationStateInitializer = (state, props) => {
    var _props$initialState, _props$initialState$p, _ref, _props$page, _props$initialState2, _props$initialState2$, _props$rowCount, _props$rowCount2;
    let pageSize2;
    if (props.pageSize != null) {
      pageSize2 = props.pageSize;
    } else if (((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null) {
      pageSize2 = props.initialState.pagination.pageSize;
    } else {
      pageSize2 = defaultPageSize(props.autoPageSize);
    }
    return _extends({}, state, {
      pagination: {
        pageSize: pageSize2,
        page: (_ref = (_props$page = props.page) != null ? _props$page : (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page) != null ? _ref : 0,
        pageCount: getPageCount((_props$rowCount = props.rowCount) != null ? _props$rowCount : 0, pageSize2),
        rowCount: (_props$rowCount2 = props.rowCount) != null ? _props$rowCount2 : 0
      }
    });
  };
  var useGridPagination = (apiRef, props) => {
    useGridPageSize(apiRef, props);
    useGridPage(apiRef, props);
  };

  // node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js
  var React192 = __toModule(require_react());
  var preferencePanelStateInitializer = (state, props) => {
    var _props$initialState$p, _props$initialState;
    return _extends({}, state, {
      preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {
        open: false
      }
    });
  };
  var useGridPreferencesPanel = (apiRef) => {
    const logger = useGridLogger(apiRef, "useGridPreferencesPanel");
    const preferencePanelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);
    const hideTimeout = React192.useRef();
    const immediateTimeout = React192.useRef();
    const hidePreferences = React192.useCallback(() => {
      logger.debug("Hiding Preferences Panel");
      if (preferencePanelState.openedPanelValue) {
        apiRef.current.publishEvent(GridEvents.preferencePanelClose, {
          openedPanelValue: preferencePanelState.openedPanelValue
        });
      }
      apiRef.current.setState((state) => _extends({}, state, {
        preferencePanel: {
          open: false
        }
      }));
      apiRef.current.forceUpdate();
    }, [apiRef, logger, preferencePanelState.openedPanelValue]);
    const doNotHidePanel = React192.useCallback(() => {
      immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);
    }, []);
    const hidePreferencesDelayed = React192.useCallback(() => {
      hideTimeout.current = setTimeout(hidePreferences, 100);
    }, [hidePreferences]);
    const showPreferences = React192.useCallback((newValue) => {
      logger.debug("Opening Preferences Panel");
      doNotHidePanel();
      apiRef.current.setState((state) => _extends({}, state, {
        preferencePanel: _extends({}, state.preferencePanel, {
          open: true,
          openedPanelValue: newValue
        })
      }));
      apiRef.current.publishEvent(GridEvents.preferencePanelOpen, {
        openedPanelValue: newValue
      });
      apiRef.current.forceUpdate();
    }, [logger, doNotHidePanel, apiRef]);
    useGridApiMethod(apiRef, {
      showPreferences,
      hidePreferences: hidePreferencesDelayed
    }, "ColumnMenuApi");
    const stateExportPreProcessing = React192.useCallback((prevState) => {
      const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);
      if (!preferencePanelToExport.open && !preferencePanelToExport.openedPanelValue) {
        return prevState;
      }
      return _extends({}, prevState, {
        preferencePanel: preferencePanelToExport
      });
    }, [apiRef]);
    const stateRestorePreProcessing = React192.useCallback((params, context) => {
      const preferencePanel = context.stateToRestore.preferencePanel;
      if (preferencePanel != null) {
        apiRef.current.setState((state) => _extends({}, state, {
          preferencePanel
        }));
      }
      return params;
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    React192.useEffect(() => {
      return () => {
        clearTimeout(hideTimeout.current);
        clearTimeout(immediateTimeout.current);
      };
    }, []);
  };

  // node_modules/@mui/x-data-grid/hooks/features/editRows/useGridEditing.old.js
  var React195 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/editRows/gridEditRowsSelector.js
  var gridEditRowsStateSelector = (state) => state.editRows;

  // node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.old.js
  var React193 = __toModule(require_react());
  function isPromise(promise) {
    return typeof promise.then === "function";
  }
  var useCellEditing = (apiRef, props) => {
    var _props$experimentalFe2;
    const logger = useGridLogger(apiRef, "useGridEditRows");
    const buildCallback = (callback) => (...args) => {
      if (props.editMode === GridEditModes.Cell) {
        callback(...args);
      }
    };
    const setCellMode = React193.useCallback((id, field, mode) => {
      if (apiRef.current.getCellMode(id, field) === mode) {
        return;
      }
      logger.debug(`Switching cell id: ${id} field: ${field} to mode: ${mode}`);
      apiRef.current.setState((state) => {
        const newEditRowsState = _extends({}, state.editRows);
        newEditRowsState[id] = _extends({}, newEditRowsState[id]);
        if (mode === GridCellModes.Edit) {
          newEditRowsState[id][field] = {
            value: apiRef.current.getCellValue(id, field)
          };
        } else {
          delete newEditRowsState[id][field];
          if (!Object.keys(newEditRowsState[id]).length) {
            delete newEditRowsState[id];
          }
        }
        return _extends({}, state, {
          editRows: newEditRowsState
        });
      });
      apiRef.current.forceUpdate();
      apiRef.current.publishEvent(GridEvents.cellModeChange, apiRef.current.getCellParams(id, field));
    }, [apiRef, logger]);
    const getCellMode = React193.useCallback((id, field) => {
      const editRowsState = gridEditRowsStateSelector(apiRef.current.state);
      const isEditing = editRowsState[id] && editRowsState[id][field];
      return isEditing ? GridCellModes.Edit : GridCellModes.View;
    }, [apiRef]);
    const commitCellChange = React193.useCallback((params, event = {}) => {
      var _props$experimentalFe;
      const {
        id,
        field
      } = params;
      apiRef.current.unstable_runPendingEditCellValueMutation(id, field);
      const model = apiRef.current.getEditRowsModel();
      if (!model[id] || !model[id][field]) {
        throw new Error(`MUI: Cell at id: ${id} and field: ${field} is not in edit mode.`);
      }
      const editCellProps = model[id][field];
      const column2 = apiRef.current.getColumn(field);
      const row = apiRef.current.getRow(id);
      if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {
        const cellProps = model[id][field];
        if (cellProps.isValidating || cellProps.error) {
          return false;
        }
      }
      const commitParams = _extends({}, params, {
        value: editCellProps.value
      });
      let hasError = !!editCellProps.error;
      if (!hasError && typeof column2.preProcessEditCellProps === "function") {
        const result = column2.preProcessEditCellProps({
          id,
          row,
          props: editCellProps
        });
        if (isPromise(result)) {
          return result.then((newEditCellProps) => {
            apiRef.current.unstable_setEditCellProps({
              id,
              field,
              props: newEditCellProps
            });
            if (newEditCellProps.error) {
              return false;
            }
            apiRef.current.publishEvent(GridEvents.cellEditCommit, commitParams, event);
            return true;
          });
        }
        apiRef.current.unstable_setEditCellProps({
          id,
          field,
          props: result
        });
        hasError = !!result.error;
      }
      if (!hasError) {
        apiRef.current.publishEvent(GridEvents.cellEditCommit, commitParams, event);
        return true;
      }
      return false;
    }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);
    const setCellEditingEditCellValue = React193.useCallback((params) => {
      const column2 = apiRef.current.getColumn(params.field);
      const row = apiRef.current.getRow(params.id);
      return new Promise((resolve) => {
        let newEditCellProps = {
          value: params.value
        };
        const model = apiRef.current.getEditRowsModel();
        const editCellProps = model[params.id][params.field];
        if (typeof column2.preProcessEditCellProps !== "function") {
          apiRef.current.unstable_setEditCellProps(_extends({}, params, {
            props: newEditCellProps
          }));
          resolve(true);
          return;
        }
        newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {
          props: _extends({}, editCellProps, {
            isValidating: true
          })
        }));
        Promise.resolve(column2.preProcessEditCellProps({
          id: params.id,
          row,
          props: _extends({}, newEditCellProps, {
            value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)
          })
        })).then((newEditCellPropsProcessed) => {
          apiRef.current.unstable_setEditCellProps(_extends({}, params, {
            props: _extends({}, newEditCellPropsProcessed, {
              isValidating: false
            })
          }));
          resolve(!newEditCellPropsProcessed.error);
        });
      });
    }, [apiRef]);
    const cellEditingApi = {
      setCellMode,
      getCellMode,
      commitCellChange,
      unstable_setCellEditingEditCellValue: setCellEditingEditCellValue
    };
    useGridApiMethod(apiRef, cellEditingApi, "EditRowApi");
    const handleCellKeyDown = React193.useCallback(async (params, event) => {
      const {
        id,
        field,
        cellMode,
        isEditable
      } = params;
      if (!isEditable) {
        return;
      }
      const isEditMode = cellMode === GridCellModes.Edit;
      const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;
      if (!isEditMode && isCellEnterEditModeKeys(event.key) && !isModifierKeyPressed && !(event.key === " " && event.shiftKey)) {
        apiRef.current.publishEvent(GridEvents.cellEditStart, params, event);
      }
      if (!isEditMode && isDeleteKeys(event.key)) {
        apiRef.current.setEditCellValue({
          id,
          field,
          value: ""
        });
        apiRef.current.commitCellChange({
          id,
          field
        }, event);
        apiRef.current.publishEvent(GridEvents.cellEditStop, params, event);
      }
      if (isEditMode && isCellEditCommitKeys(event.key)) {
        const commitParams = {
          id,
          field
        };
        const isValid = await apiRef.current.commitCellChange(commitParams, event);
        if (!isValid) {
          return;
        }
      }
      if (isEditMode && isCellExitEditModeKeys(event.key)) {
        apiRef.current.publishEvent(GridEvents.cellEditStop, params, event);
      }
    }, [apiRef]);
    const handleCellDoubleClick = React193.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      apiRef.current.publishEvent(GridEvents.cellEditStart, params, event);
    }, [apiRef]);
    const commitPropsAndExit = async (params, event) => {
      if (params.cellMode === GridCellModes.View) {
        return;
      }
      await apiRef.current.commitCellChange(params, event);
      apiRef.current.publishEvent(GridEvents.cellEditStop, params, event);
    };
    const handleCellFocusOut = useEventCallback_default((params, event) => {
      commitPropsAndExit(params, event);
    });
    const handleColumnHeaderDragStart = useEventCallback_default(() => {
      const cell = gridFocusCellSelector(apiRef);
      if (!cell) {
        return;
      }
      const params = apiRef.current.getCellParams(cell.id, cell.field);
      commitPropsAndExit(params, {});
    });
    const handleCellEditStart = React193.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);
      if (isKeyboardEvent(event) && isPrintableKey(event.key)) {
        apiRef.current.unstable_setEditCellProps({
          id: params.id,
          field: params.field,
          props: {
            value: ""
          }
        });
      }
    }, [apiRef]);
    const handleCellEditStop = React193.useCallback((params, event) => {
      apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);
      if (!isKeyboardEvent(event)) {
        return;
      }
      if (isCellEditCommitKeys(event.key)) {
        apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);
        return;
      }
      if (event.key === "Escape" || isDeleteKeys(event.key)) {
        apiRef.current.setCellFocus(params.id, params.field);
      }
    }, [apiRef]);
    const handleCellEditCommit = React193.useCallback((params) => {
      const {
        id,
        field
      } = params;
      const model = apiRef.current.getEditRowsModel();
      const {
        value
      } = model[id][field];
      logger.debug(`Setting cell id: ${id} field: ${field} to value: ${value == null ? void 0 : value.toString()}`);
      const row = apiRef.current.getRow(id);
      if (row) {
        const column2 = apiRef.current.getColumn(params.field);
        let rowUpdate = _extends({}, row, {
          [field]: value
        });
        if (column2.valueSetter) {
          rowUpdate = column2.valueSetter({
            row,
            value
          });
        }
        apiRef.current.updateRows([rowUpdate]);
      }
    }, [apiRef, logger]);
    const handleEditCellPropsChange = React193.useCallback((params) => {
      const row = apiRef.current.getRow(params.id);
      const column2 = apiRef.current.getColumn(params.field);
      const editCellProps = column2.preProcessEditCellProps ? column2.preProcessEditCellProps({
        id: params.id,
        row,
        props: params.props
      }) : params.props;
      if (isPromise(editCellProps)) {
        editCellProps.then((newEditCellProps) => {
          apiRef.current.unstable_setEditCellProps(_extends({}, params, {
            props: newEditCellProps
          }));
        });
      } else {
        apiRef.current.unstable_setEditCellProps(_extends({}, params, {
          props: editCellProps
        }));
      }
    }, [apiRef]);
    useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));
    useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));
    useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));
    useGridApiEventHandler(apiRef, GridEvents.cellEditStart, buildCallback(handleCellEditStart));
    useGridApiEventHandler(apiRef, GridEvents.cellEditStop, buildCallback(handleCellEditStop));
    useGridApiEventHandler(apiRef, GridEvents.cellEditCommit, buildCallback(handleCellEditCommit));
    useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));
    useGridApiOptionHandler(apiRef, GridEvents.cellEditCommit, props.onCellEditCommit);
    useGridApiOptionHandler(apiRef, GridEvents.cellEditStart, props.onCellEditStart);
    useGridApiOptionHandler(apiRef, GridEvents.cellEditStop, props.onCellEditStop);
  };

  // node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.old.js
  var React194 = __toModule(require_react());
  var useGridRowEditing = (apiRef, props) => {
    var _props$experimentalFe2, _props$experimentalFe4;
    const focusTimeout = React194.useRef(null);
    const nextFocusedCell = React194.useRef(null);
    const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);
    const buildCallback = (callback) => (...args) => {
      if (props.editMode === GridEditModes.Row) {
        callback(...args);
      }
    };
    const setRowMode = React194.useCallback((id, mode) => {
      if (mode === apiRef.current.getRowMode(id)) {
        return;
      }
      apiRef.current.setState((state) => {
        const newEditRowsState = _extends({}, state.editRows);
        if (mode === GridRowModes.Edit) {
          newEditRowsState[id] = {};
          columns.forEach((column2) => {
            const cellParams = apiRef.current.getCellParams(id, column2.field);
            if (cellParams.isEditable) {
              newEditRowsState[id][column2.field] = {
                value: cellParams.value
              };
            }
          });
        } else {
          delete newEditRowsState[id];
        }
        return _extends({}, state, {
          editRows: newEditRowsState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef, columns]);
    const getRowMode = React194.useCallback((id) => {
      if (props.editMode === GridEditModes.Cell) {
        return GridRowModes.View;
      }
      const editRowsState = gridEditRowsStateSelector(apiRef.current.state);
      return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;
    }, [apiRef, props.editMode]);
    const commitRowChange = React194.useCallback((id, event = {}) => {
      var _props$experimentalFe;
      if (props.editMode === GridEditModes.Cell) {
        throw new Error(`MUI: You can't commit changes when the edit mode is 'cell'.`);
      }
      apiRef.current.unstable_runPendingEditCellValueMutation(id);
      const model = apiRef.current.getEditRowsModel();
      const editRowProps = model[id];
      if (!editRowProps) {
        throw new Error(`MUI: Row at id: ${id} is not being edited.`);
      }
      if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {
        const isValid = Object.keys(editRowProps).reduce((acc, field) => {
          return acc && !editRowProps[field].isValidating && !editRowProps[field].error;
        }, true);
        if (!isValid) {
          return false;
        }
      }
      const hasFieldWithError = Object.values(editRowProps).some((value) => !!value.error);
      if (hasFieldWithError) {
        return false;
      }
      const fieldsWithValidator = Object.keys(editRowProps).filter((field) => {
        const column2 = apiRef.current.getColumn(field);
        return typeof column2.preProcessEditCellProps === "function";
      });
      if (fieldsWithValidator.length > 0) {
        const row = apiRef.current.getRow(id);
        const validatorErrors = fieldsWithValidator.map(async (field) => {
          const column2 = apiRef.current.getColumn(field);
          const newEditCellProps = await Promise.resolve(column2.preProcessEditCellProps({
            id,
            row,
            props: editRowProps[field]
          }));
          apiRef.current.unstable_setEditCellProps({
            id,
            field,
            props: newEditCellProps
          });
          return newEditCellProps.error;
        });
        return Promise.all(validatorErrors).then((errors) => {
          if (errors.some((error) => !!error)) {
            return false;
          }
          apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);
          return true;
        });
      }
      apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);
      return true;
    }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);
    const setRowEditingEditCellValue = React194.useCallback((params) => {
      const model = apiRef.current.getEditRowsModel();
      const editRow = model[params.id];
      const row = apiRef.current.getRow(params.id);
      let isValid = true;
      return new Promise((resolve) => {
        Object.keys(editRow).forEach(async (field) => {
          const column2 = apiRef.current.getColumn(field);
          let editCellProps = field === params.field ? {
            value: params.value
          } : editRow[field];
          editCellProps = apiRef.current.unstable_setEditCellProps({
            id: params.id,
            field,
            props: _extends({}, editCellProps, {
              isValidating: true
            })
          });
          if (column2.preProcessEditCellProps) {
            editCellProps = await Promise.resolve(column2.preProcessEditCellProps({
              id: params.id,
              row,
              props: _extends({}, editCellProps, {
                value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value
              })
            }));
          }
          if (editCellProps.error) {
            isValid = false;
          }
          apiRef.current.unstable_setEditCellProps({
            id: params.id,
            field,
            props: _extends({}, editCellProps, {
              isValidating: false
            })
          });
        });
        resolve(isValid);
      });
    }, [apiRef]);
    const rowEditingApi = {
      setRowMode,
      getRowMode,
      commitRowChange,
      unstable_setRowEditingEditCellValue: setRowEditingEditCellValue
    };
    useGridApiMethod(apiRef, rowEditingApi, "EditRowApi");
    const handleCellKeyDown = React194.useCallback(async (params, event) => {
      const {
        cellMode,
        isEditable
      } = params;
      if (!isEditable) {
        return;
      }
      const isEditMode = cellMode === GridCellModes.Edit;
      const rowParams = apiRef.current.getRowParams(params.id);
      if (isEditMode) {
        if (event.key === "Enter") {
          var _props$experimentalFe3;
          const isValid = await apiRef.current.commitRowChange(params.id);
          if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {
            return;
          }
          apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);
        } else if (event.key === "Escape") {
          apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);
        }
      } else if (event.key === "Enter") {
        apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);
      }
    }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);
    const handleCellDoubleClick = React194.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      const rowParams = apiRef.current.getRowParams(params.id);
      apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);
    }, [apiRef]);
    const handleEditCellPropsChange = React194.useCallback((params) => {
      const row = apiRef.current.getRow(params.id);
      const model = apiRef.current.getEditRowsModel();
      const editRow = model[params.id];
      Object.keys(editRow).forEach(async (field) => {
        const column2 = apiRef.current.getColumn(field);
        if (column2.preProcessEditCellProps) {
          const editCellProps = field === params.field ? params.props : editRow[field];
          const newEditCellProps = await Promise.resolve(column2.preProcessEditCellProps({
            id: params.id,
            row,
            props: editCellProps
          }));
          apiRef.current.unstable_setEditCellProps({
            id: params.id,
            field,
            props: newEditCellProps
          });
        } else if (field === params.field) {
          apiRef.current.unstable_setEditCellProps(params);
        }
      });
    }, [apiRef]);
    const handleRowEditStart = React194.useCallback((params) => {
      apiRef.current.setRowMode(params.id, GridRowModes.Edit);
    }, [apiRef]);
    const handleRowEditStop = React194.useCallback((params, event) => {
      apiRef.current.setRowMode(params.id, GridRowModes.View);
      if (event.key === "Enter") {
        apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);
      }
    }, [apiRef]);
    const handleRowEditCommit = React194.useCallback((id) => {
      const model = apiRef.current.getEditRowsModel();
      const editRow = model[id];
      if (!editRow) {
        throw new Error(`MUI: Row at id: ${id} is not being edited.`);
      }
      const row = apiRef.current.getRow(id);
      if (row) {
        let rowUpdate = _extends({}, row);
        Object.keys(editRow).forEach((field) => {
          const column2 = apiRef.current.getColumn(field);
          const value = editRow[field].value;
          if (column2.valueSetter) {
            rowUpdate = column2.valueSetter({
              row: rowUpdate,
              value
            });
          } else {
            rowUpdate[field] = value;
          }
        });
        apiRef.current.updateRows([rowUpdate]);
      }
    }, [apiRef]);
    const handleCellFocusIn = React194.useCallback((params) => {
      nextFocusedCell.current = params;
    }, []);
    const commitPropsAndExit = async (params, event) => {
      if (params.cellMode === GridCellModes.View) {
        return;
      }
      nextFocusedCell.current = null;
      focusTimeout.current = setTimeout(async () => {
        var _nextFocusedCell$curr;
        if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {
          await apiRef.current.commitRowChange(params.id, event);
          const rowParams = apiRef.current.getRowParams(params.id);
          apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);
        }
      });
    };
    const handleCellFocusOut = useEventCallback_default((params, event) => {
      commitPropsAndExit(params, event);
    });
    const handleColumnHeaderDragStart = useEventCallback_default(() => {
      const cell = gridFocusCellSelector(apiRef);
      if (!cell) {
        return;
      }
      const params = apiRef.current.getCellParams(cell.id, cell.field);
      commitPropsAndExit(params, {});
    });
    useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));
    useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));
    useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));
    useGridApiEventHandler(apiRef, GridEvents.rowEditStart, buildCallback(handleRowEditStart));
    useGridApiEventHandler(apiRef, GridEvents.rowEditStop, buildCallback(handleRowEditStop));
    useGridApiEventHandler(apiRef, GridEvents.rowEditCommit, buildCallback(handleRowEditCommit));
    useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, buildCallback(handleCellFocusIn));
    useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));
    useGridApiOptionHandler(apiRef, GridEvents.rowEditCommit, props.onRowEditCommit);
    useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);
    useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);
  };

  // node_modules/@mui/x-data-grid/hooks/features/editRows/useGridEditing.old.js
  var editingStateInitializer = (state) => _extends({}, state, {
    editRows: {}
  });
  function useGridEditing(apiRef, props) {
    var _props$experimentalFe2;
    const logger = useGridLogger(apiRef, "useGridEditRows");
    useCellEditing(apiRef, props);
    useGridRowEditing(apiRef, props);
    const debounceMap = React195.useRef({});
    apiRef.current.unstable_updateControlState({
      stateId: "editRows",
      propModel: props.editRowsModel,
      propOnChange: props.onEditRowsModelChange,
      stateSelector: gridEditRowsStateSelector,
      changeEvent: GridEvents.editRowsModelChange
    });
    const isCellEditable = React195.useCallback((params) => !params.rowNode.isAutoGenerated && !!params.colDef.editable && !!params.colDef.renderEditCell && (!props.isCellEditable || props.isCellEditable(params)), [props.isCellEditable]);
    const maybeDebounce = (id, field, debounceMs, callback) => {
      if (!debounceMs) {
        callback();
        return;
      }
      if (!debounceMap.current[id]) {
        debounceMap.current[id] = {};
      }
      if (debounceMap.current[id][field]) {
        const [timeout3] = debounceMap.current[id][field];
        clearTimeout(timeout3);
      }
      const callbackToRunImmediately = () => {
        callback();
        const [timeout3] = debounceMap.current[id][field];
        clearTimeout(timeout3);
        delete debounceMap.current[id][field];
      };
      const timeout2 = setTimeout(() => {
        callback();
        delete debounceMap.current[id][field];
      }, debounceMs);
      debounceMap.current[id][field] = [timeout2, callbackToRunImmediately];
    };
    const runPendingEditCellValueMutation = React195.useCallback((id, field) => {
      if (!debounceMap.current[id]) {
        return;
      }
      if (!field) {
        Object.keys(debounceMap.current[id]).forEach((debouncedField) => {
          const [, callback] = debounceMap.current[id][debouncedField];
          callback();
        });
      } else if (debounceMap.current[id][field]) {
        const [, callback] = debounceMap.current[id][field];
        callback();
      }
    }, []);
    const setEditCellValue = React195.useCallback((params, event = {}) => {
      maybeDebounce(params.id, params.field, params.debounceMs, () => {
        var _props$experimentalFe;
        if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {
          if (props.editMode === "row") {
            return apiRef.current.unstable_setRowEditingEditCellValue(params);
          }
          return apiRef.current.unstable_setCellEditingEditCellValue(params);
        }
        const newParams = {
          id: params.id,
          field: params.field,
          props: {
            value: params.value
          }
        };
        return apiRef.current.publishEvent(GridEvents.editCellPropsChange, newParams, event);
      });
    }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);
    const parseValue = React195.useCallback((id, field, value) => {
      const column2 = apiRef.current.getColumn(field);
      return column2.valueParser ? column2.valueParser(value, apiRef.current.getCellParams(id, field)) : value;
    }, [apiRef]);
    const setEditCellProps = React195.useCallback((params) => {
      const {
        id,
        field,
        props: editProps
      } = params;
      logger.debug(`Setting cell props on id: ${id} field: ${field}`);
      apiRef.current.setState((state) => {
        const editRowsModel = _extends({}, state.editRows);
        editRowsModel[id] = _extends({}, state.editRows[id]);
        editRowsModel[id][field] = _extends({}, editProps, {
          value: parseValue(id, field, editProps.value)
        });
        return _extends({}, state, {
          editRows: editRowsModel
        });
      });
      apiRef.current.forceUpdate();
      const editRowsState = gridEditRowsStateSelector(apiRef.current.state);
      return editRowsState[id][field];
    }, [apiRef, logger, parseValue]);
    const setEditRowsModel = React195.useCallback((model) => {
      const currentModel = gridEditRowsStateSelector(apiRef.current.state);
      if (currentModel !== model) {
        logger.debug(`Setting editRows model`);
        apiRef.current.setState((state) => _extends({}, state, {
          editRows: model
        }));
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger]);
    const getEditRowsModel = React195.useCallback(() => gridEditRowsStateSelector(apiRef.current.state), [apiRef]);
    const preventTextSelection = React195.useCallback((params, event) => {
      const isMoreThanOneClick = event.detail > 1;
      if (params.isEditable && params.cellMode === GridCellModes.View && isMoreThanOneClick) {
        event.preventDefault();
      }
    }, []);
    useGridApiEventHandler(apiRef, GridEvents.cellMouseDown, preventTextSelection);
    useGridApiOptionHandler(apiRef, GridEvents.editCellPropsChange, props.onEditCellPropsChange);
    const editingSharedApi = {
      isCellEditable,
      setEditRowsModel,
      getEditRowsModel,
      setEditCellValue,
      unstable_setEditCellProps: setEditCellProps,
      unstable_parseValue: parseValue,
      unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation
    };
    useGridApiMethod(apiRef, editingSharedApi, "EditRowApi");
    React195.useEffect(() => {
      if (props.editRowsModel !== void 0) {
        apiRef.current.setEditRowsModel(props.editRowsModel);
      }
    }, [apiRef, props.editRowsModel]);
  }

  // node_modules/@mui/x-data-grid/hooks/features/editRows/useGridEditing.new.js
  var React198 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.new.js
  var React196 = __toModule(require_react());
  var missingOnProcessRowUpdateErrorWarning = buildWarning(["MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see http://mui.com/components/data-grid/editing/#persistence."], "error");
  var useGridCellEditing = (apiRef, props) => {
    const {
      processRowUpdate,
      onProcessRowUpdateError
    } = props;
    const runIfEditModeIsCell = (callback) => (...args) => {
      if (props.editMode === GridEditModes.Cell) {
        callback(...args);
      }
    };
    const throwIfNotEditable = React196.useCallback((id, field) => {
      const params = apiRef.current.getCellParams(id, field);
      if (!apiRef.current.isCellEditable(params)) {
        throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);
      }
    }, [apiRef]);
    const throwIfNotInMode = React196.useCallback((id, field, mode) => {
      if (apiRef.current.getCellMode(id, field) !== mode) {
        throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);
      }
    }, [apiRef]);
    const handleCellDoubleClick = React196.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      if (params.cellMode === GridCellModes.Edit) {
        return;
      }
      const newParams = _extends({}, params, {
        reason: GridCellEditStartReasons.cellDoubleClick
      });
      apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);
    }, [apiRef]);
    const handleCellFocusOut = React196.useCallback((params, event) => {
      if (params.cellMode === GridCellModes.View) {
        return;
      }
      const newParams = _extends({}, params, {
        reason: GridCellEditStopReasons.cellFocusOut
      });
      apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);
    }, [apiRef]);
    const handleCellKeyDown = React196.useCallback((params, event) => {
      if (params.cellMode === GridCellModes.Edit) {
        let reason;
        if (event.key === "Escape") {
          reason = GridCellEditStopReasons.escapeKeyDown;
        } else if (event.key === "Enter") {
          reason = GridCellEditStopReasons.enterKeyDown;
        } else if (event.key === "Tab") {
          reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;
          event.preventDefault();
        }
        if (reason) {
          const newParams = _extends({}, params, {
            reason
          });
          apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);
        }
      } else if (params.isEditable) {
        let reason;
        if (isPrintableKey(event.key)) {
          if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {
            return;
          }
          reason = GridCellEditStartReasons.printableKeyDown;
        } else if (event.key === "Enter") {
          reason = GridCellEditStartReasons.enterKeyDown;
        } else if (event.key === "Delete") {
          reason = GridCellEditStartReasons.deleteKeyDown;
        }
        if (reason) {
          const newParams = _extends({}, params, {
            reason
          });
          apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);
        }
      }
    }, [apiRef]);
    const handleCellEditStart = React196.useCallback((params, event) => {
      const {
        id,
        field,
        reason
      } = params;
      apiRef.current.startCellEditMode(params);
      if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {
        apiRef.current.setEditCellValue({
          id,
          field,
          value: ""
        }, event);
      }
    }, [apiRef]);
    const handleCellEditStop = React196.useCallback((params) => {
      const {
        id,
        field,
        reason
      } = params;
      let cellToFocusAfter;
      if (reason === GridCellEditStopReasons.enterKeyDown) {
        cellToFocusAfter = "below";
      } else if (reason === GridCellEditStopReasons.tabKeyDown) {
        cellToFocusAfter = "right";
      } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {
        cellToFocusAfter = "left";
      }
      let ignoreModifications = reason === "escapeKeyDown";
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      if (editingState[id][field].isProcessingProps) {
        ignoreModifications = true;
      }
      apiRef.current.stopCellEditMode({
        id,
        field,
        ignoreModifications,
        cellToFocusAfter
      });
    }, [apiRef]);
    useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsCell(handleCellDoubleClick));
    useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsCell(handleCellFocusOut));
    useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsCell(handleCellKeyDown));
    useGridApiEventHandler(apiRef, GridEvents.cellEditStart, runIfEditModeIsCell(handleCellEditStart));
    useGridApiEventHandler(apiRef, GridEvents.cellEditStop, runIfEditModeIsCell(handleCellEditStop));
    useGridApiOptionHandler(apiRef, GridEvents.cellEditStart, props.onCellEditStart);
    useGridApiOptionHandler(apiRef, GridEvents.cellEditStop, props.onCellEditStop);
    const getCellMode = React196.useCallback((id, field) => {
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const isEditing = editingState[id] && editingState[id][field];
      return isEditing ? GridCellModes.Edit : GridCellModes.View;
    }, [apiRef]);
    const updateOrDeleteFieldState = React196.useCallback((id, field, newProps) => {
      apiRef.current.setState((state) => {
        const newEditingState = _extends({}, state.editRows);
        if (newProps !== null) {
          newEditingState[id] = _extends({}, newEditingState[id], {
            [field]: _extends({}, newProps)
          });
        } else {
          delete newEditingState[id][field];
          if (Object.keys(newEditingState[id]).length === 0) {
            delete newEditingState[id];
          }
        }
        return _extends({}, state, {
          editRows: newEditingState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const startCellEditMode = React196.useCallback((params) => {
      const {
        id,
        field
      } = params;
      throwIfNotEditable(id, field);
      throwIfNotInMode(id, field, GridCellModes.View);
      const newProps = {
        value: apiRef.current.getCellValue(id, field),
        error: false,
        isProcessingProps: false
      };
      updateOrDeleteFieldState(id, field, newProps);
      apiRef.current.setCellFocus(id, field);
    }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);
    const stopCellEditMode = React196.useCallback((params) => {
      const {
        id,
        field,
        ignoreModifications,
        cellToFocusAfter = "none"
      } = params;
      throwIfNotInMode(id, field, GridCellModes.Edit);
      apiRef.current.unstable_runPendingEditCellValueMutation(id, field);
      const updateFocusedCellIfNeeded = () => {
        if (cellToFocusAfter !== "none") {
          apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);
        }
      };
      if (ignoreModifications) {
        updateFocusedCellIfNeeded();
        updateOrDeleteFieldState(id, field, null);
        return;
      }
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const {
        error,
        isProcessingProps
      } = editingState[id][field];
      if (error || isProcessingProps) {
        return;
      }
      const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);
      if (processRowUpdate) {
        const handleError = (errorThrown) => {
          if (onProcessRowUpdateError) {
            onProcessRowUpdateError(errorThrown);
          } else {
            missingOnProcessRowUpdateErrorWarning();
          }
        };
        try {
          const row = apiRef.current.getRow(id);
          Promise.resolve(processRowUpdate(rowUpdate, row)).then((finalRowUpdate) => {
            apiRef.current.updateRows([finalRowUpdate]);
            updateFocusedCellIfNeeded();
            updateOrDeleteFieldState(id, field, null);
          }).catch(handleError);
        } catch (errorThrown) {
          handleError(errorThrown);
        }
      } else {
        apiRef.current.updateRows([rowUpdate]);
        updateFocusedCellIfNeeded();
        updateOrDeleteFieldState(id, field, null);
      }
    }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteFieldState]);
    const setCellEditingEditCellValue = React196.useCallback(async (params) => {
      const {
        id,
        field,
        value
      } = params;
      throwIfNotEditable(id, field);
      throwIfNotInMode(id, field, GridCellModes.Edit);
      const column2 = apiRef.current.getColumn(field);
      const row = apiRef.current.getRow(id);
      let parsedValue = value;
      if (column2.valueParser) {
        parsedValue = column2.valueParser(value, apiRef.current.getCellParams(id, field));
      }
      let editingState = gridEditRowsStateSelector(apiRef.current.state);
      let newProps = _extends({}, editingState[id][field], {
        value: parsedValue
      });
      if (column2.preProcessEditCellProps) {
        const hasChanged = value !== editingState[id][field].value;
        newProps = _extends({}, newProps, {
          isProcessingProps: true
        });
        updateOrDeleteFieldState(id, field, newProps);
        newProps = await Promise.resolve(column2.preProcessEditCellProps({
          id,
          row,
          props: newProps,
          hasChanged
        }));
      }
      if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {
        return false;
      }
      editingState = gridEditRowsStateSelector(apiRef.current.state);
      newProps = _extends({}, newProps, {
        isProcessingProps: false
      });
      newProps.value = column2.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
      updateOrDeleteFieldState(id, field, newProps);
      editingState = gridEditRowsStateSelector(apiRef.current.state);
      return !editingState[id][field].error;
    }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);
    const getRowWithUpdatedValuesFromCellEditing = React196.useCallback((id, field) => {
      const column2 = apiRef.current.getColumn(field);
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const {
        value
      } = editingState[id][field];
      const row = apiRef.current.getRow(id);
      return column2.valueSetter ? column2.valueSetter({
        value,
        row
      }) : _extends({}, row, {
        [field]: value
      });
    }, [apiRef]);
    const editingApi = {
      getCellMode,
      startCellEditMode,
      stopCellEditMode,
      unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,
      unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing
    };
    useGridApiMethod(apiRef, editingApi, "EditingApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.new.js
  var React197 = __toModule(require_react());
  var missingOnProcessRowUpdateErrorWarning2 = buildWarning(["MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see http://mui.com/components/data-grid/editing/#persistence."], "error");
  var useGridRowEditing2 = (apiRef, props) => {
    const focusTimeout = React197.useRef(null);
    const nextFocusedCell = React197.useRef(null);
    const {
      processRowUpdate,
      onProcessRowUpdateError
    } = props;
    const runIfEditModeIsRow = (callback) => (...args) => {
      if (props.editMode === GridEditModes.Row) {
        callback(...args);
      }
    };
    const throwIfNotEditable = React197.useCallback((id, field) => {
      const params = apiRef.current.getCellParams(id, field);
      if (!apiRef.current.isCellEditable(params)) {
        throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);
      }
    }, [apiRef]);
    const throwIfNotInMode = React197.useCallback((id, mode) => {
      if (apiRef.current.getRowMode(id) !== mode) {
        throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);
      }
    }, [apiRef]);
    const handleCellDoubleClick = React197.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {
        return;
      }
      const rowParams = apiRef.current.getRowParams(params.id);
      const newParams = _extends({}, rowParams, {
        field: params.field,
        reason: GridRowEditStartReasons.cellDoubleClick
      });
      apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);
    }, [apiRef]);
    const handleCellFocusIn = React197.useCallback((params) => {
      nextFocusedCell.current = params;
    }, []);
    const handleCellFocusOut = React197.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {
        return;
      }
      nextFocusedCell.current = null;
      focusTimeout.current = setTimeout(() => {
        var _nextFocusedCell$curr;
        focusTimeout.current = null;
        if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {
          const rowParams = apiRef.current.getRowParams(params.id);
          const newParams = _extends({}, rowParams, {
            field: params.field,
            reason: GridRowEditStopReasons.rowFocusOut
          });
          apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);
        }
      });
    }, [apiRef]);
    React197.useEffect(() => {
      return () => {
        clearTimeout(focusTimeout.current);
      };
    }, []);
    const handleCellKeyDown = React197.useCallback((params, event) => {
      if (params.cellMode === GridRowModes.Edit) {
        let reason;
        if (event.key === "Escape") {
          reason = GridRowEditStopReasons.escapeKeyDown;
        } else if (event.key === "Enter") {
          reason = GridRowEditStopReasons.enterKeyDown;
        } else if (event.key === "Tab") {
          const columnFields = gridColumnFieldsSelector(apiRef).filter((field) => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));
          if (event.shiftKey) {
            if (params.field === columnFields[0]) {
              reason = GridRowEditStopReasons.shiftTabKeyDown;
            }
          } else if (params.field === columnFields[columnFields.length - 1]) {
            reason = GridRowEditStopReasons.tabKeyDown;
          }
          if (reason) {
            event.preventDefault();
          }
        }
        if (reason) {
          const rowParams = apiRef.current.getRowParams(params.id);
          const newParams = _extends({}, rowParams, {
            reason,
            field: params.field
          });
          apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);
        }
      } else if (params.isEditable) {
        let reason;
        if (isPrintableKey(event.key)) {
          if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {
            return;
          }
          reason = GridRowEditStartReasons.printableKeyDown;
        } else if (event.key === "Enter") {
          reason = GridRowEditStartReasons.enterKeyDown;
        } else if (event.key === "Delete") {
          reason = GridRowEditStartReasons.deleteKeyDown;
        }
        if (reason) {
          const rowParams = apiRef.current.getRowParams(params.id);
          const newParams = _extends({}, rowParams, {
            field: params.field,
            reason
          });
          apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);
        }
      }
    }, [apiRef]);
    const handleRowEditStart = React197.useCallback((params, event) => {
      const {
        id,
        field,
        reason
      } = params;
      apiRef.current.startRowEditMode({
        id,
        fieldToFocus: field
      });
      if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {
        apiRef.current.setEditCellValue({
          id,
          field,
          value: ""
        }, event);
      }
    }, [apiRef]);
    const handleRowEditStop = React197.useCallback((params) => {
      const {
        id,
        reason,
        field
      } = params;
      apiRef.current.unstable_runPendingEditCellValueMutation(id);
      let cellToFocusAfter;
      if (reason === GridRowEditStopReasons.enterKeyDown) {
        cellToFocusAfter = "below";
      } else if (reason === GridRowEditStopReasons.tabKeyDown) {
        cellToFocusAfter = "right";
      } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {
        cellToFocusAfter = "left";
      }
      let ignoreModifications = reason === "escapeKeyDown";
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      if (!ignoreModifications) {
        ignoreModifications = Object.values(editingState[id]).some((fieldProps) => {
          return fieldProps.isProcessingProps;
        });
      }
      apiRef.current.stopRowEditMode({
        id,
        ignoreModifications,
        field,
        cellToFocusAfter
      });
    }, [apiRef]);
    useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsRow(handleCellDoubleClick));
    useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, runIfEditModeIsRow(handleCellFocusIn));
    useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsRow(handleCellFocusOut));
    useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsRow(handleCellKeyDown));
    useGridApiEventHandler(apiRef, GridEvents.rowEditStart, runIfEditModeIsRow(handleRowEditStart));
    useGridApiEventHandler(apiRef, GridEvents.rowEditStop, runIfEditModeIsRow(handleRowEditStop));
    useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);
    useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);
    const getRowMode = React197.useCallback((id) => {
      if (props.editMode === GridEditModes.Cell) {
        return GridRowModes.View;
      }
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;
      return isEditing ? GridRowModes.Edit : GridRowModes.View;
    }, [apiRef, props.editMode]);
    const updateOrDeleteRowState = React197.useCallback((id, newProps) => {
      apiRef.current.setState((state) => {
        const newEditingState = _extends({}, state.editRows);
        if (newProps !== null) {
          newEditingState[id] = newProps;
        } else {
          delete newEditingState[id];
        }
        return _extends({}, state, {
          editRows: newEditingState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const updateOrDeleteFieldState = React197.useCallback((id, field, newProps) => {
      apiRef.current.setState((state) => {
        const newEditingState = _extends({}, state.editRows);
        if (newProps !== null) {
          newEditingState[id] = _extends({}, newEditingState[id], {
            [field]: _extends({}, newProps)
          });
        } else {
          delete newEditingState[id][field];
          if (Object.keys(newEditingState[id]).length === 0) {
            delete newEditingState[id];
          }
        }
        return _extends({}, state, {
          editRows: newEditingState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const startRowEditMode = React197.useCallback((params) => {
      const {
        id,
        fieldToFocus
      } = params;
      throwIfNotInMode(id, GridRowModes.View);
      if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {
        throw new Error(`MUI: The cell with id=${id} is already in edit mode.`);
      }
      const columnFields = gridColumnFieldsSelector(apiRef);
      const newProps = columnFields.reduce((acc, field) => {
        const cellParams = apiRef.current.getCellParams(id, field);
        if (!cellParams.isEditable) {
          return acc;
        }
        acc[field] = {
          value: apiRef.current.getCellValue(id, field),
          error: false,
          isProcessingProps: false
        };
        return acc;
      }, {});
      updateOrDeleteRowState(id, newProps);
      if (fieldToFocus) {
        apiRef.current.setCellFocus(id, fieldToFocus);
      }
    }, [apiRef, throwIfNotInMode, updateOrDeleteRowState]);
    const stopRowEditMode = React197.useCallback((params) => {
      const {
        id,
        ignoreModifications,
        field: focusedField,
        cellToFocusAfter = "none"
      } = params;
      throwIfNotInMode(id, GridRowModes.Edit);
      apiRef.current.unstable_runPendingEditCellValueMutation(id);
      const updateFocusedCellIfNeeded = () => {
        if (cellToFocusAfter !== "none" && focusedField) {
          apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);
        }
      };
      if (ignoreModifications) {
        updateFocusedCellIfNeeded();
        updateOrDeleteRowState(id, null);
        return;
      }
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const row = apiRef.current.getRow(id);
      const isSomeFieldProcessingProps = Object.values(editingState[id]).some((fieldProps) => fieldProps.isProcessingProps);
      if (isSomeFieldProcessingProps) {
        return;
      }
      const hasSomeFieldWithError = Object.values(editingState[id]).some((fieldProps) => fieldProps.error);
      if (hasSomeFieldWithError) {
        return;
      }
      const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);
      if (processRowUpdate) {
        const handleError = (errorThrown) => {
          if (onProcessRowUpdateError) {
            onProcessRowUpdateError(errorThrown);
          } else {
            missingOnProcessRowUpdateErrorWarning2();
          }
        };
        try {
          Promise.resolve(processRowUpdate(rowUpdate, row)).then((finalRowUpdate) => {
            apiRef.current.updateRows([finalRowUpdate]);
            updateFocusedCellIfNeeded();
            updateOrDeleteRowState(id, null);
          }).catch(handleError);
        } catch (errorThrown) {
          handleError(errorThrown);
        }
      } else {
        apiRef.current.updateRows([rowUpdate]);
        updateFocusedCellIfNeeded();
        updateOrDeleteRowState(id, null);
      }
    }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteRowState]);
    const setRowEditingEditCellValue = React197.useCallback((params) => {
      const {
        id,
        field,
        value
      } = params;
      throwIfNotEditable(id, field);
      const column2 = apiRef.current.getColumn(field);
      const row = apiRef.current.getRow(id);
      let parsedValue = value;
      if (column2.valueParser) {
        parsedValue = column2.valueParser(value, apiRef.current.getCellParams(id, field));
      }
      let editingState = gridEditRowsStateSelector(apiRef.current.state);
      let newProps = _extends({}, editingState[id][field], {
        value: parsedValue
      });
      if (!column2.preProcessEditCellProps) {
        updateOrDeleteFieldState(id, field, newProps);
      }
      return new Promise((resolve) => {
        const promises = [];
        if (column2.preProcessEditCellProps) {
          const hasChanged = newProps.value !== editingState[id][field].value;
          newProps = _extends({}, newProps, {
            isProcessingProps: true
          });
          updateOrDeleteFieldState(id, field, newProps);
          const _editingState$id = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));
          const promise = Promise.resolve(column2.preProcessEditCellProps({
            id,
            row,
            props: newProps,
            hasChanged,
            otherFieldsProps
          })).then((processedProps) => {
            if (apiRef.current.getRowMode(id) === GridRowModes.View) {
              resolve(false);
              return;
            }
            editingState = gridEditRowsStateSelector(apiRef.current.state);
            processedProps = _extends({}, processedProps, {
              isProcessingProps: false
            });
            processedProps.value = column2.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
            updateOrDeleteFieldState(id, field, processedProps);
          });
          promises.push(promise);
        }
        Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {
          if (thisField === field) {
            return;
          }
          const fieldColumn = apiRef.current.getColumn(thisField);
          if (!fieldColumn.preProcessEditCellProps) {
            return;
          }
          fieldProps = _extends({}, fieldProps, {
            isProcessingProps: true
          });
          updateOrDeleteFieldState(id, thisField, fieldProps);
          editingState = gridEditRowsStateSelector(apiRef.current.state);
          const _editingState$id2 = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));
          const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({
            id,
            row,
            props: fieldProps,
            hasChanged: false,
            otherFieldsProps
          })).then((processedProps) => {
            if (apiRef.current.getRowMode(id) === GridRowModes.View) {
              resolve(false);
              return;
            }
            processedProps = _extends({}, processedProps, {
              isProcessingProps: false
            });
            updateOrDeleteFieldState(id, thisField, processedProps);
          });
          promises.push(promise);
        });
        Promise.all(promises).then(() => {
          if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {
            editingState = gridEditRowsStateSelector(apiRef.current.state);
            resolve(!editingState[id][field].error);
          } else {
            resolve(false);
          }
        });
      });
    }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);
    const getRowWithUpdatedValuesFromRowEditing = React197.useCallback((id) => {
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const row = apiRef.current.getRow(id);
      let rowUpdate = _extends({}, row);
      Object.entries(editingState[id]).forEach(([field, fieldProps]) => {
        const column2 = apiRef.current.getColumn(field);
        if (column2.valueSetter) {
          rowUpdate = column2.valueSetter({
            value: fieldProps.value,
            row: rowUpdate
          });
        } else {
          rowUpdate[field] = fieldProps.value;
        }
      });
      return rowUpdate;
    }, [apiRef]);
    const editingApi = {
      getRowMode,
      startRowEditMode,
      stopRowEditMode,
      unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,
      unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing
    };
    useGridApiMethod(apiRef, editingApi, "EditingApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/editRows/useGridEditing.new.js
  var editingStateInitializer2 = (state) => _extends({}, state, {
    editRows: {}
  });
  var useGridEditing2 = (apiRef, props) => {
    useGridCellEditing(apiRef, props);
    useGridRowEditing2(apiRef, props);
    const debounceMap = React198.useRef({});
    const {
      isCellEditable: isCellEditableProp
    } = props;
    const isCellEditable = React198.useCallback((params) => {
      if (params.rowNode.isAutoGenerated) {
        return false;
      }
      if (!params.colDef.editable) {
        return false;
      }
      if (!params.colDef.renderEditCell) {
        return false;
      }
      if (isCellEditableProp) {
        return isCellEditableProp(params);
      }
      return true;
    }, [isCellEditableProp]);
    const maybeDebounce = (id, field, debounceMs, callback) => {
      if (!debounceMs) {
        callback();
        return;
      }
      if (!debounceMap.current[id]) {
        debounceMap.current[id] = {};
      }
      if (debounceMap.current[id][field]) {
        const [timeout3] = debounceMap.current[id][field];
        clearTimeout(timeout3);
      }
      const runImmediately = () => {
        const [timeout3] = debounceMap.current[id][field];
        clearTimeout(timeout3);
        callback();
        delete debounceMap.current[id][field];
      };
      const timeout2 = setTimeout(() => {
        callback();
        delete debounceMap.current[id][field];
      }, debounceMs);
      debounceMap.current[id][field] = [timeout2, runImmediately];
    };
    React198.useEffect(() => {
      const debounces = debounceMap.current;
      return () => {
        Object.entries(debounces).forEach(([id, fields]) => {
          Object.keys(fields).forEach((field) => {
            const [timeout2] = debounces[id][field];
            clearTimeout(timeout2);
            delete debounces[id][field];
          });
        });
      };
    }, []);
    const runPendingEditCellValueMutation = React198.useCallback((id, field) => {
      if (!debounceMap.current[id]) {
        return;
      }
      if (!field) {
        Object.keys(debounceMap.current[id]).forEach((debouncedField) => {
          const [, runCallback] = debounceMap.current[id][debouncedField];
          runCallback();
        });
      } else if (debounceMap.current[id][field]) {
        const [, runCallback] = debounceMap.current[id][field];
        runCallback();
      }
    }, []);
    const setEditCellValue = React198.useCallback((params) => {
      const {
        id,
        field,
        debounceMs
      } = params;
      return new Promise((resolve) => {
        maybeDebounce(id, field, debounceMs, async () => {
          const setEditCellValueToCall = props.editMode === GridEditModes.Row ? apiRef.current.unstable_setRowEditingEditCellValue : apiRef.current.unstable_setCellEditingEditCellValue;
          if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {
            const result = await setEditCellValueToCall(params);
            resolve(result);
          }
        });
      });
    }, [apiRef, props.editMode]);
    const getRowWithUpdatedValues = React198.useCallback((id, field) => {
      return props.editMode === GridEditModes.Cell ? apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field) : apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);
    }, [apiRef, props.editMode]);
    const editingSharedApi = {
      isCellEditable,
      setEditCellValue,
      unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation,
      unstable_getRowWithUpdatedValues: getRowWithUpdatedValues
    };
    useGridApiMethod(apiRef, editingSharedApi, "EditingApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js
  var React199 = __toModule(require_react());
  function getGridRowId(rowModel, getRowId, detailErrorMessage) {
    const id = getRowId ? getRowId(rowModel) : rowModel.id;
    checkGridRowIdIsValid(id, rowModel, detailErrorMessage);
    return id;
  }
  var convertGridRowsPropToState = ({
    prevState,
    rows,
    getRowId
  }) => {
    let value;
    if (rows) {
      value = {
        idRowsLookup: {},
        ids: []
      };
      for (let i = 0; i < rows.length; i += 1) {
        const row = rows[i];
        const id = getGridRowId(row, getRowId);
        value.idRowsLookup[id] = row;
        value.ids.push(id);
      }
    } else {
      value = prevState.value;
    }
    return {
      value,
      rowsBeforePartialUpdates: rows != null ? rows : prevState.rowsBeforePartialUpdates
    };
  };
  var getRowsStateFromCache = (rowsCache, previousTree, apiRef, rowCountProp, loadingProp) => {
    const {
      value
    } = rowsCache.state;
    const rowCount = rowCountProp != null ? rowCountProp : 0;
    const groupingResponse = apiRef.current.unstable_applyStrategyProcessor("rowTreeCreation", _extends({}, value, {
      previousTree
    }));
    const dataTopLevelRowCount = groupingResponse.treeDepth === 1 ? groupingResponse.ids.length : Object.values(groupingResponse.tree).filter((node2) => node2.parent == null).length;
    return _extends({}, groupingResponse, {
      loading: loadingProp,
      totalRowCount: Math.max(rowCount, groupingResponse.ids.length),
      totalTopLevelRowCount: Math.max(rowCount, dataTopLevelRowCount)
    });
  };
  var rowsStateInitializer = (state, props, apiRef) => {
    const rowsCache = {
      state: convertGridRowsPropToState({
        rows: props.rows,
        getRowId: props.getRowId,
        prevState: {
          value: {
            idRowsLookup: {},
            ids: []
          },
          rowsBeforePartialUpdates: []
        }
      }),
      timeout: null,
      lastUpdateMs: Date.now()
    };
    return _extends({}, state, {
      rows: getRowsStateFromCache(rowsCache, null, apiRef, props.rowCount, props.loading),
      rowsCache
    });
  };
  var useGridRows = (apiRef, props) => {
    if (true) {
      Object.freeze(props.rows);
    }
    const logger = useGridLogger(apiRef, "useGridRows");
    const rowsCache = React199.useRef(apiRef.current.state.rowsCache);
    const currentPage = useGridVisibleRows(apiRef, props);
    const getRow = React199.useCallback((id) => {
      var _ref;
      return (_ref = gridRowsLookupSelector(apiRef)[id]) != null ? _ref : null;
    }, [apiRef]);
    const lookup2 = React199.useMemo(() => currentPage.rows.reduce((acc, {
      id
    }, index) => {
      acc[id] = index;
      return acc;
    }, {}), [currentPage.rows]);
    const throttledRowsChange = React199.useCallback((newState, throttle) => {
      const run = () => {
        rowsCache.current.timeout = null;
        rowsCache.current.lastUpdateMs = Date.now();
        apiRef.current.setState((state) => _extends({}, state, {
          rows: getRowsStateFromCache(rowsCache.current, gridRowTreeSelector(apiRef), apiRef, props.rowCount, props.loading)
        }));
        apiRef.current.publishEvent(GridEvents.rowsSet);
        apiRef.current.forceUpdate();
      };
      if (rowsCache.current.timeout) {
        clearTimeout(rowsCache.current.timeout);
      }
      rowsCache.current.state = newState;
      rowsCache.current.timeout = null;
      if (!throttle) {
        run();
        return;
      }
      const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - rowsCache.current.lastUpdateMs);
      if (throttleRemainingTimeMs > 0) {
        rowsCache.current.timeout = setTimeout(run, throttleRemainingTimeMs);
        return;
      }
      run();
    }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);
    const setRows = React199.useCallback((rows) => {
      logger.debug(`Updating all rows, new length ${rows.length}`);
      throttledRowsChange(convertGridRowsPropToState({
        rows,
        prevState: rowsCache.current.state,
        getRowId: props.getRowId
      }), true);
    }, [logger, props.getRowId, throttledRowsChange]);
    const updateRows = React199.useCallback((updates) => {
      if (props.signature === GridSignature.DataGrid && updates.length > 1) {
        throw new Error(["MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.", "You need to upgrade to the DataGridPro component to unlock this feature."].join("\n"));
      }
      const uniqUpdates = new Map();
      updates.forEach((update) => {
        const id = getGridRowId(update, props.getRowId, "A row was provided without id when calling updateRows():");
        if (uniqUpdates.has(id)) {
          uniqUpdates.set(id, _extends({}, uniqUpdates.get(id), update));
        } else {
          uniqUpdates.set(id, update);
        }
      });
      const deletedRowIds = [];
      const newStateValue = {
        idRowsLookup: _extends({}, rowsCache.current.state.value.idRowsLookup),
        ids: [...rowsCache.current.state.value.ids]
      };
      uniqUpdates.forEach((partialRow, id) => {
        if (partialRow._action === "delete") {
          delete newStateValue.idRowsLookup[id];
          deletedRowIds.push(id);
          return;
        }
        const oldRow = apiRef.current.getRow(id);
        if (!oldRow) {
          newStateValue.idRowsLookup[id] = partialRow;
          newStateValue.ids.push(id);
          return;
        }
        newStateValue.idRowsLookup[id] = _extends({}, apiRef.current.getRow(id), partialRow);
      });
      if (deletedRowIds.length > 0) {
        newStateValue.ids = newStateValue.ids.filter((id) => !deletedRowIds.includes(id));
      }
      const state = _extends({}, rowsCache.current.state, {
        value: newStateValue
      });
      throttledRowsChange(state, true);
    }, [apiRef, props.getRowId, throttledRowsChange, props.signature]);
    const getRowModels = React199.useCallback(() => {
      const allRows = gridRowIdsSelector(apiRef);
      const idRowsLookup = gridRowsLookupSelector(apiRef);
      return new Map(allRows.map((id) => [id, idRowsLookup[id]]));
    }, [apiRef]);
    const getRowsCount = React199.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);
    const getAllRowIds = React199.useCallback(() => gridRowIdsSelector(apiRef), [apiRef]);
    const getRowIndexRelativeToVisibleRows = React199.useCallback((id) => lookup2[id], [lookup2]);
    const setRowChildrenExpansion = React199.useCallback((id, isExpanded) => {
      const currentNode = apiRef.current.getRowNode(id);
      if (!currentNode) {
        throw new Error(`MUI: No row with id #${id} found`);
      }
      const newNode = _extends({}, currentNode, {
        childrenExpanded: isExpanded
      });
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          rows: _extends({}, state.rows, {
            tree: _extends({}, state.rows.tree, {
              [id]: newNode
            })
          })
        });
      });
      apiRef.current.forceUpdate();
      apiRef.current.publishEvent(GridEvents.rowExpansionChange, newNode);
    }, [apiRef]);
    const getRowNode = React199.useCallback((id) => {
      var _gridRowTreeSelector$;
      return (_gridRowTreeSelector$ = gridRowTreeSelector(apiRef)[id]) != null ? _gridRowTreeSelector$ : null;
    }, [apiRef]);
    const setRowIndex = React199.useCallback((rowId, targetIndex) => {
      const allRows = gridRowIdsSelector(apiRef);
      const oldIndex = allRows.findIndex((row) => row === rowId);
      if (oldIndex === targetIndex) {
        return;
      }
      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);
      const updatedRows = [...allRows];
      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);
      apiRef.current.setState((state) => _extends({}, state, {
        rows: _extends({}, state.rows, {
          ids: updatedRows
        })
      }));
      apiRef.current.applySorting();
    }, [apiRef, logger]);
    const rowApi = {
      getRow,
      getRowModels,
      getRowsCount,
      getAllRowIds,
      setRows,
      setRowIndex,
      updateRows,
      setRowChildrenExpansion,
      getRowNode,
      getRowIndexRelativeToVisibleRows
    };
    const groupRows = React199.useCallback(() => {
      logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);
      let rows;
      if (rowsCache.current.state.rowsBeforePartialUpdates === props.rows) {
        rows = void 0;
      } else {
        rows = props.rows;
      }
      throttledRowsChange(convertGridRowsPropToState({
        rows,
        getRowId: props.getRowId,
        prevState: rowsCache.current.state
      }), false);
    }, [logger, throttledRowsChange, props.getRowId, props.rows]);
    const handleStrategyProcessorChange = React199.useCallback((methodName) => {
      if (methodName === "rowTreeCreation") {
        groupRows();
      }
    }, [groupRows]);
    const handleStrategyActivityChange = React199.useCallback(() => {
      if (apiRef.current.unstable_getActiveStrategy("rowTree") !== gridRowGroupingNameSelector(apiRef)) {
        groupRows();
      }
    }, [apiRef, groupRows]);
    useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);
    useGridApiEventHandler(apiRef, GridEvents.strategyAvailabilityChange, handleStrategyActivityChange);
    useGridApiMethod(apiRef, rowApi, "GridRowApi");
    React199.useEffect(() => {
      return () => {
        if (rowsCache.current.timeout !== null) {
          clearTimeout(rowsCache.current.timeout);
        }
      };
    }, []);
    const isFirstRender = React199.useRef(true);
    React199.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
        return;
      }
      if (rowsCache.current.state.rowsBeforePartialUpdates === props.rows) {
        return;
      }
      logger.debug(`Updating all rows, new length ${props.rows.length}`);
      throttledRowsChange(convertGridRowsPropToState({
        rows: props.rows,
        getRowId: props.getRowId,
        prevState: rowsCache.current.state
      }), false);
    }, [props.rows, props.rowCount, props.getRowId, logger, throttledRowsChange]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js
  var flatRowTreeCreationMethod = ({
    ids,
    idRowsLookup,
    previousTree
  }) => {
    const tree = {};
    for (let i = 0; i < ids.length; i += 1) {
      const rowId = ids[i];
      if (previousTree && previousTree[rowId]) {
        tree[rowId] = previousTree[rowId];
      } else {
        tree[rowId] = {
          id: rowId,
          depth: 0,
          parent: null,
          groupingKey: "",
          groupingField: null
        };
      }
    }
    return {
      groupingName: GRID_DEFAULT_STRATEGY,
      tree,
      treeDepth: 1,
      idRowsLookup,
      ids
    };
  };
  var useGridRowsPreProcessors = (apiRef) => {
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "rowTreeCreation", flatRowTreeCreationMethod);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js
  var React200 = __toModule(require_react());
  var warnedOnceMissingColumn = false;
  function warnMissingColumn(field) {
    console.warn([`MUI: You are calling getValue('${field}') but the column \`${field}\` is not defined.`, `Instead, you can access the data from \`params.row.${field}\`.`].join("\n"));
    warnedOnceMissingColumn = true;
  }
  var getCellValueWarning = buildWarning([`MUI: You are calling getValue. This method is deprecated and will be removed in the next major version.`, "Instead, you can access the data from `params.row`."]);
  function useGridParamsApi(apiRef) {
    const getColumnHeaderParams = React200.useCallback((field) => ({
      field,
      colDef: apiRef.current.getColumn(field)
    }), [apiRef]);
    const getCellValueWithDeprecationWarning = React200.useCallback((...args) => {
      if (true) {
        getCellValueWarning();
      }
      return apiRef.current.getCellValue(...args);
    }, [apiRef]);
    const getRowParams = React200.useCallback((id) => {
      const row = apiRef.current.getRow(id);
      if (!row) {
        throw new Error(`No row with id #${id} found`);
      }
      const params = {
        id,
        columns: apiRef.current.getAllColumns(),
        row,
        getValue: getCellValueWithDeprecationWarning
      };
      return params;
    }, [apiRef, getCellValueWithDeprecationWarning]);
    const getBaseCellParams = React200.useCallback((id, field) => {
      const row = apiRef.current.getRow(id);
      const rowNode = apiRef.current.getRowNode(id);
      if (!row || !rowNode) {
        throw new Error(`No row with id #${id} found`);
      }
      const cellFocus = gridFocusCellSelector(apiRef);
      const cellTabIndex = gridTabIndexCellSelector(apiRef);
      const params = {
        id,
        field,
        row,
        rowNode,
        value: row[field],
        colDef: apiRef.current.getColumn(field),
        cellMode: apiRef.current.getCellMode(id, field),
        getValue: getCellValueWithDeprecationWarning,
        api: apiRef.current,
        hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
        tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1
      };
      return params;
    }, [apiRef, getCellValueWithDeprecationWarning]);
    const getCellParams = React200.useCallback((id, field) => {
      const colDef = apiRef.current.getColumn(field);
      const value = apiRef.current.getCellValue(id, field);
      const row = apiRef.current.getRow(id);
      const rowNode = apiRef.current.getRowNode(id);
      if (!row || !rowNode) {
        throw new Error(`No row with id #${id} found`);
      }
      const cellFocus = gridFocusCellSelector(apiRef);
      const cellTabIndex = gridTabIndexCellSelector(apiRef);
      const params = {
        id,
        field,
        row,
        rowNode,
        colDef,
        cellMode: apiRef.current.getCellMode(id, field),
        getValue: getCellValueWithDeprecationWarning,
        hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
        tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,
        value,
        formattedValue: value
      };
      if (colDef.valueFormatter) {
        params.formattedValue = colDef.valueFormatter({
          id,
          field: params.field,
          value: params.value,
          api: apiRef.current
        });
      }
      params.isEditable = colDef && apiRef.current.isCellEditable(params);
      return params;
    }, [apiRef, getCellValueWithDeprecationWarning]);
    const getCellValue = React200.useCallback((id, field) => {
      const colDef = apiRef.current.getColumn(field);
      if (true) {
        if (!colDef && !warnedOnceMissingColumn) {
          warnMissingColumn(field);
        }
      }
      if (!colDef || !colDef.valueGetter) {
        const rowModel = apiRef.current.getRow(id);
        if (!rowModel) {
          throw new Error(`No row with id #${id} found`);
        }
        return rowModel[field];
      }
      return colDef.valueGetter(getBaseCellParams(id, field));
    }, [apiRef, getBaseCellParams]);
    const getColumnHeaderElement = React200.useCallback((field) => {
      if (!apiRef.current.rootElementRef.current) {
        return null;
      }
      return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);
    }, [apiRef]);
    const getRowElement = React200.useCallback((id) => {
      if (!apiRef.current.rootElementRef.current) {
        return null;
      }
      return getGridRowElement(apiRef.current.rootElementRef.current, id);
    }, [apiRef]);
    const getCellElement = React200.useCallback((id, field) => {
      if (!apiRef.current.rootElementRef.current) {
        return null;
      }
      return getGridCellElement(apiRef.current.rootElementRef.current, {
        id,
        field
      });
    }, [apiRef]);
    const paramsApi = {
      getCellValue,
      getCellParams,
      getCellElement,
      getRowParams,
      getRowElement,
      getColumnHeaderParams,
      getColumnHeaderElement
    };
    useGridApiMethod(apiRef, paramsApi, "GridParamsApi");
  }

  // node_modules/@mui/x-data-grid/hooks/features/selection/useGridSelection.js
  var React201 = __toModule(require_react());
  var getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {
    if (selectionModelProp == null) {
      return selectionModelProp;
    }
    if (Array.isArray(selectionModelProp)) {
      return selectionModelProp;
    }
    if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {
      return prevSelectionModel;
    }
    return [selectionModelProp];
  };
  var selectionStateInitializer = (state, props) => {
    var _getSelectionModelPro;
    return _extends({}, state, {
      selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []
    });
  };
  var useGridSelection = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridSelection");
    const propSelectionModel = React201.useMemo(() => {
      return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));
    }, [apiRef, props.selectionModel]);
    const lastRowToggled = React201.useRef(null);
    apiRef.current.unstable_updateControlState({
      stateId: "selection",
      propModel: propSelectionModel,
      propOnChange: props.onSelectionModelChange,
      stateSelector: gridSelectionStateSelector,
      changeEvent: GridEvents.selectionChange
    });
    const {
      checkboxSelection,
      disableMultipleSelection,
      disableSelectionOnClick,
      isRowSelectable,
      pagination,
      paginationMode
    } = props;
    const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;
    const visibleRows = useGridVisibleRows(apiRef, props);
    const expandMouseRowRangeSelection = React201.useCallback((id) => {
      var _lastRowToggled$curre;
      let endId = id;
      const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;
      const isSelected = apiRef.current.isRowSelected(id);
      if (isSelected) {
        const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);
        const startIndex = visibleRowIds.findIndex((rowId) => rowId === startId);
        const endIndex = visibleRowIds.findIndex((rowId) => rowId === endId);
        if (startIndex === endIndex) {
          return;
        }
        if (startIndex > endIndex) {
          endId = visibleRowIds[endIndex + 1];
        } else {
          endId = visibleRowIds[endIndex - 1];
        }
      }
      lastRowToggled.current = id;
      apiRef.current.selectRowRange({
        startId,
        endId
      }, !isSelected);
    }, [apiRef]);
    const setSelectionModel = React201.useCallback((model) => {
      const currentModel = gridSelectionStateSelector(apiRef.current.state);
      if (currentModel !== model) {
        logger.debug(`Setting selection model`);
        apiRef.current.setState((state) => _extends({}, state, {
          selection: model
        }));
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger]);
    const isRowSelected = React201.useCallback((id) => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);
    const getSelectedRows = React201.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);
    const selectRow = React201.useCallback((id, isSelected = true, resetSelection = false) => {
      if (isRowSelectable && !isRowSelectable(apiRef.current.getRowParams(id))) {
        return;
      }
      lastRowToggled.current = id;
      if (resetSelection) {
        logger.debug(`Setting selection for row ${id}`);
        apiRef.current.setSelectionModel(isSelected ? [id] : []);
      } else {
        logger.debug(`Toggling selection for row ${id}`);
        const selection = gridSelectionStateSelector(apiRef.current.state);
        const newSelection = selection.filter((el) => el !== id);
        if (isSelected) {
          newSelection.push(id);
        }
        const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;
        if (isSelectionValid) {
          apiRef.current.setSelectionModel(newSelection);
        }
      }
    }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);
    const selectRows = React201.useCallback((ids, isSelected = true, resetSelection = false) => {
      logger.debug(`Setting selection for several rows`);
      const selectableIds = isRowSelectable ? ids.filter((id) => isRowSelectable(apiRef.current.getRowParams(id))) : ids;
      let newSelection;
      if (resetSelection) {
        newSelection = isSelected ? selectableIds : [];
      } else {
        const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));
        selectableIds.forEach((id) => {
          if (isSelected) {
            selectionLookup[id] = id;
          } else {
            delete selectionLookup[id];
          }
        });
        newSelection = Object.values(selectionLookup);
      }
      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;
      if (isSelectionValid) {
        apiRef.current.setSelectionModel(newSelection);
      }
    }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);
    const selectRowRange = React201.useCallback(({
      startId,
      endId
    }, isSelected = true, resetSelection) => {
      if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {
        return;
      }
      logger.debug(`Expanding selection from row ${startId} to row ${endId}`);
      const allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);
      const startIndex = allPagesRowIds.indexOf(startId);
      const endIndex = allPagesRowIds.indexOf(endId);
      const [start2, end2] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];
      const rowsBetweenStartAndEnd = allPagesRowIds.slice(start2, end2 + 1);
      apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);
    }, [apiRef, logger]);
    const selectionApi = {
      selectRow,
      selectRows,
      selectRowRange,
      setSelectionModel,
      getSelectedRows,
      isRowSelected
    };
    useGridApiMethod(apiRef, selectionApi, "GridSelectionApi");
    const removeOutdatedSelection = React201.useCallback(() => {
      const currentSelection = gridSelectionStateSelector(apiRef.current.state);
      const rowsLookup = gridRowsLookupSelector(apiRef);
      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));
      let hasChanged = false;
      currentSelection.forEach((id) => {
        if (!rowsLookup[id]) {
          delete selectionLookup[id];
          hasChanged = true;
        }
      });
      if (hasChanged) {
        apiRef.current.setSelectionModel(Object.values(selectionLookup));
      }
    }, [apiRef]);
    const handleSingleRowSelection = React201.useCallback((id, event) => {
      const hasCtrlKey = event.metaKey || event.ctrlKey;
      const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);
      const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;
      const isSelected = apiRef.current.isRowSelected(id);
      if (resetSelection) {
        apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);
      } else {
        apiRef.current.selectRow(id, !isSelected, false);
      }
    }, [apiRef, canHaveMultipleSelection, checkboxSelection]);
    const handleCellClick = React201.useCallback((params, event) => {
      if (disableSelectionOnClick) {
        return;
      }
      if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
        return;
      }
      if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
        return;
      }
      if (params.field) {
        const column2 = apiRef.current.getColumn(params.field);
        if (column2.type === GRID_ACTIONS_COLUMN_TYPE) {
          return;
        }
      }
      if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {
        expandMouseRowRangeSelection(params.id);
      } else {
        handleSingleRowSelection(params.id, event);
      }
    }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);
    const preventSelectionOnShift = React201.useCallback((params, event) => {
      if (canHaveMultipleSelection && event.shiftKey) {
        var _window$getSelection;
        (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();
      }
    }, [canHaveMultipleSelection]);
    const handleRowSelectionCheckboxChange = React201.useCallback((params, event) => {
      if (event.nativeEvent.shiftKey) {
        expandMouseRowRangeSelection(params.id);
      } else {
        apiRef.current.selectRow(params.id, params.value);
      }
    }, [apiRef, expandMouseRowRangeSelection]);
    const handleHeaderSelectionCheckboxChange = React201.useCallback((params) => {
      const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;
      const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);
      apiRef.current.selectRows(rowsToBeSelected, params.value);
    }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);
    const handleCellKeyDown = React201.useCallback((params, event) => {
      if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {
        return;
      }
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      if (isNavigationKey(event.key) && event.shiftKey) {
        const focusCell = gridFocusCellSelector(apiRef);
        if (focusCell && focusCell.id !== params.id) {
          event.preventDefault();
          const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);
          if (!canHaveMultipleSelection) {
            apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);
            return;
          }
          const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);
          const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);
          let start2;
          let end2;
          if (newRowIndex > previousRowIndex) {
            if (isNextRowSelected) {
              start2 = previousRowIndex;
              end2 = newRowIndex - 1;
            } else {
              start2 = previousRowIndex;
              end2 = newRowIndex;
            }
          } else {
            if (isNextRowSelected) {
              start2 = newRowIndex + 1;
              end2 = previousRowIndex;
            } else {
              start2 = newRowIndex;
              end2 = previousRowIndex;
            }
          }
          const rowsBetweenStartAndEnd = visibleRows.rows.slice(start2, end2 + 1).map((row) => row.id);
          apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);
          return;
        }
      }
      if (event.key === " " && event.shiftKey) {
        event.preventDefault();
        handleSingleRowSelection(params.id, event);
        return;
      }
      if (event.key.toLowerCase() === "a" && (event.ctrlKey || event.metaKey)) {
        event.preventDefault();
        selectRows(apiRef.current.getAllRowIds(), true);
      }
    }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);
    useGridApiEventHandler(apiRef, GridEvents.sortedRowsSet, removeOutdatedSelection);
    useGridApiEventHandler(apiRef, GridEvents.cellClick, handleCellClick);
    useGridApiEventHandler(apiRef, GridEvents.rowSelectionCheckboxChange, handleRowSelectionCheckboxChange);
    useGridApiEventHandler(apiRef, GridEvents.headerSelectionCheckboxChange, handleHeaderSelectionCheckboxChange);
    useGridApiEventHandler(apiRef, GridEvents.cellMouseDown, preventSelectionOnShift);
    useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);
    React201.useEffect(() => {
      if (propSelectionModel !== void 0) {
        apiRef.current.setSelectionModel(propSelectionModel);
      }
    }, [apiRef, propSelectionModel]);
    const isStateControlled = propSelectionModel != null;
    React201.useEffect(() => {
      if (isStateControlled) {
        return;
      }
      const currentSelection = gridSelectionStateSelector(apiRef.current.state);
      if (isRowSelectable) {
        const newSelection = currentSelection.filter((id) => isRowSelectable(apiRef.current.getRowParams(id)));
        if (newSelection.length < currentSelection.length) {
          apiRef.current.setSelectionModel(newSelection);
        }
      }
    }, [apiRef, isRowSelectable, isStateControlled]);
    React201.useEffect(() => {
      const currentSelection = gridSelectionStateSelector(apiRef.current.state);
      if (!canHaveMultipleSelection && currentSelection.length > 1) {
        const {
          rows: currentPageRows
        } = getVisibleRows(apiRef, {
          pagination,
          paginationMode
        });
        const currentPageRowsLookup = currentPageRows.reduce((acc, {
          id
        }) => {
          acc[id] = true;
          return acc;
        }, {});
        const firstSelectableRow = currentSelection.find((id) => {
          let isSelectable = true;
          if (isRowSelectable) {
            isSelectable = isRowSelectable(apiRef.current.getRowParams(id));
          }
          return isSelectable && currentPageRowsLookup[id];
        });
        apiRef.current.setSelectionModel(firstSelectableRow !== void 0 ? [firstSelectableRow] : []);
      }
    }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/selection/useGridSelectionPreProcessors.js
  var React205 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/constants/localeTextConstants.js
  var GRID_DEFAULT_LOCALE_TEXT = {
    noRowsLabel: "No rows",
    noResultsOverlayLabel: "No results found.",
    errorOverlayDefaultLabel: "An error occurred.",
    toolbarDensity: "Density",
    toolbarDensityLabel: "Density",
    toolbarDensityCompact: "Compact",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Comfortable",
    toolbarColumns: "Columns",
    toolbarColumnsLabel: "Select columns",
    toolbarFilters: "Filters",
    toolbarFiltersLabel: "Show filters",
    toolbarFiltersTooltipHide: "Hide filters",
    toolbarFiltersTooltipShow: "Show filters",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
    toolbarExport: "Export",
    toolbarExportLabel: "Export",
    toolbarExportCSV: "Download as CSV",
    toolbarExportPrint: "Print",
    columnsPanelTextFieldLabel: "Find column",
    columnsPanelTextFieldPlaceholder: "Column title",
    columnsPanelDragIconLabel: "Reorder column",
    columnsPanelShowAllButton: "Show all",
    columnsPanelHideAllButton: "Hide all",
    filterPanelAddFilter: "Add filter",
    filterPanelDeleteIconLabel: "Delete",
    filterPanelLinkOperator: "Logic operator",
    filterPanelOperators: "Operator",
    filterPanelOperatorAnd: "And",
    filterPanelOperatorOr: "Or",
    filterPanelColumns: "Columns",
    filterPanelInputLabel: "Value",
    filterPanelInputPlaceholder: "Filter value",
    filterOperatorContains: "contains",
    filterOperatorEquals: "equals",
    filterOperatorStartsWith: "starts with",
    filterOperatorEndsWith: "ends with",
    filterOperatorIs: "is",
    filterOperatorNot: "is not",
    filterOperatorAfter: "is after",
    filterOperatorOnOrAfter: "is on or after",
    filterOperatorBefore: "is before",
    filterOperatorOnOrBefore: "is on or before",
    filterOperatorIsEmpty: "is empty",
    filterOperatorIsNotEmpty: "is not empty",
    filterOperatorIsAnyOf: "is any of",
    filterValueAny: "any",
    filterValueTrue: "true",
    filterValueFalse: "false",
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Show columns",
    columnMenuFilter: "Filter",
    columnMenuHideColumn: "Hide",
    columnMenuUnsort: "Unsort",
    columnMenuSortAsc: "Sort by ASC",
    columnMenuSortDesc: "Sort by DESC",
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
    columnHeaderFiltersLabel: "Show filters",
    columnHeaderSortIconLabel: "Sort",
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} rows selected` : `${count.toLocaleString()} row selected`,
    footerTotalRows: "Total Rows:",
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} of ${totalCount.toLocaleString()}`,
    checkboxSelectionHeaderName: "Checkbox selection",
    checkboxSelectionSelectAllRows: "Select all rows",
    checkboxSelectionUnselectAllRows: "Unselect all rows",
    checkboxSelectionSelectRow: "Select row",
    checkboxSelectionUnselectRow: "Unselect row",
    booleanCellTrueLabel: "yes",
    booleanCellFalseLabel: "no",
    actionsCellMore: "more",
    pinToLeft: "Pin to left",
    pinToRight: "Pin to right",
    unpin: "Unpin",
    treeDataGroupingHeaderName: "Group",
    treeDataExpand: "see children",
    treeDataCollapse: "hide children",
    groupingColumnHeaderName: "Group",
    groupColumn: (name) => `Group by ${name}`,
    unGroupColumn: (name) => `Stop grouping by ${name}`,
    expandDetailPanel: "Expand",
    collapseDetailPanel: "Collapse",
    MuiTablePagination: {},
    rowReorderingHeaderName: "Row reordering"
  };

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnUnsortedIcon.js
  var React202 = __toModule(require_react());
  var import_jsx_runtime170 = __toModule(require_jsx_runtime());
  var _excluded97 = ["sortingOrder"];
  var GridColumnUnsortedIcon = /* @__PURE__ */ React202.memo(function GridColumnHeaderSortIcon2(props) {
    const {
      sortingOrder
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded97);
    const rootProps = useGridRootProps();
    const [nextSortDirection] = sortingOrder;
    const Icon = nextSortDirection === "asc" ? rootProps.components.ColumnSortedAscendingIcon : rootProps.components.ColumnSortedDescendingIcon;
    return Icon ? /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(Icon, _extends({}, other)) : null;
  });

  // node_modules/@mui/x-data-grid/components/ErrorOverlay.js
  var React203 = __toModule(require_react());
  var import_jsx_runtime171 = __toModule(require_jsx_runtime());
  var _excluded98 = ["message", "hasError", "errorInfo"];
  var ErrorOverlay = /* @__PURE__ */ React203.forwardRef(function ErrorOverlay2(props, ref) {
    const {
      message
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded98);
    const apiRef = useGridApiContext();
    const defaultLabel = apiRef.current.getLocaleText("errorOverlayDefaultLabel");
    const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);
    return /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(GridOverlay, _extends({
      ref,
      sx: {
        width: "100%",
        minHeight: 2 * rowHeight
      }
    }, other, {
      children: message || defaultLabel
    }));
  });

  // node_modules/@mui/x-data-grid/components/GridNoResultsOverlay.js
  var React204 = __toModule(require_react());
  var import_jsx_runtime172 = __toModule(require_jsx_runtime());
  var GridNoResultsOverlay = /* @__PURE__ */ React204.forwardRef(function GridNoResultsOverlay2(props, ref) {
    const apiRef = useGridApiContext();
    const noResultsOverlayLabel = apiRef.current.getLocaleText("noResultsOverlayLabel");
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(GridOverlay, _extends({
      ref
    }, props, {
      children: noResultsOverlayLabel
    }));
  });

  // node_modules/@mui/x-data-grid/constants/defaultGridSlotsComponents.js
  var DEFAULT_GRID_ICON_SLOTS_COMPONENTS = {
    BooleanCellTrueIcon: GridCheckIcon,
    BooleanCellFalseIcon: GridCloseIcon,
    ColumnMenuIcon: GridTripleDotsVerticalIcon,
    OpenFilterButtonIcon: GridFilterListIcon,
    FilterPanelDeleteIcon: GridCloseIcon,
    ColumnFilteredIcon: GridFilterAltIcon,
    ColumnSelectorIcon: GridColumnIcon,
    ColumnUnsortedIcon: GridColumnUnsortedIcon,
    ColumnSortedAscendingIcon: GridArrowUpwardIcon,
    ColumnSortedDescendingIcon: GridArrowDownwardIcon,
    ColumnResizeIcon: GridSeparatorIcon,
    DensityCompactIcon: GridViewHeadlineIcon,
    DensityStandardIcon: GridTableRowsIcon,
    DensityComfortableIcon: GridViewStreamIcon,
    ExportIcon: GridSaveAltIcon,
    MoreActionsIcon: GridMoreVertIcon,
    TreeDataCollapseIcon: GridExpandMoreIcon,
    TreeDataExpandIcon: GridKeyboardArrowRight,
    GroupingCriteriaCollapseIcon: GridExpandMoreIcon,
    GroupingCriteriaExpandIcon: GridKeyboardArrowRight,
    DetailPanelExpandIcon: GridAddIcon,
    DetailPanelCollapseIcon: GridRemoveIcon,
    RowReorderIcon: GridDragIcon
  };
  var DATA_GRID_DEFAULT_SLOTS_COMPONENTS = _extends({}, DEFAULT_GRID_ICON_SLOTS_COMPONENTS, {
    BaseCheckbox: Checkbox_default,
    BaseTextField: TextField_default,
    BaseFormControl: FormControl_default,
    BaseSelect: Select_default,
    BaseSwitch: Switch_default,
    BaseButton: Button_default,
    BaseTooltip: Tooltip_default,
    BasePopper: Popper_default,
    Cell: GridCell,
    ColumnHeaderFilterIconButton: GridColumnHeaderFilterIconButton,
    ColumnMenu: GridColumnMenu,
    ErrorOverlay,
    Footer: GridFooter,
    Header: GridHeader,
    Toolbar: null,
    PreferencesPanel: GridPreferencesPanel,
    LoadingOverlay: GridLoadingOverlay,
    NoResultsOverlay: GridNoResultsOverlay,
    NoRowsOverlay: GridNoRowsOverlay,
    Pagination: GridPagination,
    FilterPanel: GridFilterPanel,
    ColumnsPanel: GridColumnsPanel,
    Panel: GridPanel,
    Row: GridRow
  });

  // node_modules/@mui/x-data-grid/hooks/features/selection/useGridSelectionPreProcessors.js
  var useUtilityClasses69 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return React205.useMemo(() => {
      const slots = {
        cellCheckbox: ["cellCheckbox"],
        columnHeaderCheckbox: ["columnHeaderCheckbox"]
      };
      return composeClasses(slots, getDataGridUtilityClass, classes);
    }, [classes]);
  };
  var useGridSelectionPreProcessors = (apiRef, props) => {
    const ownerState = {
      classes: props.classes
    };
    const classes = useUtilityClasses69(ownerState);
    const updateSelectionColumn = React205.useCallback((columnsState) => {
      const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF, {
        cellClassName: classes.cellCheckbox,
        headerClassName: classes.columnHeaderCheckbox,
        headerName: apiRef.current.getLocaleText("checkboxSelectionHeaderName")
      });
      const shouldHaveSelectionColumn = props.checkboxSelection;
      const haveSelectionColumn = columnsState.lookup[selectionColumn.field] != null;
      if (shouldHaveSelectionColumn && !haveSelectionColumn) {
        columnsState.lookup[selectionColumn.field] = selectionColumn;
        columnsState.all = [selectionColumn.field, ...columnsState.all];
      } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {
        delete columnsState.lookup[selectionColumn.field];
        columnsState.all = columnsState.all.filter((field) => field !== selectionColumn.field);
      }
      return columnsState;
    }, [apiRef, classes, props.checkboxSelection]);
    useGridRegisterPipeProcessor(apiRef, "hydrateColumns", updateSelectionColumn);
  };

  // node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.js
  var React206 = __toModule(require_react());
  var sortingStateInitializer = (state, props) => {
    var _ref, _props$sortModel, _props$initialState, _props$initialState$s;
    const sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$s = _props$initialState.sorting) == null ? void 0 : _props$initialState$s.sortModel) != null ? _ref : [];
    return _extends({}, state, {
      sorting: {
        sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),
        sortedRows: []
      }
    });
  };
  var useGridSorting = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridSorting");
    apiRef.current.unstable_updateControlState({
      stateId: "sortModel",
      propModel: props.sortModel,
      propOnChange: props.onSortModelChange,
      stateSelector: gridSortModelSelector,
      changeEvent: GridEvents.sortModelChange
    });
    const upsertSortModel = React206.useCallback((field, sortItem) => {
      const sortModel = gridSortModelSelector(apiRef);
      const existingIdx = sortModel.findIndex((c) => c.field === field);
      let newSortModel = [...sortModel];
      if (existingIdx > -1) {
        if (!sortItem) {
          newSortModel.splice(existingIdx, 1);
        } else {
          newSortModel.splice(existingIdx, 1, sortItem);
        }
      } else {
        newSortModel = [...sortModel, sortItem];
      }
      return newSortModel;
    }, [apiRef]);
    const createSortItem = React206.useCallback((col, directionOverride) => {
      var _col$sortingOrder2;
      const sortModel = gridSortModelSelector(apiRef);
      const existing = sortModel.find((c) => c.field === col.field);
      if (existing) {
        var _col$sortingOrder;
        const nextSort = directionOverride === void 0 ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;
        return nextSort == null ? void 0 : _extends({}, existing, {
          sort: nextSort
        });
      }
      return {
        field: col.field,
        sort: directionOverride === void 0 ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride
      };
    }, [apiRef, props.sortingOrder]);
    const applySorting = React206.useCallback(() => {
      apiRef.current.setState((state) => {
        if (props.sortingMode === GridFeatureModeConstant.server) {
          logger.debug("Skipping sorting rows as sortingMode = server");
          return _extends({}, state, {
            sorting: _extends({}, state.sorting, {
              sortedRows: gridRowIdsSelector(state, apiRef.current.instanceId)
            })
          });
        }
        const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);
        const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);
        const sortedRows = apiRef.current.unstable_applyStrategyProcessor("sorting", {
          sortRowList
        });
        return _extends({}, state, {
          sorting: _extends({}, state.sorting, {
            sortedRows
          })
        });
      });
      apiRef.current.publishEvent(GridEvents.sortedRowsSet);
      apiRef.current.forceUpdate();
    }, [apiRef, logger, props.sortingMode]);
    const setSortModel = React206.useCallback((model) => {
      const currentModel = gridSortModelSelector(apiRef);
      if (currentModel !== model) {
        logger.debug(`Setting sort model`);
        apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));
        apiRef.current.forceUpdate();
        apiRef.current.applySorting();
      }
    }, [apiRef, logger, props.disableMultipleColumnsSorting]);
    const sortColumn = React206.useCallback((column2, direction, allowMultipleSorting) => {
      if (!column2.sortable) {
        return;
      }
      const sortItem = createSortItem(column2, direction);
      let sortModel;
      if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {
        sortModel = !sortItem ? [] : [sortItem];
      } else {
        sortModel = upsertSortModel(column2.field, sortItem);
      }
      apiRef.current.setSortModel(sortModel);
    }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);
    const getSortModel = React206.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);
    const getSortedRows = React206.useCallback(() => {
      const sortedRows = gridSortedRowEntriesSelector(apiRef);
      return sortedRows.map((row) => row.model);
    }, [apiRef]);
    const getSortedRowIds = React206.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);
    const getRowIndex = React206.useCallback((id) => apiRef.current.getSortedRowIds().indexOf(id), [apiRef]);
    const getRowIdFromRowIndex = React206.useCallback((index) => apiRef.current.getSortedRowIds()[index], [apiRef]);
    const sortApi = {
      getSortModel,
      getSortedRows,
      getSortedRowIds,
      getRowIndex,
      getRowIdFromRowIndex,
      setSortModel,
      sortColumn,
      applySorting
    };
    useGridApiMethod(apiRef, sortApi, "GridSortApi");
    const stateExportPreProcessing = React206.useCallback((prevState) => {
      const sortModelToExport = gridSortModelSelector(apiRef);
      if (sortModelToExport.length === 0) {
        return prevState;
      }
      return _extends({}, prevState, {
        sorting: {
          sortModel: sortModelToExport
        }
      });
    }, [apiRef]);
    const stateRestorePreProcessing = React206.useCallback((params, context) => {
      var _context$stateToResto;
      const sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;
      if (sortModel == null) {
        return params;
      }
      apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));
      return _extends({}, params, {
        callbacks: [...params.callbacks, apiRef.current.applySorting]
      });
    }, [apiRef, props.disableMultipleColumnsSorting]);
    const flatSortingMethod = React206.useCallback((params) => {
      if (!params.sortRowList) {
        return gridRowIdsSelector(apiRef);
      }
      const rowTree = gridRowTreeSelector(apiRef);
      return params.sortRowList(Object.values(rowTree));
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "sorting", flatSortingMethod);
    const handleColumnHeaderClick = React206.useCallback(({
      colDef
    }, event) => {
      const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;
      sortColumn(colDef, void 0, allowMultipleSorting);
    }, [sortColumn]);
    const handleColumnHeaderKeyDown = React206.useCallback(({
      colDef
    }, event) => {
      if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {
        sortColumn(colDef, void 0, event.shiftKey);
      }
    }, [sortColumn]);
    const handleColumnsChange = React206.useCallback(() => {
      const sortModel = gridSortModelSelector(apiRef);
      const latestColumns = gridColumnLookupSelector(apiRef);
      if (sortModel.length > 0) {
        const newModel = sortModel.filter((sortItem) => latestColumns[sortItem.field]);
        if (newModel.length < sortModel.length) {
          apiRef.current.setSortModel(newModel);
        }
      }
    }, [apiRef]);
    const handleStrategyProcessorChange = React206.useCallback((methodName) => {
      if (methodName === "sorting") {
        apiRef.current.applySorting();
      }
    }, [apiRef]);
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderClick, handleColumnHeaderClick);
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderKeyDown, handleColumnHeaderKeyDown);
    useGridApiEventHandler(apiRef, GridEvents.rowsSet, apiRef.current.applySorting);
    useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);
    useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);
    useFirstRender(() => {
      apiRef.current.applySorting();
    });
    React206.useEffect(() => {
      if (props.sortModel !== void 0) {
        apiRef.current.setSortModel(props.sortModel);
      }
    }, [apiRef, props.sortModel]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.js
  var React207 = __toModule(require_react());
  function scrollIntoView(dimensions) {
    const {
      clientHeight,
      scrollTop,
      offsetHeight,
      offsetTop
    } = dimensions;
    const elementBottom = offsetTop + offsetHeight;
    if (elementBottom - clientHeight > scrollTop) {
      return elementBottom - clientHeight;
    }
    if (offsetTop < scrollTop) {
      return offsetTop;
    }
    return void 0;
  }
  var useGridScroll = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridScroll");
    const colRef = apiRef.current.columnHeadersElementRef;
    const windowRef = apiRef.current.windowRef;
    const visibleSortedRows = useGridSelector(apiRef, gridVisibleSortedRowEntriesSelector);
    const scrollToIndexes = React207.useCallback((params) => {
      const totalRowCount = gridRowCountSelector(apiRef);
      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
      const scrollToHeader = params.rowIndex == null;
      if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {
        return false;
      }
      logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);
      let scrollCoordinates = {};
      if (params.colIndex != null) {
        const columnPositions = gridColumnPositionsSelector(apiRef);
        let cellWidth;
        if (typeof params.rowIndex !== "undefined") {
          var _visibleSortedRows$pa;
          const rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;
          const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);
          if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
            cellWidth = cellColSpanInfo.cellProps.width;
          }
        }
        if (typeof cellWidth === "undefined") {
          cellWidth = visibleColumns[params.colIndex].computedWidth;
        }
        scrollCoordinates.left = scrollIntoView({
          clientHeight: windowRef.current.clientWidth,
          scrollTop: windowRef.current.scrollLeft,
          offsetHeight: cellWidth,
          offsetTop: columnPositions[params.colIndex]
        });
      }
      if (params.rowIndex != null) {
        const rowsMeta = gridRowsMetaSelector(apiRef.current.state);
        const page = gridPageSelector(apiRef);
        const pageSize2 = gridPageSizeSelector(apiRef);
        const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize2;
        const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];
        scrollCoordinates.top = scrollIntoView({
          clientHeight: windowRef.current.clientHeight,
          scrollTop: windowRef.current.scrollTop,
          offsetHeight: targetOffsetHeight,
          offsetTop: rowsMeta.positions[elementIndex]
        });
      }
      scrollCoordinates = apiRef.current.unstable_applyPipeProcessors("scrollToIndexes", scrollCoordinates, params);
      if (typeof scrollCoordinates.left !== void 0 || typeof scrollCoordinates.top !== void 0) {
        apiRef.current.scroll(scrollCoordinates);
        return true;
      }
      return false;
    }, [logger, apiRef, windowRef, props.pagination, visibleSortedRows]);
    const scroll = React207.useCallback((params) => {
      if (windowRef.current && params.left != null && colRef.current) {
        colRef.current.scrollLeft = params.left;
        windowRef.current.scrollLeft = params.left;
        logger.debug(`Scrolling left: ${params.left}`);
      }
      if (windowRef.current && params.top != null) {
        windowRef.current.scrollTop = params.top;
        logger.debug(`Scrolling top: ${params.top}`);
      }
      logger.debug(`Scrolling, updating container, and viewport`);
    }, [windowRef, colRef, logger]);
    const getScrollPosition = React207.useCallback(() => {
      if (!(windowRef != null && windowRef.current)) {
        return {
          top: 0,
          left: 0
        };
      }
      return {
        top: windowRef.current.scrollTop,
        left: windowRef.current.scrollLeft
      };
    }, [windowRef]);
    const scrollApi = {
      scroll,
      scrollToIndexes,
      getScrollPosition
    };
    useGridApiMethod(apiRef, scrollApi, "GridScrollApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/events/useGridEvents.js
  function useGridEvents(apiRef, props) {
    useGridApiOptionHandler(apiRef, GridEvents.columnHeaderClick, props.onColumnHeaderClick);
    useGridApiOptionHandler(apiRef, GridEvents.columnHeaderDoubleClick, props.onColumnHeaderDoubleClick);
    useGridApiOptionHandler(apiRef, GridEvents.columnHeaderOver, props.onColumnHeaderOver);
    useGridApiOptionHandler(apiRef, GridEvents.columnHeaderOut, props.onColumnHeaderOut);
    useGridApiOptionHandler(apiRef, GridEvents.columnHeaderEnter, props.onColumnHeaderEnter);
    useGridApiOptionHandler(apiRef, GridEvents.columnHeaderLeave, props.onColumnHeaderLeave);
    useGridApiOptionHandler(apiRef, GridEvents.columnOrderChange, props.onColumnOrderChange);
    useGridApiOptionHandler(apiRef, GridEvents.cellClick, props.onCellClick);
    useGridApiOptionHandler(apiRef, GridEvents.cellDoubleClick, props.onCellDoubleClick);
    useGridApiOptionHandler(apiRef, GridEvents.cellKeyDown, props.onCellKeyDown);
    useGridApiOptionHandler(apiRef, GridEvents.cellFocusOut, props.onCellFocusOut);
    useGridApiOptionHandler(apiRef, GridEvents.preferencePanelClose, props.onPreferencePanelClose);
    useGridApiOptionHandler(apiRef, GridEvents.preferencePanelOpen, props.onPreferencePanelOpen);
    useGridApiOptionHandler(apiRef, GridEvents.rowDoubleClick, props.onRowDoubleClick);
    useGridApiOptionHandler(apiRef, GridEvents.rowClick, props.onRowClick);
    useGridApiOptionHandler(apiRef, GridEvents.componentError, props.onError);
    useGridApiOptionHandler(apiRef, GridEvents.stateChange, props.onStateChange);
  }

  // node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js
  var React208 = __toModule(require_react());
  var isTestEnvironment = false;
  var hasScroll = ({
    content,
    container,
    scrollBarSize
  }) => {
    const hasScrollXIfNoYScrollBar = content.width > container.width;
    const hasScrollYIfNoXScrollBar = content.height > container.height;
    let hasScrollX = false;
    let hasScrollY = false;
    if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {
      hasScrollX = hasScrollXIfNoYScrollBar;
      hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height;
      if (hasScrollY) {
        hasScrollX = content.width + scrollBarSize > container.width;
      }
    }
    return {
      hasScrollX,
      hasScrollY
    };
  };
  function useGridDimensions(apiRef, props) {
    const logger = useGridLogger(apiRef, "useResizeContainer");
    const warningShown = React208.useRef(false);
    const rootDimensionsRef = React208.useRef(null);
    const fullDimensionsRef = React208.useRef(null);
    const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);
    const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);
    const updateGridDimensionsRef = React208.useCallback(() => {
      var _apiRef$current$rootE;
      const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;
      const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);
      if (!rootDimensionsRef.current) {
        return;
      }
      let scrollBarSize;
      if (props.scrollbarSize != null) {
        scrollBarSize = props.scrollbarSize;
      } else if (!columnsTotalWidth || !rootElement) {
        scrollBarSize = 0;
      } else {
        const doc = ownerDocument_default(rootElement);
        const scrollDiv = doc.createElement("div");
        scrollDiv.style.width = "99px";
        scrollDiv.style.height = "99px";
        scrollDiv.style.position = "absolute";
        scrollDiv.style.overflow = "scroll";
        scrollDiv.className = "scrollDiv";
        rootElement.appendChild(scrollDiv);
        scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        rootElement.removeChild(scrollDiv);
      }
      const viewportOuterSize = {
        width: rootDimensionsRef.current.width,
        height: props.autoHeight ? rowsMeta.currentPageTotalHeight : rootDimensionsRef.current.height - headerHeight
      };
      const {
        hasScrollX,
        hasScrollY
      } = hasScroll({
        content: {
          width: Math.round(columnsTotalWidth),
          height: rowsMeta.currentPageTotalHeight
        },
        container: viewportOuterSize,
        scrollBarSize
      });
      const viewportInnerSize = {
        width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),
        height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)
      };
      const newFullDimensions = {
        viewportOuterSize,
        viewportInnerSize,
        hasScrollX,
        hasScrollY
      };
      const prevDimensions = fullDimensionsRef.current;
      fullDimensionsRef.current = newFullDimensions;
      if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {
        apiRef.current.publishEvent(GridEvents.viewportInnerSizeChange, newFullDimensions.viewportInnerSize);
      }
    }, [apiRef, props.scrollbarSize, props.autoHeight, headerHeight, rowsMeta.currentPageTotalHeight]);
    const resize = React208.useCallback(() => {
      updateGridDimensionsRef();
      apiRef.current.publishEvent(GridEvents.debouncedResize, rootDimensionsRef.current);
    }, [apiRef, updateGridDimensionsRef]);
    const getRootDimensions = React208.useCallback(() => fullDimensionsRef.current, []);
    const getViewportPageSize = React208.useCallback(() => {
      const dimensions = apiRef.current.getRootDimensions();
      if (!dimensions) {
        return 0;
      }
      const currentPage = getVisibleRows(apiRef, {
        pagination: props.pagination,
        paginationMode: props.paginationMode
      });
      if (props.getRowHeight) {
        const renderContext = apiRef.current.unstable_getRenderContext();
        const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;
        return Math.min(viewportPageSize - 1, currentPage.rows.length);
      }
      const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / gridDensityRowHeightSelector(apiRef));
      return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);
    }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight]);
    const dimensionsApi = {
      resize,
      getRootDimensions,
      unstable_getViewportPageSize: getViewportPageSize,
      unstable_updateGridDimensionsRef: updateGridDimensionsRef
    };
    useGridApiMethod(apiRef, dimensionsApi, "GridDimensionsApi");
    const debounceResize = React208.useMemo(() => debounce_default(resize, 60), [resize]);
    const isFirstSizing = React208.useRef(true);
    const handleResize = React208.useCallback((size) => {
      rootDimensionsRef.current = size;
      const isJSDOM = /jsdom/.test(window.navigator.userAgent);
      if (size.height === 0 && !warningShown.current && !props.autoHeight && !isJSDOM) {
        logger.warn(["The parent of the grid has an empty height.", "You need to make sure the container has an intrinsic height.", "The grid displays with a height of 0px.", "", "You can find a solution in the docs:", "https://mui.com/x/react-data-grid/layout/"].join("\n"));
        warningShown.current = true;
      }
      if (size.width === 0 && !warningShown.current && !isJSDOM) {
        logger.warn(["The parent of the grid has an empty width.", "You need to make sure the container has an intrinsic width.", "The grid displays with a width of 0px.", "", "You can find a solution in the docs:", "https://mui.com/x/react-data-grid/layout/"].join("\n"));
        warningShown.current = true;
      }
      if (isTestEnvironment) {
        resize();
        isFirstSizing.current = false;
        return;
      }
      if (isFirstSizing.current) {
        resize();
        isFirstSizing.current = false;
        return;
      }
      debounceResize();
    }, [props.autoHeight, debounceResize, logger, resize]);
    useEnhancedEffect_default2(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);
    useGridApiOptionHandler(apiRef, GridEvents.sortedRowsSet, updateGridDimensionsRef);
    useGridApiOptionHandler(apiRef, GridEvents.pageChange, updateGridDimensionsRef);
    useGridApiOptionHandler(apiRef, GridEvents.pageSizeChange, updateGridDimensionsRef);
    useGridApiOptionHandler(apiRef, GridEvents.columnsChange, updateGridDimensionsRef);
    useGridApiEventHandler(apiRef, GridEvents.resize, handleResize);
    useGridApiOptionHandler(apiRef, GridEvents.debouncedResize, props.onResize);
  }

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js
  var React209 = __toModule(require_react());
  var rowsMetaStateInitializer = (state) => _extends({}, state, {
    rowsMeta: {
      currentPageTotalHeight: 0,
      positions: []
    }
  });
  var useGridRowsMeta = (apiRef, props) => {
    const {
      getRowHeight,
      getRowSpacing
    } = props;
    const rowsHeightLookup = React209.useRef({});
    const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);
    const filterState = useGridSelector(apiRef, gridFilterStateSelector);
    const paginationState = useGridSelector(apiRef, gridPaginationSelector);
    const sortingState = useGridSelector(apiRef, gridSortingStateSelector);
    const currentPage = useGridVisibleRows(apiRef, props);
    const hydrateRowsMeta = React209.useCallback(() => {
      apiRef.current.setState((state) => {
        const positions = [];
        const densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);
        const currentRowHeight = gridDensityRowHeightSelector(state, apiRef.current.instanceId);
        const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {
          positions.push(acc);
          let baseRowHeight;
          const isResized = rowsHeightLookup.current[row.id] && rowsHeightLookup.current[row.id].isResized || false;
          if (isResized) {
            baseRowHeight = rowsHeightLookup.current[row.id].value;
          } else {
            baseRowHeight = currentRowHeight;
            if (getRowHeight) {
              var _getRowHeight;
              baseRowHeight = (_getRowHeight = getRowHeight(_extends({}, row, {
                densityFactor
              }))) != null ? _getRowHeight : currentRowHeight;
            }
          }
          const initialHeights = {
            base: baseRowHeight
          };
          if (getRowSpacing) {
            var _spacing$top, _spacing$bottom;
            const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);
            const spacing2 = getRowSpacing(_extends({}, row, {
              isFirstVisible: indexRelativeToCurrentPage === 0,
              isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
              indexRelativeToCurrentPage
            }));
            initialHeights.spacingTop = (_spacing$top = spacing2.top) != null ? _spacing$top : 0;
            initialHeights.spacingBottom = (_spacing$bottom = spacing2.bottom) != null ? _spacing$bottom : 0;
          }
          const sizes = apiRef.current.unstable_applyPipeProcessors("rowHeight", initialHeights, row);
          const finalRowHeight = Object.values(sizes).reduce((acc2, value) => acc2 + value, 0);
          rowsHeightLookup.current[row.id] = {
            value: baseRowHeight,
            sizes,
            isResized
          };
          return acc + finalRowHeight;
        }, 0);
        return _extends({}, state, {
          rowsMeta: {
            currentPageTotalHeight,
            positions
          }
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef, currentPage.rows, getRowSpacing, getRowHeight]);
    const getTargetRowHeight = (rowId) => {
      var _rowsHeightLookup$cur;
      return ((_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.value) || rowHeight;
    };
    const getRowInternalSizes = (rowId) => {
      var _rowsHeightLookup$cur2;
      return (_rowsHeightLookup$cur2 = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur2.sizes;
    };
    const setRowHeight = React209.useCallback((id, height2) => {
      rowsHeightLookup.current[id] = {
        value: height2,
        isResized: true,
        sizes: _extends({}, rowsHeightLookup.current[id].sizes, {
          base: height2
        })
      };
      hydrateRowsMeta();
    }, [hydrateRowsMeta]);
    React209.useEffect(() => {
      hydrateRowsMeta();
    }, [rowHeight, filterState, paginationState, sortingState, hydrateRowsMeta]);
    useGridRegisterPipeApplier(apiRef, "rowHeight", hydrateRowsMeta);
    const rowsMetaApi = {
      unstable_getRowHeight: getTargetRowHeight,
      unstable_getRowInternalSizes: getRowInternalSizes,
      unstable_setRowHeight: setRowHeight
    };
    useGridApiMethod(apiRef, rowsMetaApi, "GridRowsMetaApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/statePersistence/useGridStatePersistence.js
  var React210 = __toModule(require_react());
  var useGridStatePersistence = (apiRef) => {
    const exportState = React210.useCallback(() => {
      const stateToExport = apiRef.current.unstable_applyPipeProcessors("exportState", {});
      return stateToExport;
    }, [apiRef]);
    const restoreState = React210.useCallback((stateToRestore) => {
      const response = apiRef.current.unstable_applyPipeProcessors("restoreState", {
        callbacks: []
      }, {
        stateToRestore
      });
      response.callbacks.forEach((callback) => {
        callback();
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const statePersistenceApi = {
      exportState,
      restoreState
    };
    useGridApiMethod(apiRef, statePersistenceApi, "GridStatePersistenceApi");
  };

  // node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js
  var import_react13 = __toModule(require_react());
  var useGridColumnSpanning = (apiRef) => {
    const lookup2 = import_react13.default.useRef({});
    const setCellColSpanInfo = import_react13.default.useCallback((rowId, columnIndex, cellColSpanInfo) => {
      const sizes = lookup2.current;
      if (!sizes[rowId]) {
        sizes[rowId] = {};
      }
      sizes[rowId][columnIndex] = cellColSpanInfo;
    }, []);
    const getCellColSpanInfo = import_react13.default.useCallback((rowId, columnIndex) => {
      var _lookup$current$rowId;
      return (_lookup$current$rowId = lookup2.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];
    }, []);
    const calculateCellColSpan = import_react13.default.useCallback((params) => {
      const {
        columnIndex,
        rowId,
        minFirstColumnIndex,
        maxLastColumnIndex
      } = params;
      const visibleColumns = apiRef.current.getVisibleColumns();
      const columnsLength = visibleColumns.length;
      const column2 = visibleColumns[columnIndex];
      const colSpan = typeof column2.colSpan === "function" ? column2.colSpan(apiRef.current.getCellParams(rowId, column2.field)) : column2.colSpan;
      if (!colSpan || colSpan === 1) {
        setCellColSpanInfo(rowId, columnIndex, {
          spannedByColSpan: false,
          cellProps: {
            colSpan: 1,
            width: column2.computedWidth
          }
        });
        return {
          colSpan: 1
        };
      }
      let width2 = column2.computedWidth;
      for (let j = 1; j < colSpan; j += 1) {
        const nextColumnIndex = columnIndex + j;
        if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {
          const nextColumn = visibleColumns[nextColumnIndex];
          width2 += nextColumn.computedWidth;
          setCellColSpanInfo(rowId, columnIndex + j, {
            spannedByColSpan: true,
            rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),
            leftVisibleCellIndex: columnIndex
          });
        }
        setCellColSpanInfo(rowId, columnIndex, {
          spannedByColSpan: false,
          cellProps: {
            colSpan,
            width: width2
          }
        });
      }
      return {
        colSpan
      };
    }, [apiRef, setCellColSpanInfo]);
    const calculateColSpan = import_react13.default.useCallback(({
      rowId,
      minFirstColumn,
      maxLastColumn
    }) => {
      for (let i = minFirstColumn; i < maxLastColumn; i += 1) {
        const cellProps = calculateCellColSpan({
          columnIndex: i,
          rowId,
          minFirstColumnIndex: minFirstColumn,
          maxLastColumnIndex: maxLastColumn
        });
        if (cellProps.colSpan > 1) {
          i += cellProps.colSpan - 1;
        }
      }
    }, [calculateCellColSpan]);
    const columnSpanningApi = {
      unstable_getCellColSpanInfo: getCellColSpanInfo,
      unstable_calculateColSpan: calculateColSpan
    };
    useGridApiMethod(apiRef, columnSpanningApi, "GridColumnSpanningAPI");
    const handleColumnReorderChange = import_react13.default.useCallback(() => {
      lookup2.current = {};
    }, []);
    useGridApiEventHandler(apiRef, GridEvents.columnOrderChange, handleColumnReorderChange);
  };

  // node_modules/@mui/x-data-grid/DataGrid/useDataGridComponent.js
  var useDataGridComponent = (props) => {
    var _props$experimentalFe, _props$experimentalFe2;
    const apiRef = useGridInitialization(void 0, props);
    useGridSelectionPreProcessors(apiRef, props);
    useGridRowsPreProcessors(apiRef);
    useGridInitializeState(selectionStateInitializer, apiRef, props);
    useGridInitializeState(columnsStateInitializer, apiRef, props);
    useGridInitializeState(rowsStateInitializer, apiRef, props);
    useGridInitializeState((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.newEditingApi ? editingStateInitializer2 : editingStateInitializer, apiRef, props);
    useGridInitializeState(focusStateInitializer, apiRef, props);
    useGridInitializeState(sortingStateInitializer, apiRef, props);
    useGridInitializeState(preferencePanelStateInitializer, apiRef, props);
    useGridInitializeState(filterStateInitializer, apiRef, props);
    useGridInitializeState(densityStateInitializer, apiRef, props);
    useGridInitializeState(paginationStateInitializer, apiRef, props);
    useGridInitializeState(rowsMetaStateInitializer, apiRef, props);
    useGridInitializeState(columnMenuStateInitializer, apiRef, props);
    useGridKeyboardNavigation(apiRef, props);
    useGridSelection(apiRef, props);
    useGridColumns(apiRef, props);
    useGridRows(apiRef, props);
    useGridParamsApi(apiRef);
    useGridColumnSpanning(apiRef);
    const useGridEditing3 = (_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.newEditingApi ? useGridEditing2 : useGridEditing;
    useGridEditing3(apiRef, props);
    useGridFocus(apiRef, props);
    useGridPreferencesPanel(apiRef);
    useGridFilter(apiRef, props);
    useGridSorting(apiRef, props);
    useGridDensity(apiRef, props);
    useGridPagination(apiRef, props);
    useGridRowsMeta(apiRef, props);
    useGridScroll(apiRef, props);
    useGridColumnMenu(apiRef);
    useGridCsvExport(apiRef);
    useGridPrintExport(apiRef, props);
    useGridClipboard(apiRef);
    useGridDimensions(apiRef, props);
    useGridEvents(apiRef, props);
    useGridStatePersistence(apiRef);
    return apiRef;
  };

  // node_modules/@mui/x-data-grid/DataGrid/useDataGridProps.js
  var React212 = __toModule(require_react());
  var DATA_GRID_FORCED_PROPS = {
    apiRef: void 0,
    disableMultipleColumnsFiltering: true,
    disableMultipleColumnsSorting: true,
    disableMultipleSelection: true,
    throttleRowsMs: void 0,
    hideFooterRowCount: false,
    pagination: true,
    checkboxSelectionVisibleOnly: false,
    disableColumnReorder: true,
    disableColumnResize: true,
    signature: "DataGrid"
  };
  var MAX_PAGE_SIZE = 100;
  var DATA_GRID_PROPS_DEFAULT_VALUES = {
    autoHeight: false,
    autoPageSize: false,
    checkboxSelection: false,
    checkboxSelectionVisibleOnly: false,
    columnBuffer: 3,
    rowBuffer: 3,
    columnThreshold: 3,
    rowThreshold: 3,
    density: GridDensityTypes.Standard,
    disableExtendRowFullWidth: false,
    disableColumnFilter: false,
    disableColumnMenu: false,
    disableColumnSelector: false,
    disableDensitySelector: false,
    disableMultipleColumnsFiltering: false,
    disableMultipleSelection: false,
    disableMultipleColumnsSorting: false,
    disableSelectionOnClick: false,
    disableVirtualization: false,
    editMode: GridEditModes.Cell,
    filterMode: GridFeatureModeConstant.client,
    headerHeight: 56,
    hideFooter: false,
    hideFooterPagination: false,
    hideFooterRowCount: false,
    hideFooterSelectedRowCount: false,
    logger: console,
    logLevel: false ? "error" : "warn",
    pagination: false,
    paginationMode: GridFeatureModeConstant.client,
    rowHeight: 52,
    rowsPerPageOptions: [25, 50, 100],
    rowSpacingType: "margin",
    showCellRightBorder: false,
    showColumnRightBorder: false,
    sortingOrder: ["asc", "desc", null],
    sortingMode: GridFeatureModeConstant.client,
    throttleRowsMs: 0,
    disableColumnReorder: false,
    disableColumnResize: false
  };
  var useDataGridProps = (inProps) => {
    if (inProps.pageSize > MAX_PAGE_SIZE) {
      throw new Error(`'props.pageSize' cannot exceed 100 in DataGrid.`);
    }
    const themedProps = useThemeProps2({
      props: inProps,
      name: "MuiDataGrid"
    });
    const localeText = React212.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);
    const components = React212.useMemo(() => {
      const overrides = themedProps.components;
      if (!overrides) {
        return _extends({}, DATA_GRID_DEFAULT_SLOTS_COMPONENTS);
      }
      const mergedComponents = {};
      Object.entries(DATA_GRID_DEFAULT_SLOTS_COMPONENTS).forEach(([key, defaultComponent]) => {
        mergedComponents[key] = overrides[key] === void 0 ? defaultComponent : overrides[key];
      });
      return mergedComponents;
    }, [themedProps.components]);
    return React212.useMemo(() => _extends({}, DATA_GRID_PROPS_DEFAULT_VALUES, themedProps, {
      localeText,
      components
    }, DATA_GRID_FORCED_PROPS), [themedProps, localeText, components]);
  };

  // node_modules/@mui/x-data-grid/components/DataGridVirtualScroller.js
  var React217 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScroller.js
  var React213 = __toModule(require_react());
  var import_jsx_runtime173 = __toModule(require_jsx_runtime());
  var _excluded99 = ["className"];
  var useUtilityClasses70 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["virtualScroller"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var VirtualScrollerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "VirtualScroller",
    overridesResolver: (props, styles4) => styles4.virtualScroller
  })({
    overflow: "auto",
    position: "relative",
    "@media print": {
      overflow: "hidden"
    }
  });
  var GridVirtualScroller = /* @__PURE__ */ React213.forwardRef(function GridVirtualScroller2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded99);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses70(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(VirtualScrollerRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className)
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerContent.js
  var React214 = __toModule(require_react());
  var import_jsx_runtime174 = __toModule(require_jsx_runtime());
  var _excluded100 = ["className", "style"];
  var useUtilityClasses71 = (ownerState) => {
    const {
      classes,
      overflowedContent
    } = ownerState;
    const slots = {
      root: ["virtualScrollerContent", overflowedContent && "virtualScrollerContent--overflowed"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var VirtualScrollerContentRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "VirtualScrollerContent",
    overridesResolver: (props, styles4) => styles4.virtualScrollerContent
  })({});
  var GridVirtualScrollerContent = /* @__PURE__ */ React214.forwardRef(function GridVirtualScrollerContent2(props, ref) {
    const {
      className,
      style: style3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded100);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes,
      overflowedContent: !rootProps.autoHeight && (style3 == null ? void 0 : style3.minHeight) === "auto"
    };
    const classes = useUtilityClasses71(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(VirtualScrollerContentRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className),
      style: style3
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerRenderZone.js
  var React215 = __toModule(require_react());
  var import_jsx_runtime175 = __toModule(require_jsx_runtime());
  var _excluded101 = ["className"];
  var useUtilityClasses72 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["virtualScrollerRenderZone"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var VirtualScrollerRenderZoneRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "VirtualScrollerRenderZone",
    overridesResolver: (props, styles4) => styles4.virtualScrollerRenderZone
  })({
    position: "absolute",
    display: "flex",
    flexDirection: "column"
  });
  var GridVirtualScrollerRenderZone = /* @__PURE__ */ React215.forwardRef(function GridVirtualScrollerRenderZone2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded101);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses72(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(VirtualScrollerRenderZoneRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className)
    }, other));
  });

  // node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js
  var React216 = __toModule(require_react());
  var ReactDOM3 = __toModule(require_react_dom());
  var import_jsx_runtime176 = __toModule(require_jsx_runtime());
  var _excluded102 = ["style"];
  function getIndexFromScroll(offset2, positions, sliceStart = 0, sliceEnd = positions.length) {
    if (positions.length <= 0) {
      return -1;
    }
    if (sliceStart >= sliceEnd) {
      return sliceStart;
    }
    const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);
    const itemOffset = positions[pivot];
    return offset2 <= itemOffset ? getIndexFromScroll(offset2, positions, sliceStart, pivot) : getIndexFromScroll(offset2, positions, pivot + 1, sliceEnd);
  }
  var getRenderableIndexes = ({
    firstIndex,
    lastIndex,
    buffer: buffer2,
    minFirstIndex,
    maxLastIndex
  }) => {
    return [clamp2(firstIndex - buffer2, minFirstIndex, maxLastIndex), clamp2(lastIndex + buffer2, minFirstIndex, maxLastIndex)];
  };
  var useGridVirtualScroller = (props) => {
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
    const {
      ref,
      disableVirtualization,
      onRenderZonePositioning,
      renderZoneMinColumnIndex = 0,
      renderZoneMaxColumnIndex = visibleColumns.length,
      getRowProps
    } = props;
    const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);
    const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);
    const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);
    const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);
    const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);
    const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);
    const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);
    const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);
    const currentPage = useGridVisibleRows(apiRef, rootProps);
    const renderZoneRef = React216.useRef(null);
    const rootRef = React216.useRef(null);
    const handleRef = useForkRef_default(ref, rootRef);
    const [renderContext, setRenderContext] = React216.useState(null);
    const prevRenderContext = React216.useRef(renderContext);
    const scrollPosition = React216.useRef({
      top: 0,
      left: 0
    });
    const [containerWidth, setContainerWidth] = React216.useState(null);
    const prevTotalWidth = React216.useRef(columnsTotalWidth);
    const computeRenderContext = React216.useCallback(() => {
      if (disableVirtualization) {
        return {
          firstRowIndex: 0,
          lastRowIndex: currentPage.rows.length,
          firstColumnIndex: 0,
          lastColumnIndex: visibleColumns.length
        };
      }
      const {
        top: top3,
        left: left3
      } = scrollPosition.current;
      const firstRowIndex = getIndexFromScroll(top3, rowsMeta.positions);
      const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top3 + rootRef.current.clientHeight, rowsMeta.positions);
      const firstColumnIndex = getIndexFromScroll(left3, columnPositions);
      const lastColumnIndex = getIndexFromScroll(left3 + containerWidth, columnPositions);
      return {
        firstRowIndex,
        lastRowIndex,
        firstColumnIndex,
        lastColumnIndex
      };
    }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);
    React216.useEffect(() => {
      if (disableVirtualization) {
        renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;
      } else {
        rootRef.current.scrollLeft = 0;
        rootRef.current.scrollTop = 0;
      }
    }, [disableVirtualization]);
    React216.useEffect(() => {
      setContainerWidth(rootRef.current.clientWidth);
    }, [rowsMeta.currentPageTotalHeight]);
    const handleResize = React216.useCallback(() => {
      if (rootRef.current) {
        setContainerWidth(rootRef.current.clientWidth);
      }
    }, []);
    useGridApiEventHandler(apiRef, GridEvents.resize, handleResize);
    const updateRenderZonePosition = React216.useCallback((nextRenderContext) => {
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      const [initialFirstColumnToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstColumnIndex,
        lastIndex: nextRenderContext.lastColumnIndex,
        minFirstIndex: renderZoneMinColumnIndex,
        maxLastIndex: renderZoneMaxColumnIndex,
        buffer: rootProps.columnBuffer
      });
      const firstColumnToRender = getFirstNonSpannedColumnToRender({
        firstColumnToRender: initialFirstColumnToRender,
        apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: currentPage.rows
      });
      const top3 = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];
      const left3 = gridColumnPositionsSelector(apiRef)[firstColumnToRender];
      renderZoneRef.current.style.transform = `translate3d(${left3}px, ${top3}px, 0px)`;
      if (typeof onRenderZonePositioning === "function") {
        onRenderZonePositioning({
          top: top3,
          left: left3
        });
      }
    }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);
    React216.useLayoutEffect(() => {
      if (renderContext) {
        updateRenderZonePosition(renderContext);
      }
    }, [renderContext, updateRenderZonePosition]);
    const updateRenderContext = React216.useCallback((nextRenderContext) => {
      setRenderContext(nextRenderContext);
      prevRenderContext.current = nextRenderContext;
    }, [setRenderContext, prevRenderContext]);
    React216.useEffect(() => {
      if (containerWidth == null) {
        return;
      }
      const initialRenderContext = computeRenderContext();
      updateRenderContext(initialRenderContext);
      const {
        top: top3,
        left: left3
      } = scrollPosition.current;
      const params = {
        top: top3,
        left: left3,
        renderContext: initialRenderContext
      };
      apiRef.current.publishEvent(GridEvents.rowsScroll, params);
    }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);
    const handleScroll = (event) => {
      const {
        scrollTop,
        scrollLeft
      } = event.currentTarget;
      scrollPosition.current.top = scrollTop;
      scrollPosition.current.left = scrollLeft;
      if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {
        return;
      }
      const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();
      const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);
      const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);
      const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);
      const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);
      const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;
      apiRef.current.publishEvent(GridEvents.rowsScroll, {
        top: scrollTop,
        left: scrollLeft,
        renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current
      }, event);
      if (shouldSetState) {
        ReactDOM3.flushSync(() => {
          updateRenderContext(nextRenderContext);
        });
        prevTotalWidth.current = columnsTotalWidth;
      }
    };
    const handleWheel = (event) => {
      apiRef.current.publishEvent(GridEvents.virtualScrollerWheel, {}, event);
    };
    const handleTouchMove = (event) => {
      apiRef.current.publishEvent(GridEvents.virtualScrollerTouchMove, {}, event);
    };
    const getRows = (params = {
      renderContext
    }) => {
      const {
        renderContext: nextRenderContext,
        minFirstColumn = renderZoneMinColumnIndex,
        maxLastColumn = renderZoneMaxColumnIndex,
        availableSpace = containerWidth
      } = params;
      if (!currentPage.range || !nextRenderContext || availableSpace == null) {
        return null;
      }
      const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;
      const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rowBuffer
      });
      const renderedRows = [];
      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {
        const row = currentPage.rows[i];
        renderedRows.push(row);
        apiRef.current.unstable_calculateColSpan({
          rowId: row.id,
          minFirstColumn,
          maxLastColumn
        });
      }
      const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstColumnIndex,
        lastIndex: nextRenderContext.lastColumnIndex,
        minFirstIndex: minFirstColumn,
        maxLastIndex: maxLastColumn,
        buffer: columnBuffer
      });
      const firstColumnToRender = getFirstNonSpannedColumnToRender({
        firstColumnToRender: initialFirstColumnToRender,
        apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: currentPage.rows
      });
      const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);
      const rows = [];
      for (let i = 0; i < renderedRows.length; i += 1) {
        var _rootProps$components;
        const {
          id,
          model
        } = renderedRows[i];
        const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;
        const targetRowHeight = apiRef.current.unstable_getRowHeight(id);
        let isSelected;
        if (selectedRowsLookup[id] == null) {
          isSelected = false;
        } else if (typeof rootProps.isRowSelectable === "function") {
          isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));
        } else {
          isSelected = true;
        }
        rows.push(/* @__PURE__ */ (0, import_jsx_runtime176.jsx)(rootProps.components.Row, _extends({
          row: model,
          rowId: id,
          rowHeight: targetRowHeight,
          cellFocus,
          cellTabIndex,
          editRowsState,
          renderedColumns,
          visibleColumns,
          firstColumnToRender,
          lastColumnToRender,
          selected: isSelected,
          index: currentPage.range.firstRowIndex + firstRowToRender + i,
          containerWidth: availableSpace,
          isLastVisible: lastVisibleRowIndex
        }, typeof getRowProps === "function" ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));
      }
      return rows;
    };
    const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;
    const contentSize = React216.useMemo(() => {
      const height2 = Math.max(rowsMeta.currentPageTotalHeight, 1);
      let shouldExtendContent = false;
      if (rootRef != null && rootRef.current && height2 <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {
        shouldExtendContent = true;
      }
      const size = {
        width: needsHorizontalScrollbar ? columnsTotalWidth : "auto",
        height: height2,
        minHeight: shouldExtendContent ? "100%" : "auto"
      };
      if (rootProps.autoHeight && currentPage.rows.length === 0) {
        size.height = 2 * rowHeight;
      }
      return size;
    }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);
    React216.useEffect(() => {
      apiRef.current.publishEvent(GridEvents.virtualScrollerContentSizeChange);
    }, [apiRef, contentSize]);
    if (rootProps.autoHeight && currentPage.rows.length === 0) {
      contentSize.height = 2 * rowHeight;
    }
    const rootStyle = {};
    if (!needsHorizontalScrollbar) {
      rootStyle.overflowX = "hidden";
    }
    const getRenderContext = React216.useCallback(() => {
      return prevRenderContext.current;
    }, []);
    apiRef.current.unstable_getRenderContext = getRenderContext;
    return {
      renderContext,
      updateRenderZonePosition,
      getRows,
      getRootProps: (_ref = {}) => {
        let {
          style: style3 = {}
        } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded102);
        return _extends({
          ref: handleRef,
          onScroll: handleScroll,
          onWheel: handleWheel,
          onTouchMove: handleTouchMove,
          style: _extends({}, style3, rootStyle)
        }, other);
      },
      getContentProps: ({
        style: style3 = {}
      } = {}) => ({
        style: _extends({}, style3, contentSize)
      }),
      getRenderZoneProps: () => ({
        ref: renderZoneRef
      })
    };
  };

  // node_modules/@mui/x-data-grid/components/DataGridVirtualScroller.js
  var import_jsx_runtime177 = __toModule(require_jsx_runtime());
  var _excluded103 = ["className", "disableVirtualization"];
  var DataGridVirtualScroller = /* @__PURE__ */ React217.forwardRef(function DataGridVirtualScroller2(props, ref) {
    const {
      className,
      disableVirtualization
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded103);
    const {
      getRootProps,
      getContentProps,
      getRenderZoneProps,
      getRows
    } = useGridVirtualScroller({
      ref,
      disableVirtualization
    });
    return /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(GridVirtualScroller, _extends({
      className
    }, getRootProps(other), {
      children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(GridVirtualScrollerContent, _extends({}, getContentProps(), {
        children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {
          children: getRows()
        }))
      }))
    }));
  });

  // node_modules/@mui/x-data-grid/components/DataGridColumnHeaders.js
  var React221 = __toModule(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js
  var React218 = __toModule(require_react());
  var ReactDOM4 = __toModule(require_react_dom());
  var import_jsx_runtime178 = __toModule(require_jsx_runtime());
  function isUIEvent(event) {
    return !!event.target;
  }
  var useGridColumnHeaders = (props) => {
    const {
      innerRef: innerRefProp,
      minColumnIndex = 0
    } = props;
    const [dragCol, setDragCol] = React218.useState("");
    const [resizeCol, setResizeCol] = React218.useState("");
    const apiRef = useGridApiContext();
    const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
    const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);
    const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);
    const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);
    const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);
    const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);
    const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);
    const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);
    const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);
    const rootProps = useGridRootProps();
    const innerRef = React218.useRef(null);
    const handleInnerRef = useForkRef_default(innerRefProp, innerRef);
    const [renderContext, setRenderContext] = React218.useState(null);
    const prevRenderContext = React218.useRef(renderContext);
    const prevScrollLeft = React218.useRef(0);
    const currentPage = useGridVisibleRows(apiRef, rootProps);
    React218.useEffect(() => {
      apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
    }, [apiRef]);
    const getFirstColumnIndexToRenderRef = React218.useRef(defaultMemoize(getFirstColumnIndexToRender, {
      equalityCheck: (a, b) => ["firstColumnIndex", "minColumnIndex", "columnBuffer"].every((key) => a[key] === b[key])
    }));
    const updateInnerPosition = React218.useCallback((nextRenderContext) => {
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      const firstColumnToRender = getFirstColumnIndexToRenderRef.current({
        firstColumnIndex: nextRenderContext.firstColumnIndex,
        minColumnIndex,
        columnBuffer: rootProps.columnBuffer,
        firstRowToRender,
        lastRowToRender,
        apiRef,
        visibleRows: currentPage.rows
      });
      const offset2 = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;
      innerRef.current.style.transform = `translate3d(${-offset2}px, 0px, 0px)`;
    }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);
    React218.useLayoutEffect(() => {
      if (renderContext) {
        updateInnerPosition(renderContext);
      }
    }, [renderContext, updateInnerPosition]);
    const handleScroll = React218.useCallback(({
      left: left3,
      renderContext: nextRenderContext = null
    }, event) => {
      var _prevRenderContext$cu, _prevRenderContext$cu2;
      if (!innerRef.current) {
        return;
      }
      if (prevScrollLeft.current === left3 && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {
        return;
      }
      prevScrollLeft.current = left3;
      let canUpdateInnerPosition = false;
      if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {
        if (isUIEvent(event)) {
          ReactDOM4.flushSync(() => {
            setRenderContext(nextRenderContext);
          });
          canUpdateInnerPosition = true;
        } else {
          setRenderContext(nextRenderContext);
        }
        prevRenderContext.current = nextRenderContext;
      } else {
        canUpdateInnerPosition = true;
      }
      if (nextRenderContext && canUpdateInnerPosition) {
        updateInnerPosition(nextRenderContext);
      }
    }, [updateInnerPosition]);
    const handleColumnResizeStart = React218.useCallback((params) => setResizeCol(params.field), []);
    const handleColumnResizeStop = React218.useCallback(() => setResizeCol(""), []);
    const handleColumnReorderStart = React218.useCallback((params) => setDragCol(params.field), []);
    const handleColumnReorderStop = React218.useCallback(() => setDragCol(""), []);
    useGridApiEventHandler(apiRef, GridEvents.columnResizeStart, handleColumnResizeStart);
    useGridApiEventHandler(apiRef, GridEvents.columnResizeStop, handleColumnResizeStop);
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, handleColumnReorderStart);
    useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragEnd, handleColumnReorderStop);
    useGridApiEventHandler(apiRef, GridEvents.rowsScroll, handleScroll);
    const getColumns = (params, other = {}) => {
      const {
        renderContext: nextRenderContext = renderContext,
        minFirstColumn = minColumnIndex,
        maxLastColumn = visibleColumns.length
      } = params || {};
      if (!nextRenderContext) {
        return null;
      }
      const columns = [];
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      const firstColumnToRender = getFirstColumnIndexToRenderRef.current({
        firstColumnIndex: nextRenderContext.firstColumnIndex,
        minColumnIndex: minFirstColumn,
        columnBuffer: rootProps.columnBuffer,
        apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: currentPage.rows
      });
      const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);
      const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);
      for (let i = 0; i < renderedColumns.length; i += 1) {
        const column2 = renderedColumns[i];
        const columnIndex = firstColumnToRender + i;
        const isFirstColumn = columnIndex === 0;
        const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);
        const tabIndex = tabIndexState !== null && tabIndexState.field === column2.field || isFirstColumn && !hasTabbableElement ? 0 : -1;
        const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column2.field;
        const open = columnMenuState.open && columnMenuState.field === column2.field;
        columns.push(/* @__PURE__ */ (0, import_jsx_runtime178.jsx)(GridColumnHeaderItem, _extends({}, sortColumnLookup[column2.field], {
          columnMenuOpen: open,
          filterItemsCounter: filterColumnLookup[column2.field] && filterColumnLookup[column2.field].length,
          headerHeight,
          isDragging: column2.field === dragCol,
          column: column2,
          colIndex: columnIndex,
          isResizing: resizeCol === column2.field,
          isLastColumn: columnIndex === visibleColumns.length - 1,
          extendRowFullWidth: !rootProps.disableExtendRowFullWidth,
          hasFocus,
          tabIndex
        }, other), column2.field));
      }
      return columns;
    };
    const rootStyle = {
      minHeight: headerHeight,
      maxHeight: headerHeight,
      lineHeight: `${headerHeight}px`
    };
    return {
      renderContext,
      getColumns,
      isDragging: !!dragCol,
      getRootProps: (other = {}) => _extends({
        style: rootStyle
      }, other),
      getInnerProps: () => ({
        ref: handleInnerRef,
        "aria-rowindex": 1,
        role: "row"
      })
    };
  };

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaders.js
  var React219 = __toModule(require_react());
  var import_jsx_runtime179 = __toModule(require_jsx_runtime());
  var _excluded104 = ["className"];
  var useUtilityClasses73 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["columnHeaders"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridColumnHeadersRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ColumnHeaders",
    overridesResolver: (props, styles4) => styles4.columnHeaders
  })(({
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68);
    return {
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      overflow: "hidden",
      display: "flex",
      alignItems: "center",
      borderBottom: `1px solid ${borderColor2}`,
      borderTopLeftRadius: theme.shape.borderRadius,
      borderTopRightRadius: theme.shape.borderRadius
    };
  });
  var GridColumnHeaders = /* @__PURE__ */ React219.forwardRef(function GridColumnHeaders2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded104);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses73(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(GridColumnHeadersRoot, _extends({
      ref,
      className: clsx_m_default(className, classes.root)
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeadersInner.js
  var React220 = __toModule(require_react());
  var import_jsx_runtime180 = __toModule(require_jsx_runtime());
  var _excluded105 = ["isDragging", "className"];
  var useUtilityClasses74 = (ownerState) => {
    const {
      isDragging,
      hasScrollX,
      classes
    } = ownerState;
    const slots = {
      root: ["columnHeadersInner", isDragging && "columnHeaderDropZone", hasScrollX && "columnHeadersInner--scrollable"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridColumnHeadersInnerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "columnHeadersInner",
    overridesResolver: (props, styles4) => [{
      [`&.${gridClasses2.columnHeaderDropZone}`]: styles4.columnHeaderDropZone
    }, styles4.columnHeadersInner]
  })(() => ({
    display: "flex",
    alignItems: "center",
    [`&.${gridClasses2.columnHeaderDropZone} .${gridClasses2.columnHeaderDraggableContainer}`]: {
      cursor: "move"
    },
    [`&.${gridClasses2["columnHeadersInner--scrollable"]} .${gridClasses2.columnHeader}:last-child`]: {
      borderRight: "none"
    }
  }));
  var GridColumnHeadersInner = /* @__PURE__ */ React220.forwardRef(function GridColumnHeadersInner2(props, ref) {
    var _apiRef$current$getRo, _apiRef$current$getRo2;
    const {
      isDragging,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded105);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      isDragging,
      hasScrollX: (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.hasScrollX) != null ? _apiRef$current$getRo : false,
      classes: rootProps.classes
    };
    const classes = useUtilityClasses74(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(GridColumnHeadersInnerRoot, _extends({
      ref,
      className: clsx_m_default(className, classes.root)
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/DataGridColumnHeaders.js
  var import_jsx_runtime181 = __toModule(require_jsx_runtime());
  var import_jsx_runtime182 = __toModule(require_jsx_runtime());
  var _excluded106 = ["innerRef", "className"];
  var DataGridColumnHeaders = /* @__PURE__ */ React221.forwardRef(function GridColumnsHeader(props, ref) {
    const {
      innerRef
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded106);
    const {
      isDragging,
      getRootProps,
      getInnerProps,
      getColumns
    } = useGridColumnHeaders({
      innerRef
    });
    return /* @__PURE__ */ (0, import_jsx_runtime182.jsxs)(GridColumnHeaders, _extends({
      ref
    }, getRootProps(other), {
      children: [/* @__PURE__ */ (0, import_jsx_runtime181.jsx)(GridScrollArea, {
        scrollDirection: "left"
      }), /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(GridColumnHeadersInner, _extends({
        isDragging
      }, getInnerProps(), {
        children: getColumns()
      })), /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(GridScrollArea, {
        scrollDirection: "right"
      })]
    }));
  });

  // node_modules/@mui/x-data-grid/DataGrid/DataGrid.js
  var import_jsx_runtime183 = __toModule(require_jsx_runtime());
  var import_jsx_runtime184 = __toModule(require_jsx_runtime());
  var DataGridRaw = /* @__PURE__ */ React222.forwardRef(function DataGrid(inProps, ref) {
    const props = useDataGridProps(inProps);
    const apiRef = useDataGridComponent(props);
    return /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(GridContextProvider, {
      apiRef,
      props,
      children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(GridRoot2, {
        className: props.className,
        style: props.style,
        sx: props.sx,
        ref,
        children: /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(GridErrorHandler, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime183.jsx)(GridHeaderPlaceholder, {}), /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(GridBody, {
            ColumnHeadersComponent: DataGridColumnHeaders,
            VirtualScrollerComponent: DataGridVirtualScroller
          }), /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(GridFooterPlaceholder, {})]
        })
      })
    });
  });
  var DataGrid2 = /* @__PURE__ */ React222.memo(DataGridRaw);
  DataGridRaw.propTypes = {
    "aria-label": import_prop_types103.default.string,
    "aria-labelledby": import_prop_types103.default.string,
    autoHeight: import_prop_types103.default.bool,
    autoPageSize: import_prop_types103.default.bool,
    checkboxSelection: import_prop_types103.default.bool,
    classes: import_prop_types103.default.object,
    columnBuffer: import_prop_types103.default.number,
    columns: chainPropTypes(import_prop_types103.default.array.isRequired, (props) => {
      if (props.columns && props.columns.some((column2) => column2.resizable)) {
        return new Error([`MUI: \`column.resizable = true\` is not a valid prop.`, "Column resizing is not available in the MIT version.", "", "You need to upgrade to the DataGridPro component to unlock this feature."].join("\n"));
      }
      return null;
    }),
    columnThreshold: import_prop_types103.default.number,
    columnTypes: import_prop_types103.default.object,
    columnVisibilityModel: import_prop_types103.default.object,
    components: import_prop_types103.default.object,
    componentsProps: import_prop_types103.default.object,
    density: import_prop_types103.default.oneOf(["comfortable", "compact", "standard"]),
    disableColumnFilter: import_prop_types103.default.bool,
    disableColumnMenu: import_prop_types103.default.bool,
    disableColumnSelector: import_prop_types103.default.bool,
    disableDensitySelector: import_prop_types103.default.bool,
    disableExtendRowFullWidth: import_prop_types103.default.bool,
    disableSelectionOnClick: import_prop_types103.default.bool,
    disableVirtualization: import_prop_types103.default.bool,
    editMode: import_prop_types103.default.oneOf(["cell", "row"]),
    editRowsModel: import_prop_types103.default.object,
    error: import_prop_types103.default.any,
    experimentalFeatures: import_prop_types103.default.shape({
      newEditingApi: import_prop_types103.default.bool,
      preventCommitWhileValidating: import_prop_types103.default.bool,
      warnIfFocusStateIsNotSynced: import_prop_types103.default.bool
    }),
    filterMode: import_prop_types103.default.oneOf(["client", "server"]),
    filterModel: import_prop_types103.default.shape({
      items: import_prop_types103.default.arrayOf(import_prop_types103.default.shape({
        columnField: import_prop_types103.default.string.isRequired,
        id: import_prop_types103.default.oneOfType([import_prop_types103.default.number, import_prop_types103.default.string]),
        operatorValue: import_prop_types103.default.string,
        value: import_prop_types103.default.any
      })).isRequired,
      linkOperator: import_prop_types103.default.oneOf(["and", "or"])
    }),
    getCellClassName: import_prop_types103.default.func,
    getDetailPanelContent: import_prop_types103.default.func,
    getRowClassName: import_prop_types103.default.func,
    getRowHeight: import_prop_types103.default.func,
    getRowId: import_prop_types103.default.func,
    getRowSpacing: import_prop_types103.default.func,
    headerHeight: import_prop_types103.default.number,
    hideFooter: import_prop_types103.default.bool,
    hideFooterPagination: import_prop_types103.default.bool,
    hideFooterSelectedRowCount: import_prop_types103.default.bool,
    initialState: import_prop_types103.default.object,
    isCellEditable: import_prop_types103.default.func,
    isRowSelectable: import_prop_types103.default.func,
    loading: import_prop_types103.default.bool,
    localeText: import_prop_types103.default.object,
    logger: import_prop_types103.default.shape({
      debug: import_prop_types103.default.func.isRequired,
      error: import_prop_types103.default.func.isRequired,
      info: import_prop_types103.default.func.isRequired,
      warn: import_prop_types103.default.func.isRequired
    }),
    logLevel: import_prop_types103.default.oneOf(["debug", "error", "info", "warn", false]),
    nonce: import_prop_types103.default.string,
    onCellClick: import_prop_types103.default.func,
    onCellDoubleClick: import_prop_types103.default.func,
    onCellEditCommit: import_prop_types103.default.func,
    onCellEditStart: import_prop_types103.default.func,
    onCellEditStop: import_prop_types103.default.func,
    onCellFocusOut: import_prop_types103.default.func,
    onCellKeyDown: import_prop_types103.default.func,
    onColumnHeaderClick: import_prop_types103.default.func,
    onColumnHeaderDoubleClick: import_prop_types103.default.func,
    onColumnHeaderEnter: import_prop_types103.default.func,
    onColumnHeaderLeave: import_prop_types103.default.func,
    onColumnHeaderOut: import_prop_types103.default.func,
    onColumnHeaderOver: import_prop_types103.default.func,
    onColumnOrderChange: import_prop_types103.default.func,
    onColumnVisibilityChange: import_prop_types103.default.func,
    onColumnVisibilityModelChange: import_prop_types103.default.func,
    onEditCellPropsChange: import_prop_types103.default.func,
    onEditRowsModelChange: import_prop_types103.default.func,
    onError: import_prop_types103.default.func,
    onFilterModelChange: import_prop_types103.default.func,
    onPageChange: import_prop_types103.default.func,
    onPageSizeChange: import_prop_types103.default.func,
    onPreferencePanelClose: import_prop_types103.default.func,
    onPreferencePanelOpen: import_prop_types103.default.func,
    onProcessRowUpdateError: import_prop_types103.default.func,
    onResize: import_prop_types103.default.func,
    onRowClick: import_prop_types103.default.func,
    onRowDoubleClick: import_prop_types103.default.func,
    onRowEditCommit: import_prop_types103.default.func,
    onRowEditStart: import_prop_types103.default.func,
    onRowEditStop: import_prop_types103.default.func,
    onSelectionModelChange: import_prop_types103.default.func,
    onSortModelChange: import_prop_types103.default.func,
    onStateChange: import_prop_types103.default.func,
    page: import_prop_types103.default.number,
    pageSize: chainPropTypes(import_prop_types103.default.number, (props) => {
      if (props.pageSize && props.pageSize > MAX_PAGE_SIZE) {
        return new Error([`MUI: \`<DataGrid pageSize={${props.pageSize}} />\` is not a valid prop.`, `Only page size below ${MAX_PAGE_SIZE} is available in the MIT version.`, "", "You need to upgrade to the DataGridPro component to unlock this feature."].join("\n"));
      }
      return null;
    }),
    pagination: (props) => {
      if (props.pagination === false) {
        return new Error(["MUI: `<DataGrid pagination={false} />` is not a valid prop.", "Infinite scrolling is not available in the MIT version.", "", "You need to upgrade to the DataGridPro component to disable the pagination."].join("\n"));
      }
      return null;
    },
    paginationMode: import_prop_types103.default.oneOf(["client", "server"]),
    processRowUpdate: import_prop_types103.default.func,
    rowBuffer: import_prop_types103.default.number,
    rowCount: import_prop_types103.default.number,
    rowHeight: import_prop_types103.default.number,
    rows: import_prop_types103.default.array.isRequired,
    rowSpacingType: import_prop_types103.default.oneOf(["border", "margin"]),
    rowsPerPageOptions: import_prop_types103.default.arrayOf(import_prop_types103.default.number),
    rowThreshold: import_prop_types103.default.number,
    scrollbarSize: import_prop_types103.default.number,
    selectionModel: chainPropTypes(import_prop_types103.default.oneOfType([import_prop_types103.default.number, import_prop_types103.default.string, import_prop_types103.default.array]), (props) => {
      if (!props.checkboxSelection && Array.isArray(props.selectionModel) && props.selectionModel.length > 1) {
        return new Error([`MUI: \`<DataGrid selectionModel={${JSON.stringify(props.selectionModel)}} />\` is not a valid prop.`, "selectionModel can only be of 1 item in DataGrid.", "", "You need to upgrade to the DataGridPro component to unlock multiple selection."].join("\n"));
      }
      return null;
    }),
    showCellRightBorder: import_prop_types103.default.bool,
    showColumnRightBorder: import_prop_types103.default.bool,
    sortingMode: import_prop_types103.default.oneOf(["client", "server"]),
    sortingOrder: import_prop_types103.default.arrayOf(import_prop_types103.default.oneOf(["asc", "desc"])),
    sortModel: import_prop_types103.default.arrayOf(import_prop_types103.default.shape({
      field: import_prop_types103.default.string.isRequired,
      sort: import_prop_types103.default.oneOf(["asc", "desc"])
    })),
    sx: import_prop_types103.default.oneOfType([import_prop_types103.default.arrayOf(import_prop_types103.default.oneOfType([import_prop_types103.default.func, import_prop_types103.default.object, import_prop_types103.default.bool])), import_prop_types103.default.func, import_prop_types103.default.object])
  };

  // node_modules/bson/dist/bson.browser.esm.js
  function createCommonjsModule(fn2, module) {
    return module = { exports: {} }, fn2(module, module.exports), module.exports;
  }
  var byteLength_1 = byteLength;
  var toByteArray_1 = toByteArray;
  var fromByteArray_1 = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  var i;
  var len;
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1)
      validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for (i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start2, end2) {
    var tmp;
    var output = [];
    for (var i = start2; i < end2; i += 3) {
      tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
    }
    return parts.join("");
  }
  var base64Js = {
    byteLength: byteLength_1,
    toByteArray: toByteArray_1,
    fromByteArray: fromByteArray_1
  };
  var read2 = function read3(buffer2, offset2, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer2[offset2 + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer2[offset2 + i], i += d, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer2[offset2 + i], i += d, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  var write2 = function write3(buffer2, value, offset2, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer2[offset2 + i] = m & 255, i += d, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer2[offset2 + i] = e & 255, i += d, e /= 256, eLen -= 8) {
    }
    buffer2[offset2 + i - d] |= s * 128;
  };
  var ieee754 = {
    read: read2,
    write: write2
  };
  var buffer$1 = createCommonjsModule(function(module, exports) {
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer2;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    }
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        var proto = {
          foo: function foo() {
            return 42;
          }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function get() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function get() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length2) {
      if (length2 > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length2 + '" is invalid for option "size"');
      }
      var buf = new Uint8Array(length2);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length2) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError('The "string" argument must be of type string. Received type number');
        }
        return allocUnsafe(arg);
      }
      return from2(arg, encodingOrOffset, length2);
    }
    Buffer2.poolSize = 8192;
    function from2(value, encodingOrOffset, length2) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + babelHelpers["typeof"](value));
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length2);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length2);
      }
      if (typeof value === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      }
      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer2.from(valueOf, encodingOrOffset, length2);
      }
      var b = fromObject(value);
      if (b)
        return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length2);
      }
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + babelHelpers["typeof"](value));
    }
    Buffer2.from = function(value, encodingOrOffset, length2) {
      return from2(value, encodingOrOffset, length2);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc2(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc2(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      var length2 = byteLength2(string, encoding) | 0;
      var buf = createBuffer(length2);
      var actual = buf.write(string, encoding);
      if (actual !== length2) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      var length2 = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length2);
      for (var i = 0; i < length2; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        var copy2 = new Uint8Array(arrayView);
        return fromArrayBuffer(copy2.buffer, copy2.byteOffset, copy2.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length2) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length2 || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      var buf;
      if (byteOffset === void 0 && length2 === void 0) {
        buf = new Uint8Array(array);
      } else if (length2 === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length2);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length2) {
      if (length2 >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length2 | 0;
    }
    function SlowBuffer(length2) {
      if (+length2 != length2) {
        length2 = 0;
      }
      return Buffer2.alloc(+length2);
    }
    Buffer2.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array))
        a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array))
        b = Buffer2.from(b, b.offset, b.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      }
      if (a === b)
        return 0;
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list, length2) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      var i;
      if (length2 === void 0) {
        length2 = 0;
        for (i = 0; i < list.length; ++i) {
          length2 += list[i].length;
        }
      }
      var buffer2 = Buffer2.allocUnsafe(length2);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer2.length) {
            Buffer2.from(buf).copy(buffer2, pos);
          } else {
            Uint8Array.prototype.set.call(buffer2, buf, pos);
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer2, pos);
        }
        pos += buf.length;
      }
      return buffer2;
    };
    function byteLength2(string, encoding) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + babelHelpers["typeof"](string));
      }
      var len = string.length;
      var mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength2;
    function slowToString(encoding, start2, end2) {
      var loweredCase = false;
      if (start2 === void 0 || start2 < 0) {
        start2 = 0;
      }
      if (start2 > this.length) {
        return "";
      }
      if (end2 === void 0 || end2 > this.length) {
        end2 = this.length;
      }
      if (end2 <= 0) {
        return "";
      }
      end2 >>>= 0;
      start2 >>>= 0;
      if (end2 <= start2) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start2, end2);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start2, end2);
          case "ascii":
            return asciiSlice(this, start2, end2);
          case "latin1":
          case "binary":
            return latin1Slice(this, start2, end2);
          case "base64":
            return base64Slice(this, start2, end2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start2, end2);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer2.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      var length2 = this.length;
      if (length2 === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length2);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b) {
      if (!Buffer2.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.inspect = function inspect() {
      var str = "";
      var max2 = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max2).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max2)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare(target, start2, end2, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + babelHelpers["typeof"](target));
      }
      if (start2 === void 0) {
        start2 = 0;
      }
      if (end2 === void 0) {
        end2 = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start2 < 0 || end2 > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start2 >= end2) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start2 >= end2) {
        return 1;
      }
      start2 >>>= 0;
      end2 >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x = thisEnd - thisStart;
      var y = end2 - start2;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start2, end2);
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
      if (buffer2.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer2.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer2.length + byteOffset;
      if (byteOffset >= buffer2.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer2.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read4(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read4(arr, i) === read4(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i;
            if (i - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read4(arr, i + j) !== read4(val, j)) {
              found = false;
              break;
            }
          }
          if (found)
            return i;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset2, length2) {
      offset2 = Number(offset2) || 0;
      var remaining = buf.length - offset2;
      if (!length2) {
        length2 = remaining;
      } else {
        length2 = Number(length2);
        if (length2 > remaining) {
          length2 = remaining;
        }
      }
      var strLen = string.length;
      if (length2 > strLen / 2) {
        length2 = strLen / 2;
      }
      for (var i = 0; i < length2; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i;
        buf[offset2 + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset2, length2) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset2), buf, offset2, length2);
    }
    function asciiWrite(buf, string, offset2, length2) {
      return blitBuffer(asciiToBytes(string), buf, offset2, length2);
    }
    function base64Write(buf, string, offset2, length2) {
      return blitBuffer(base64ToBytes(string), buf, offset2, length2);
    }
    function ucs2Write(buf, string, offset2, length2) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset2), buf, offset2, length2);
    }
    Buffer2.prototype.write = function write4(string, offset2, length2, encoding) {
      if (offset2 === void 0) {
        encoding = "utf8";
        length2 = this.length;
        offset2 = 0;
      } else if (length2 === void 0 && typeof offset2 === "string") {
        encoding = offset2;
        length2 = this.length;
        offset2 = 0;
      } else if (isFinite(offset2)) {
        offset2 = offset2 >>> 0;
        if (isFinite(length2)) {
          length2 = length2 >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length2;
          length2 = void 0;
        }
      } else {
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      }
      var remaining = this.length - offset2;
      if (length2 === void 0 || length2 > remaining)
        length2 = remaining;
      if (string.length > 0 && (length2 < 0 || offset2 < 0) || offset2 > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset2, length2);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset2, length2);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset2, length2);
          case "base64":
            return base64Write(this, string, offset2, length2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset2, length2);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start2, end2) {
      if (start2 === 0 && end2 === buf.length) {
        return base64Js.fromByteArray(buf);
      } else {
        return base64Js.fromByteArray(buf.slice(start2, end2));
      }
    }
    function utf8Slice(buf, start2, end2) {
      end2 = Math.min(buf.length, end2);
      var res = [];
      var i = start2;
      while (i < end2) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end2) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
      }
      return res;
    }
    function asciiSlice(buf, start2, end2) {
      var ret = "";
      end2 = Math.min(buf.length, end2);
      for (var i = start2; i < end2; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start2, end2) {
      var ret = "";
      end2 = Math.min(buf.length, end2);
      for (var i = start2; i < end2; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start2, end2) {
      var len = buf.length;
      if (!start2 || start2 < 0)
        start2 = 0;
      if (!end2 || end2 < 0 || end2 > len)
        end2 = len;
      var out = "";
      for (var i = start2; i < end2; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start2, end2) {
      var bytes = buf.slice(start2, end2);
      var res = "";
      for (var i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice2(start2, end2) {
      var len = this.length;
      start2 = ~~start2;
      end2 = end2 === void 0 ? len : ~~end2;
      if (start2 < 0) {
        start2 += len;
        if (start2 < 0)
          start2 = 0;
      } else if (start2 > len) {
        start2 = len;
      }
      if (end2 < 0) {
        end2 += len;
        if (end2 < 0)
          end2 = 0;
      } else if (end2 > len) {
        end2 = len;
      }
      if (end2 < start2)
        end2 = start2;
      var newBuf = this.subarray(start2, end2);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset2, ext, length2) {
      if (offset2 % 1 !== 0 || offset2 < 0)
        throw new RangeError("offset is not uint");
      if (offset2 + ext > length2)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset2, byteLength3, noAssert) {
      offset2 = offset2 >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset(offset2, byteLength3, this.length);
      var val = this[offset2];
      var mul = 1;
      var i = 0;
      while (++i < byteLength3 && (mul *= 256)) {
        val += this[offset2 + i] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset2, byteLength3, noAssert) {
      offset2 = offset2 >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        checkOffset(offset2, byteLength3, this.length);
      }
      var val = this[offset2 + --byteLength3];
      var mul = 1;
      while (byteLength3 > 0 && (mul *= 256)) {
        val += this[offset2 + --byteLength3] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 1, this.length);
      return this[offset2];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 2, this.length);
      return this[offset2] | this[offset2 + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 2, this.length);
      return this[offset2] << 8 | this[offset2 + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return (this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16) + this[offset2 + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return this[offset2] * 16777216 + (this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3]);
    };
    Buffer2.prototype.readIntLE = function readIntLE(offset2, byteLength3, noAssert) {
      offset2 = offset2 >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset(offset2, byteLength3, this.length);
      var val = this[offset2];
      var mul = 1;
      var i = 0;
      while (++i < byteLength3 && (mul *= 256)) {
        val += this[offset2 + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset2, byteLength3, noAssert) {
      offset2 = offset2 >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset(offset2, byteLength3, this.length);
      var i = byteLength3;
      var mul = 1;
      var val = this[offset2 + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset2 + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 1, this.length);
      if (!(this[offset2] & 128))
        return this[offset2];
      return (255 - this[offset2] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 2, this.length);
      var val = this[offset2] | this[offset2 + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 2, this.length);
      var val = this[offset2 + 1] | this[offset2] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16 | this[offset2 + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return this[offset2] << 24 | this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3];
    };
    Buffer2.prototype.readFloatLE = function readFloatLE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return ieee754.read(this, offset2, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return ieee754.read(this, offset2, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 8, this.length);
      return ieee754.read(this, offset2, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkOffset(offset2, 8, this.length);
      return ieee754.read(this, offset2, false, 52, 8);
    };
    function checkInt(buf, value, offset2, ext, max2, min2) {
      if (!Buffer2.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max2 || value < min2)
        throw new RangeError('"value" argument is out of bounds');
      if (offset2 + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset2, byteLength3, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset2, byteLength3, maxBytes, 0);
      }
      var mul = 1;
      var i = 0;
      this[offset2] = value & 255;
      while (++i < byteLength3 && (mul *= 256)) {
        this[offset2 + i] = value / mul & 255;
      }
      return offset2 + byteLength3;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset2, byteLength3, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset2, byteLength3, maxBytes, 0);
      }
      var i = byteLength3 - 1;
      var mul = 1;
      this[offset2 + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset2 + i] = value / mul & 255;
      }
      return offset2 + byteLength3;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 1, 255, 0);
      this[offset2] = value & 255;
      return offset2 + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 2, 65535, 0);
      this[offset2] = value & 255;
      this[offset2 + 1] = value >>> 8;
      return offset2 + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 2, 65535, 0);
      this[offset2] = value >>> 8;
      this[offset2 + 1] = value & 255;
      return offset2 + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 4, 4294967295, 0);
      this[offset2 + 3] = value >>> 24;
      this[offset2 + 2] = value >>> 16;
      this[offset2 + 1] = value >>> 8;
      this[offset2] = value & 255;
      return offset2 + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 4, 4294967295, 0);
      this[offset2] = value >>> 24;
      this[offset2 + 1] = value >>> 16;
      this[offset2 + 2] = value >>> 8;
      this[offset2 + 3] = value & 255;
      return offset2 + 4;
    };
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset2, byteLength3, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset2, byteLength3, limit - 1, -limit);
      }
      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset2] = value & 255;
      while (++i < byteLength3 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset2 + i - 1] !== 0) {
          sub = 1;
        }
        this[offset2 + i] = (value / mul >> 0) - sub & 255;
      }
      return offset2 + byteLength3;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset2, byteLength3, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset2, byteLength3, limit - 1, -limit);
      }
      var i = byteLength3 - 1;
      var mul = 1;
      var sub = 0;
      this[offset2 + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset2 + i + 1] !== 0) {
          sub = 1;
        }
        this[offset2 + i] = (value / mul >> 0) - sub & 255;
      }
      return offset2 + byteLength3;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset2] = value & 255;
      return offset2 + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 2, 32767, -32768);
      this[offset2] = value & 255;
      this[offset2 + 1] = value >>> 8;
      return offset2 + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 2, 32767, -32768);
      this[offset2] = value >>> 8;
      this[offset2 + 1] = value & 255;
      return offset2 + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 4, 2147483647, -2147483648);
      this[offset2] = value & 255;
      this[offset2 + 1] = value >>> 8;
      this[offset2 + 2] = value >>> 16;
      this[offset2 + 3] = value >>> 24;
      return offset2 + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert)
        checkInt(this, value, offset2, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset2] = value >>> 24;
      this[offset2 + 1] = value >>> 16;
      this[offset2 + 2] = value >>> 8;
      this[offset2 + 3] = value & 255;
      return offset2 + 4;
    };
    function checkIEEE754(buf, value, offset2, ext, max2, min2) {
      if (offset2 + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset2 < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset2, littleEndian, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset2, 4);
      }
      ieee754.write(buf, value, offset2, littleEndian, 23, 4);
      return offset2 + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset2, noAssert) {
      return writeFloat(this, value, offset2, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset2, noAssert) {
      return writeFloat(this, value, offset2, false, noAssert);
    };
    function writeDouble(buf, value, offset2, littleEndian, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset2, 8);
      }
      ieee754.write(buf, value, offset2, littleEndian, 52, 8);
      return offset2 + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset2, noAssert) {
      return writeDouble(this, value, offset2, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset2, noAssert) {
      return writeDouble(this, value, offset2, false, noAssert);
    };
    Buffer2.prototype.copy = function copy2(target, targetStart, start2, end2) {
      if (!Buffer2.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start2)
        start2 = 0;
      if (!end2 && end2 !== 0)
        end2 = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end2 > 0 && end2 < start2)
        end2 = start2;
      if (end2 === start2)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start2 < 0 || start2 >= this.length)
        throw new RangeError("Index out of range");
      if (end2 < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end2 > this.length)
        end2 = this.length;
      if (target.length - targetStart < end2 - start2) {
        end2 = target.length - targetStart + start2;
      }
      var len = end2 - start2;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start2, end2);
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start2, end2), targetStart);
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start2, end2, encoding) {
      if (typeof val === "string") {
        if (typeof start2 === "string") {
          encoding = start2;
          start2 = 0;
          end2 = this.length;
        } else if (typeof end2 === "string") {
          encoding = end2;
          end2 = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          var code2 = val.charCodeAt(0);
          if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start2 < 0 || this.length < start2 || this.length < end2) {
        throw new RangeError("Out of range index");
      }
      if (end2 <= start2) {
        return this;
      }
      start2 = start2 >>> 0;
      end2 = end2 === void 0 ? this.length : end2 >>> 0;
      if (!val)
        val = 0;
      var i;
      if (typeof val === "number") {
        for (i = start2; i < end2; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end2 - start2; ++i) {
          this[i + start2] = bytes[i % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length2 = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i = 0; i < length2; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length2) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0)
          break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64Js.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset2, length2) {
      for (var i = 0; i < length2; ++i) {
        if (i + offset2 >= dst.length || i >= src.length)
          break;
        dst[i + offset2] = src[i];
      }
      return i;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      var alphabet = "0123456789abcdef";
      var table = new Array(256);
      for (var i = 0; i < 16; ++i) {
        var i16 = i * 16;
        for (var j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table;
    }();
  });
  var buffer_1 = buffer$1.Buffer;
  buffer$1.SlowBuffer;
  buffer$1.INSPECT_MAX_BYTES;
  buffer$1.kMaxLength;
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) {
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
      }
    };
    return _extendStatics(d, b);
  };
  function __extends(d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var BSONError = function(_super) {
    __extends(BSONError2, _super);
    function BSONError2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BSONError2.prototype, "name", {
      get: function() {
        return "BSONError";
      },
      enumerable: false,
      configurable: true
    });
    return BSONError2;
  }(Error);
  var BSONTypeError = function(_super) {
    __extends(BSONTypeError2, _super);
    function BSONTypeError2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BSONTypeError2.prototype, "name", {
      get: function() {
        return "BSONTypeError";
      },
      enumerable: false,
      configurable: true
    });
    return BSONTypeError2;
  }(TypeError);
  function checkForMath(potentialGlobal) {
    return potentialGlobal && potentialGlobal.Math == Math && potentialGlobal;
  }
  function getGlobal() {
    return checkForMath(typeof globalThis === "object" && globalThis) || checkForMath(typeof window === "object" && window) || checkForMath(typeof self === "object" && self) || checkForMath(typeof global === "object" && global) || Function("return this")();
  }
  function normalizedFunctionString(fn2) {
    return fn2.toString().replace("function(", "function (");
  }
  function isReactNative() {
    var g = getGlobal();
    return typeof g.navigator === "object" && g.navigator.product === "ReactNative";
  }
  var insecureRandomBytes = function insecureRandomBytes2(size) {
    var insecureWarning = isReactNative() ? "BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values." : "BSON: No cryptographic implementation for random bytes present, falling back to a less secure implementation.";
    console.warn(insecureWarning);
    var result = buffer_1.alloc(size);
    for (var i = 0; i < size; ++i)
      result[i] = Math.floor(Math.random() * 256);
    return result;
  };
  var detectRandomBytes = function() {
    if (typeof window !== "undefined") {
      var target_1 = window.crypto || window.msCrypto;
      if (target_1 && target_1.getRandomValues) {
        return function(size) {
          return target_1.getRandomValues(buffer_1.alloc(size));
        };
      }
    }
    if (typeof global !== "undefined" && global.crypto && global.crypto.getRandomValues) {
      return function(size) {
        return global.crypto.getRandomValues(buffer_1.alloc(size));
      };
    }
    var requiredRandomBytes;
    try {
      requiredRandomBytes = __require("crypto").randomBytes;
    } catch (e) {
    }
    return requiredRandomBytes || insecureRandomBytes;
  };
  var randomBytes = detectRandomBytes();
  function isAnyArrayBuffer(value) {
    return ["[object ArrayBuffer]", "[object SharedArrayBuffer]"].includes(Object.prototype.toString.call(value));
  }
  function isUint8Array(value) {
    return Object.prototype.toString.call(value) === "[object Uint8Array]";
  }
  function isBigInt64Array(value) {
    return Object.prototype.toString.call(value) === "[object BigInt64Array]";
  }
  function isBigUInt64Array(value) {
    return Object.prototype.toString.call(value) === "[object BigUint64Array]";
  }
  function isRegExp(d) {
    return Object.prototype.toString.call(d) === "[object RegExp]";
  }
  function isMap(d) {
    return Object.prototype.toString.call(d) === "[object Map]";
  }
  function isDate(d) {
    return isObjectLike(d) && Object.prototype.toString.call(d) === "[object Date]";
  }
  function isObjectLike(candidate) {
    return typeof candidate === "object" && candidate !== null;
  }
  function deprecate(fn2, message) {
    var warned = false;
    function deprecated() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (!warned) {
        console.warn(message);
        warned = true;
      }
      return fn2.apply(this, args);
    }
    return deprecated;
  }
  function ensureBuffer(potentialBuffer) {
    if (ArrayBuffer.isView(potentialBuffer)) {
      return buffer_1.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);
    }
    if (isAnyArrayBuffer(potentialBuffer)) {
      return buffer_1.from(potentialBuffer);
    }
    throw new BSONTypeError("Must use either Buffer or TypedArray");
  }
  var VALIDATION_REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15})$/i;
  var uuidValidateString = function(str) {
    return typeof str === "string" && VALIDATION_REGEX.test(str);
  };
  var uuidHexStringToBuffer = function(hexString) {
    if (!uuidValidateString(hexString)) {
      throw new BSONTypeError('UUID string representations must be a 32 or 36 character hex string (dashes excluded/included). Format: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" or "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".');
    }
    var sanitizedHexString = hexString.replace(/-/g, "");
    return buffer_1.from(sanitizedHexString, "hex");
  };
  var bufferToUuidHexString = function(buffer2, includeDashes) {
    if (includeDashes === void 0) {
      includeDashes = true;
    }
    return includeDashes ? buffer2.toString("hex", 0, 4) + "-" + buffer2.toString("hex", 4, 6) + "-" + buffer2.toString("hex", 6, 8) + "-" + buffer2.toString("hex", 8, 10) + "-" + buffer2.toString("hex", 10, 16) : buffer2.toString("hex");
  };
  var BYTE_LENGTH = 16;
  var kId$1 = Symbol("id");
  var UUID = function() {
    function UUID2(input) {
      if (typeof input === "undefined") {
        this.id = UUID2.generate();
      } else if (input instanceof UUID2) {
        this[kId$1] = buffer_1.from(input.id);
        this.__id = input.__id;
      } else if (ArrayBuffer.isView(input) && input.byteLength === BYTE_LENGTH) {
        this.id = ensureBuffer(input);
      } else if (typeof input === "string") {
        this.id = uuidHexStringToBuffer(input);
      } else {
        throw new BSONTypeError("Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).");
      }
    }
    Object.defineProperty(UUID2.prototype, "id", {
      get: function() {
        return this[kId$1];
      },
      set: function(value) {
        this[kId$1] = value;
        if (UUID2.cacheHexString) {
          this.__id = bufferToUuidHexString(value);
        }
      },
      enumerable: false,
      configurable: true
    });
    UUID2.prototype.toHexString = function(includeDashes) {
      if (includeDashes === void 0) {
        includeDashes = true;
      }
      if (UUID2.cacheHexString && this.__id) {
        return this.__id;
      }
      var uuidHexString = bufferToUuidHexString(this.id, includeDashes);
      if (UUID2.cacheHexString) {
        this.__id = uuidHexString;
      }
      return uuidHexString;
    };
    UUID2.prototype.toString = function(encoding) {
      return encoding ? this.id.toString(encoding) : this.toHexString();
    };
    UUID2.prototype.toJSON = function() {
      return this.toHexString();
    };
    UUID2.prototype.equals = function(otherId) {
      if (!otherId) {
        return false;
      }
      if (otherId instanceof UUID2) {
        return otherId.id.equals(this.id);
      }
      try {
        return new UUID2(otherId).id.equals(this.id);
      } catch (_a2) {
        return false;
      }
    };
    UUID2.prototype.toBinary = function() {
      return new Binary(this.id, Binary.SUBTYPE_UUID);
    };
    UUID2.generate = function() {
      var bytes = randomBytes(BYTE_LENGTH);
      bytes[6] = bytes[6] & 15 | 64;
      bytes[8] = bytes[8] & 63 | 128;
      return buffer_1.from(bytes);
    };
    UUID2.isValid = function(input) {
      if (!input) {
        return false;
      }
      if (input instanceof UUID2) {
        return true;
      }
      if (typeof input === "string") {
        return uuidValidateString(input);
      }
      if (isUint8Array(input)) {
        if (input.length !== BYTE_LENGTH) {
          return false;
        }
        try {
          return parseInt(input[6].toString(16)[0], 10) === Binary.SUBTYPE_UUID;
        } catch (_a2) {
          return false;
        }
      }
      return false;
    };
    UUID2.createFromHexString = function(hexString) {
      var buffer2 = uuidHexStringToBuffer(hexString);
      return new UUID2(buffer2);
    };
    UUID2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    UUID2.prototype.inspect = function() {
      return 'new UUID("' + this.toHexString() + '")';
    };
    return UUID2;
  }();
  Object.defineProperty(UUID.prototype, "_bsontype", { value: "UUID" });
  var Binary = function() {
    function Binary2(buffer2, subType) {
      if (!(this instanceof Binary2))
        return new Binary2(buffer2, subType);
      if (!(buffer2 == null) && !(typeof buffer2 === "string") && !ArrayBuffer.isView(buffer2) && !(buffer2 instanceof ArrayBuffer) && !Array.isArray(buffer2)) {
        throw new BSONTypeError("Binary can only be constructed from string, Buffer, TypedArray, or Array<number>");
      }
      this.sub_type = subType !== null && subType !== void 0 ? subType : Binary2.BSON_BINARY_SUBTYPE_DEFAULT;
      if (buffer2 == null) {
        this.buffer = buffer_1.alloc(Binary2.BUFFER_SIZE);
        this.position = 0;
      } else {
        if (typeof buffer2 === "string") {
          this.buffer = buffer_1.from(buffer2, "binary");
        } else if (Array.isArray(buffer2)) {
          this.buffer = buffer_1.from(buffer2);
        } else {
          this.buffer = ensureBuffer(buffer2);
        }
        this.position = this.buffer.byteLength;
      }
    }
    Binary2.prototype.put = function(byteValue) {
      if (typeof byteValue === "string" && byteValue.length !== 1) {
        throw new BSONTypeError("only accepts single character String");
      } else if (typeof byteValue !== "number" && byteValue.length !== 1)
        throw new BSONTypeError("only accepts single character Uint8Array or Array");
      var decodedByte;
      if (typeof byteValue === "string") {
        decodedByte = byteValue.charCodeAt(0);
      } else if (typeof byteValue === "number") {
        decodedByte = byteValue;
      } else {
        decodedByte = byteValue[0];
      }
      if (decodedByte < 0 || decodedByte > 255) {
        throw new BSONTypeError("only accepts number in a valid unsigned byte range 0-255");
      }
      if (this.buffer.length > this.position) {
        this.buffer[this.position++] = decodedByte;
      } else {
        var buffer2 = buffer_1.alloc(Binary2.BUFFER_SIZE + this.buffer.length);
        this.buffer.copy(buffer2, 0, 0, this.buffer.length);
        this.buffer = buffer2;
        this.buffer[this.position++] = decodedByte;
      }
    };
    Binary2.prototype.write = function(sequence, offset2) {
      offset2 = typeof offset2 === "number" ? offset2 : this.position;
      if (this.buffer.length < offset2 + sequence.length) {
        var buffer2 = buffer_1.alloc(this.buffer.length + sequence.length);
        this.buffer.copy(buffer2, 0, 0, this.buffer.length);
        this.buffer = buffer2;
      }
      if (ArrayBuffer.isView(sequence)) {
        this.buffer.set(ensureBuffer(sequence), offset2);
        this.position = offset2 + sequence.byteLength > this.position ? offset2 + sequence.length : this.position;
      } else if (typeof sequence === "string") {
        this.buffer.write(sequence, offset2, sequence.length, "binary");
        this.position = offset2 + sequence.length > this.position ? offset2 + sequence.length : this.position;
      }
    };
    Binary2.prototype.read = function(position3, length2) {
      length2 = length2 && length2 > 0 ? length2 : this.position;
      return this.buffer.slice(position3, position3 + length2);
    };
    Binary2.prototype.value = function(asRaw) {
      asRaw = !!asRaw;
      if (asRaw && this.buffer.length === this.position) {
        return this.buffer;
      }
      if (asRaw) {
        return this.buffer.slice(0, this.position);
      }
      return this.buffer.toString("binary", 0, this.position);
    };
    Binary2.prototype.length = function() {
      return this.position;
    };
    Binary2.prototype.toJSON = function() {
      return this.buffer.toString("base64");
    };
    Binary2.prototype.toString = function(format2) {
      return this.buffer.toString(format2);
    };
    Binary2.prototype.toExtendedJSON = function(options) {
      options = options || {};
      var base64String = this.buffer.toString("base64");
      var subType = Number(this.sub_type).toString(16);
      if (options.legacy) {
        return {
          $binary: base64String,
          $type: subType.length === 1 ? "0" + subType : subType
        };
      }
      return {
        $binary: {
          base64: base64String,
          subType: subType.length === 1 ? "0" + subType : subType
        }
      };
    };
    Binary2.prototype.toUUID = function() {
      if (this.sub_type === Binary2.SUBTYPE_UUID) {
        return new UUID(this.buffer.slice(0, this.position));
      }
      throw new BSONError('Binary sub_type "' + this.sub_type + '" is not supported for converting to UUID. Only "' + Binary2.SUBTYPE_UUID + '" is currently supported.');
    };
    Binary2.fromExtendedJSON = function(doc, options) {
      options = options || {};
      var data;
      var type;
      if ("$binary" in doc) {
        if (options.legacy && typeof doc.$binary === "string" && "$type" in doc) {
          type = doc.$type ? parseInt(doc.$type, 16) : 0;
          data = buffer_1.from(doc.$binary, "base64");
        } else {
          if (typeof doc.$binary !== "string") {
            type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;
            data = buffer_1.from(doc.$binary.base64, "base64");
          }
        }
      } else if ("$uuid" in doc) {
        type = 4;
        data = uuidHexStringToBuffer(doc.$uuid);
      }
      if (!data) {
        throw new BSONTypeError("Unexpected Binary Extended JSON format " + JSON.stringify(doc));
      }
      return new Binary2(data, type);
    };
    Binary2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    Binary2.prototype.inspect = function() {
      var asBuffer = this.value(true);
      return 'new Binary(Buffer.from("' + asBuffer.toString("hex") + '", "hex"), ' + this.sub_type + ")";
    };
    Binary2.BSON_BINARY_SUBTYPE_DEFAULT = 0;
    Binary2.BUFFER_SIZE = 256;
    Binary2.SUBTYPE_DEFAULT = 0;
    Binary2.SUBTYPE_FUNCTION = 1;
    Binary2.SUBTYPE_BYTE_ARRAY = 2;
    Binary2.SUBTYPE_UUID_OLD = 3;
    Binary2.SUBTYPE_UUID = 4;
    Binary2.SUBTYPE_MD5 = 5;
    Binary2.SUBTYPE_ENCRYPTED = 6;
    Binary2.SUBTYPE_COLUMN = 7;
    Binary2.SUBTYPE_USER_DEFINED = 128;
    return Binary2;
  }();
  Object.defineProperty(Binary.prototype, "_bsontype", { value: "Binary" });
  var Code = function() {
    function Code2(code2, scope) {
      if (!(this instanceof Code2))
        return new Code2(code2, scope);
      this.code = code2;
      this.scope = scope;
    }
    Code2.prototype.toJSON = function() {
      return { code: this.code, scope: this.scope };
    };
    Code2.prototype.toExtendedJSON = function() {
      if (this.scope) {
        return { $code: this.code, $scope: this.scope };
      }
      return { $code: this.code };
    };
    Code2.fromExtendedJSON = function(doc) {
      return new Code2(doc.$code, doc.$scope);
    };
    Code2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    Code2.prototype.inspect = function() {
      var codeJson = this.toJSON();
      return 'new Code("' + codeJson.code + '"' + (codeJson.scope ? ", " + JSON.stringify(codeJson.scope) : "") + ")";
    };
    return Code2;
  }();
  Object.defineProperty(Code.prototype, "_bsontype", { value: "Code" });
  function isDBRefLike(value) {
    return isObjectLike(value) && value.$id != null && typeof value.$ref === "string" && (value.$db == null || typeof value.$db === "string");
  }
  var DBRef = function() {
    function DBRef2(collection, oid, db, fields) {
      if (!(this instanceof DBRef2))
        return new DBRef2(collection, oid, db, fields);
      var parts = collection.split(".");
      if (parts.length === 2) {
        db = parts.shift();
        collection = parts.shift();
      }
      this.collection = collection;
      this.oid = oid;
      this.db = db;
      this.fields = fields || {};
    }
    Object.defineProperty(DBRef2.prototype, "namespace", {
      get: function() {
        return this.collection;
      },
      set: function(value) {
        this.collection = value;
      },
      enumerable: false,
      configurable: true
    });
    DBRef2.prototype.toJSON = function() {
      var o = Object.assign({
        $ref: this.collection,
        $id: this.oid
      }, this.fields);
      if (this.db != null)
        o.$db = this.db;
      return o;
    };
    DBRef2.prototype.toExtendedJSON = function(options) {
      options = options || {};
      var o = {
        $ref: this.collection,
        $id: this.oid
      };
      if (options.legacy) {
        return o;
      }
      if (this.db)
        o.$db = this.db;
      o = Object.assign(o, this.fields);
      return o;
    };
    DBRef2.fromExtendedJSON = function(doc) {
      var copy2 = Object.assign({}, doc);
      delete copy2.$ref;
      delete copy2.$id;
      delete copy2.$db;
      return new DBRef2(doc.$ref, doc.$id, doc.$db, copy2);
    };
    DBRef2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    DBRef2.prototype.inspect = function() {
      var oid = this.oid === void 0 || this.oid.toString === void 0 ? this.oid : this.oid.toString();
      return 'new DBRef("' + this.namespace + '", new ObjectId("' + oid + '")' + (this.db ? ', "' + this.db + '"' : "") + ")";
    };
    return DBRef2;
  }();
  Object.defineProperty(DBRef.prototype, "_bsontype", { value: "DBRef" });
  var wasm = void 0;
  try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
  } catch (_a2) {
  }
  var TWO_PWR_16_DBL = 1 << 16;
  var TWO_PWR_24_DBL = 1 << 24;
  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
  var INT_CACHE = {};
  var UINT_CACHE = {};
  var Long = function() {
    function Long2(low, high, unsigned) {
      if (low === void 0) {
        low = 0;
      }
      if (!(this instanceof Long2))
        return new Long2(low, high, unsigned);
      if (typeof low === "bigint") {
        Object.assign(this, Long2.fromBigInt(low, !!high));
      } else if (typeof low === "string") {
        Object.assign(this, Long2.fromString(low, !!high));
      } else {
        this.low = low | 0;
        this.high = high | 0;
        this.unsigned = !!unsigned;
      }
      Object.defineProperty(this, "__isLong__", {
        value: true,
        configurable: false,
        writable: false,
        enumerable: false
      });
    }
    Long2.fromBits = function(lowBits, highBits, unsigned) {
      return new Long2(lowBits, highBits, unsigned);
    };
    Long2.fromInt = function(value, unsigned) {
      var obj, cachedObj, cache2;
      if (unsigned) {
        value >>>= 0;
        if (cache2 = 0 <= value && value < 256) {
          cachedObj = UINT_CACHE[value];
          if (cachedObj)
            return cachedObj;
        }
        obj = Long2.fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache2)
          UINT_CACHE[value] = obj;
        return obj;
      } else {
        value |= 0;
        if (cache2 = -128 <= value && value < 128) {
          cachedObj = INT_CACHE[value];
          if (cachedObj)
            return cachedObj;
        }
        obj = Long2.fromBits(value, value < 0 ? -1 : 0, false);
        if (cache2)
          INT_CACHE[value] = obj;
        return obj;
      }
    };
    Long2.fromNumber = function(value, unsigned) {
      if (isNaN(value))
        return unsigned ? Long2.UZERO : Long2.ZERO;
      if (unsigned) {
        if (value < 0)
          return Long2.UZERO;
        if (value >= TWO_PWR_64_DBL)
          return Long2.MAX_UNSIGNED_VALUE;
      } else {
        if (value <= -TWO_PWR_63_DBL)
          return Long2.MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
          return Long2.MAX_VALUE;
      }
      if (value < 0)
        return Long2.fromNumber(-value, unsigned).neg();
      return Long2.fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
    };
    Long2.fromBigInt = function(value, unsigned) {
      return Long2.fromString(value.toString(), unsigned);
    };
    Long2.fromString = function(str, unsigned, radix) {
      if (str.length === 0)
        throw Error("empty string");
      if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return Long2.ZERO;
      if (typeof unsigned === "number") {
        radix = unsigned, unsigned = false;
      } else {
        unsigned = !!unsigned;
      }
      radix = radix || 10;
      if (radix < 2 || 36 < radix)
        throw RangeError("radix");
      var p;
      if ((p = str.indexOf("-")) > 0)
        throw Error("interior hyphen");
      else if (p === 0) {
        return Long2.fromString(str.substring(1), unsigned, radix).neg();
      }
      var radixToPower = Long2.fromNumber(Math.pow(radix, 8));
      var result = Long2.ZERO;
      for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
          var power = Long2.fromNumber(Math.pow(radix, size));
          result = result.mul(power).add(Long2.fromNumber(value));
        } else {
          result = result.mul(radixToPower);
          result = result.add(Long2.fromNumber(value));
        }
      }
      result.unsigned = unsigned;
      return result;
    };
    Long2.fromBytes = function(bytes, unsigned, le) {
      return le ? Long2.fromBytesLE(bytes, unsigned) : Long2.fromBytesBE(bytes, unsigned);
    };
    Long2.fromBytesLE = function(bytes, unsigned) {
      return new Long2(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
    };
    Long2.fromBytesBE = function(bytes, unsigned) {
      return new Long2(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
    };
    Long2.isLong = function(value) {
      return isObjectLike(value) && value["__isLong__"] === true;
    };
    Long2.fromValue = function(val, unsigned) {
      if (typeof val === "number")
        return Long2.fromNumber(val, unsigned);
      if (typeof val === "string")
        return Long2.fromString(val, unsigned);
      return Long2.fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
    };
    Long2.prototype.add = function(addend) {
      if (!Long2.isLong(addend))
        addend = Long2.fromValue(addend);
      var a48 = this.high >>> 16;
      var a32 = this.high & 65535;
      var a16 = this.low >>> 16;
      var a00 = this.low & 65535;
      var b48 = addend.high >>> 16;
      var b32 = addend.high & 65535;
      var b16 = addend.low >>> 16;
      var b00 = addend.low & 65535;
      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
      c00 += a00 + b00;
      c16 += c00 >>> 16;
      c00 &= 65535;
      c16 += a16 + b16;
      c32 += c16 >>> 16;
      c16 &= 65535;
      c32 += a32 + b32;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c48 += a48 + b48;
      c48 &= 65535;
      return Long2.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    Long2.prototype.and = function(other) {
      if (!Long2.isLong(other))
        other = Long2.fromValue(other);
      return Long2.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };
    Long2.prototype.compare = function(other) {
      if (!Long2.isLong(other))
        other = Long2.fromValue(other);
      if (this.eq(other))
        return 0;
      var thisNeg = this.isNegative(), otherNeg = other.isNegative();
      if (thisNeg && !otherNeg)
        return -1;
      if (!thisNeg && otherNeg)
        return 1;
      if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
      return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
    };
    Long2.prototype.comp = function(other) {
      return this.compare(other);
    };
    Long2.prototype.divide = function(divisor) {
      if (!Long2.isLong(divisor))
        divisor = Long2.fromValue(divisor);
      if (divisor.isZero())
        throw Error("division by zero");
      if (wasm) {
        if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
          return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
        return Long2.fromBits(low, wasm.get_high(), this.unsigned);
      }
      if (this.isZero())
        return this.unsigned ? Long2.UZERO : Long2.ZERO;
      var approx, rem, res;
      if (!this.unsigned) {
        if (this.eq(Long2.MIN_VALUE)) {
          if (divisor.eq(Long2.ONE) || divisor.eq(Long2.NEG_ONE))
            return Long2.MIN_VALUE;
          else if (divisor.eq(Long2.MIN_VALUE))
            return Long2.ONE;
          else {
            var halfThis = this.shr(1);
            approx = halfThis.div(divisor).shl(1);
            if (approx.eq(Long2.ZERO)) {
              return divisor.isNegative() ? Long2.ONE : Long2.NEG_ONE;
            } else {
              rem = this.sub(divisor.mul(approx));
              res = approx.add(rem.div(divisor));
              return res;
            }
          }
        } else if (divisor.eq(Long2.MIN_VALUE))
          return this.unsigned ? Long2.UZERO : Long2.ZERO;
        if (this.isNegative()) {
          if (divisor.isNegative())
            return this.neg().div(divisor.neg());
          return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
          return this.div(divisor.neg()).neg();
        res = Long2.ZERO;
      } else {
        if (!divisor.unsigned)
          divisor = divisor.toUnsigned();
        if (divisor.gt(this))
          return Long2.UZERO;
        if (divisor.gt(this.shru(1)))
          return Long2.UONE;
        res = Long2.UZERO;
      }
      rem = this;
      while (rem.gte(divisor)) {
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
        var log2 = Math.ceil(Math.log(approx) / Math.LN2);
        var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
        var approxRes = Long2.fromNumber(approx);
        var approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
          approx -= delta;
          approxRes = Long2.fromNumber(approx, this.unsigned);
          approxRem = approxRes.mul(divisor);
        }
        if (approxRes.isZero())
          approxRes = Long2.ONE;
        res = res.add(approxRes);
        rem = rem.sub(approxRem);
      }
      return res;
    };
    Long2.prototype.div = function(divisor) {
      return this.divide(divisor);
    };
    Long2.prototype.equals = function(other) {
      if (!Long2.isLong(other))
        other = Long2.fromValue(other);
      if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
        return false;
      return this.high === other.high && this.low === other.low;
    };
    Long2.prototype.eq = function(other) {
      return this.equals(other);
    };
    Long2.prototype.getHighBits = function() {
      return this.high;
    };
    Long2.prototype.getHighBitsUnsigned = function() {
      return this.high >>> 0;
    };
    Long2.prototype.getLowBits = function() {
      return this.low;
    };
    Long2.prototype.getLowBitsUnsigned = function() {
      return this.low >>> 0;
    };
    Long2.prototype.getNumBitsAbs = function() {
      if (this.isNegative()) {
        return this.eq(Long2.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
      }
      var val = this.high !== 0 ? this.high : this.low;
      var bit;
      for (bit = 31; bit > 0; bit--)
        if ((val & 1 << bit) !== 0)
          break;
      return this.high !== 0 ? bit + 33 : bit + 1;
    };
    Long2.prototype.greaterThan = function(other) {
      return this.comp(other) > 0;
    };
    Long2.prototype.gt = function(other) {
      return this.greaterThan(other);
    };
    Long2.prototype.greaterThanOrEqual = function(other) {
      return this.comp(other) >= 0;
    };
    Long2.prototype.gte = function(other) {
      return this.greaterThanOrEqual(other);
    };
    Long2.prototype.ge = function(other) {
      return this.greaterThanOrEqual(other);
    };
    Long2.prototype.isEven = function() {
      return (this.low & 1) === 0;
    };
    Long2.prototype.isNegative = function() {
      return !this.unsigned && this.high < 0;
    };
    Long2.prototype.isOdd = function() {
      return (this.low & 1) === 1;
    };
    Long2.prototype.isPositive = function() {
      return this.unsigned || this.high >= 0;
    };
    Long2.prototype.isZero = function() {
      return this.high === 0 && this.low === 0;
    };
    Long2.prototype.lessThan = function(other) {
      return this.comp(other) < 0;
    };
    Long2.prototype.lt = function(other) {
      return this.lessThan(other);
    };
    Long2.prototype.lessThanOrEqual = function(other) {
      return this.comp(other) <= 0;
    };
    Long2.prototype.lte = function(other) {
      return this.lessThanOrEqual(other);
    };
    Long2.prototype.modulo = function(divisor) {
      if (!Long2.isLong(divisor))
        divisor = Long2.fromValue(divisor);
      if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
        return Long2.fromBits(low, wasm.get_high(), this.unsigned);
      }
      return this.sub(this.div(divisor).mul(divisor));
    };
    Long2.prototype.mod = function(divisor) {
      return this.modulo(divisor);
    };
    Long2.prototype.rem = function(divisor) {
      return this.modulo(divisor);
    };
    Long2.prototype.multiply = function(multiplier) {
      if (this.isZero())
        return Long2.ZERO;
      if (!Long2.isLong(multiplier))
        multiplier = Long2.fromValue(multiplier);
      if (wasm) {
        var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
        return Long2.fromBits(low, wasm.get_high(), this.unsigned);
      }
      if (multiplier.isZero())
        return Long2.ZERO;
      if (this.eq(Long2.MIN_VALUE))
        return multiplier.isOdd() ? Long2.MIN_VALUE : Long2.ZERO;
      if (multiplier.eq(Long2.MIN_VALUE))
        return this.isOdd() ? Long2.MIN_VALUE : Long2.ZERO;
      if (this.isNegative()) {
        if (multiplier.isNegative())
          return this.neg().mul(multiplier.neg());
        else
          return this.neg().mul(multiplier).neg();
      } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();
      if (this.lt(Long2.TWO_PWR_24) && multiplier.lt(Long2.TWO_PWR_24))
        return Long2.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
      var a48 = this.high >>> 16;
      var a32 = this.high & 65535;
      var a16 = this.low >>> 16;
      var a00 = this.low & 65535;
      var b48 = multiplier.high >>> 16;
      var b32 = multiplier.high & 65535;
      var b16 = multiplier.low >>> 16;
      var b00 = multiplier.low & 65535;
      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
      c00 += a00 * b00;
      c16 += c00 >>> 16;
      c00 &= 65535;
      c16 += a16 * b00;
      c32 += c16 >>> 16;
      c16 &= 65535;
      c16 += a00 * b16;
      c32 += c16 >>> 16;
      c16 &= 65535;
      c32 += a32 * b00;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c32 += a16 * b16;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c32 += a00 * b32;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
      c48 &= 65535;
      return Long2.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    Long2.prototype.mul = function(multiplier) {
      return this.multiply(multiplier);
    };
    Long2.prototype.negate = function() {
      if (!this.unsigned && this.eq(Long2.MIN_VALUE))
        return Long2.MIN_VALUE;
      return this.not().add(Long2.ONE);
    };
    Long2.prototype.neg = function() {
      return this.negate();
    };
    Long2.prototype.not = function() {
      return Long2.fromBits(~this.low, ~this.high, this.unsigned);
    };
    Long2.prototype.notEquals = function(other) {
      return !this.equals(other);
    };
    Long2.prototype.neq = function(other) {
      return this.notEquals(other);
    };
    Long2.prototype.ne = function(other) {
      return this.notEquals(other);
    };
    Long2.prototype.or = function(other) {
      if (!Long2.isLong(other))
        other = Long2.fromValue(other);
      return Long2.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };
    Long2.prototype.shiftLeft = function(numBits) {
      if (Long2.isLong(numBits))
        numBits = numBits.toInt();
      if ((numBits &= 63) === 0)
        return this;
      else if (numBits < 32)
        return Long2.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
      else
        return Long2.fromBits(0, this.low << numBits - 32, this.unsigned);
    };
    Long2.prototype.shl = function(numBits) {
      return this.shiftLeft(numBits);
    };
    Long2.prototype.shiftRight = function(numBits) {
      if (Long2.isLong(numBits))
        numBits = numBits.toInt();
      if ((numBits &= 63) === 0)
        return this;
      else if (numBits < 32)
        return Long2.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
      else
        return Long2.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    };
    Long2.prototype.shr = function(numBits) {
      return this.shiftRight(numBits);
    };
    Long2.prototype.shiftRightUnsigned = function(numBits) {
      if (Long2.isLong(numBits))
        numBits = numBits.toInt();
      numBits &= 63;
      if (numBits === 0)
        return this;
      else {
        var high = this.high;
        if (numBits < 32) {
          var low = this.low;
          return Long2.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
        } else if (numBits === 32)
          return Long2.fromBits(high, 0, this.unsigned);
        else
          return Long2.fromBits(high >>> numBits - 32, 0, this.unsigned);
      }
    };
    Long2.prototype.shr_u = function(numBits) {
      return this.shiftRightUnsigned(numBits);
    };
    Long2.prototype.shru = function(numBits) {
      return this.shiftRightUnsigned(numBits);
    };
    Long2.prototype.subtract = function(subtrahend) {
      if (!Long2.isLong(subtrahend))
        subtrahend = Long2.fromValue(subtrahend);
      return this.add(subtrahend.neg());
    };
    Long2.prototype.sub = function(subtrahend) {
      return this.subtract(subtrahend);
    };
    Long2.prototype.toInt = function() {
      return this.unsigned ? this.low >>> 0 : this.low;
    };
    Long2.prototype.toNumber = function() {
      if (this.unsigned)
        return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };
    Long2.prototype.toBigInt = function() {
      return BigInt(this.toString());
    };
    Long2.prototype.toBytes = function(le) {
      return le ? this.toBytesLE() : this.toBytesBE();
    };
    Long2.prototype.toBytesLE = function() {
      var hi = this.high, lo = this.low;
      return [
        lo & 255,
        lo >>> 8 & 255,
        lo >>> 16 & 255,
        lo >>> 24,
        hi & 255,
        hi >>> 8 & 255,
        hi >>> 16 & 255,
        hi >>> 24
      ];
    };
    Long2.prototype.toBytesBE = function() {
      var hi = this.high, lo = this.low;
      return [
        hi >>> 24,
        hi >>> 16 & 255,
        hi >>> 8 & 255,
        hi & 255,
        lo >>> 24,
        lo >>> 16 & 255,
        lo >>> 8 & 255,
        lo & 255
      ];
    };
    Long2.prototype.toSigned = function() {
      if (!this.unsigned)
        return this;
      return Long2.fromBits(this.low, this.high, false);
    };
    Long2.prototype.toString = function(radix) {
      radix = radix || 10;
      if (radix < 2 || 36 < radix)
        throw RangeError("radix");
      if (this.isZero())
        return "0";
      if (this.isNegative()) {
        if (this.eq(Long2.MIN_VALUE)) {
          var radixLong = Long2.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
          return div.toString(radix) + rem1.toInt().toString(radix);
        } else
          return "-" + this.neg().toString(radix);
      }
      var radixToPower = Long2.fromNumber(Math.pow(radix, 6), this.unsigned);
      var rem = this;
      var result = "";
      while (true) {
        var remDiv = rem.div(radixToPower);
        var intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;
        var digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero()) {
          return digits + result;
        } else {
          while (digits.length < 6)
            digits = "0" + digits;
          result = "" + digits + result;
        }
      }
    };
    Long2.prototype.toUnsigned = function() {
      if (this.unsigned)
        return this;
      return Long2.fromBits(this.low, this.high, true);
    };
    Long2.prototype.xor = function(other) {
      if (!Long2.isLong(other))
        other = Long2.fromValue(other);
      return Long2.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };
    Long2.prototype.eqz = function() {
      return this.isZero();
    };
    Long2.prototype.le = function(other) {
      return this.lessThanOrEqual(other);
    };
    Long2.prototype.toExtendedJSON = function(options) {
      if (options && options.relaxed)
        return this.toNumber();
      return { $numberLong: this.toString() };
    };
    Long2.fromExtendedJSON = function(doc, options) {
      var result = Long2.fromString(doc.$numberLong);
      return options && options.relaxed ? result.toNumber() : result;
    };
    Long2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    Long2.prototype.inspect = function() {
      return 'new Long("' + this.toString() + '"' + (this.unsigned ? ", true" : "") + ")";
    };
    Long2.TWO_PWR_24 = Long2.fromInt(TWO_PWR_24_DBL);
    Long2.MAX_UNSIGNED_VALUE = Long2.fromBits(4294967295 | 0, 4294967295 | 0, true);
    Long2.ZERO = Long2.fromInt(0);
    Long2.UZERO = Long2.fromInt(0, true);
    Long2.ONE = Long2.fromInt(1);
    Long2.UONE = Long2.fromInt(1, true);
    Long2.NEG_ONE = Long2.fromInt(-1);
    Long2.MAX_VALUE = Long2.fromBits(4294967295 | 0, 2147483647 | 0, false);
    Long2.MIN_VALUE = Long2.fromBits(0, 2147483648 | 0, false);
    return Long2;
  }();
  Object.defineProperty(Long.prototype, "__isLong__", { value: true });
  Object.defineProperty(Long.prototype, "_bsontype", { value: "Long" });
  var PARSE_STRING_REGEXP = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/;
  var PARSE_INF_REGEXP = /^(\+|-)?(Infinity|inf)$/i;
  var PARSE_NAN_REGEXP = /^(\+|-)?NaN$/i;
  var EXPONENT_MAX = 6111;
  var EXPONENT_MIN = -6176;
  var EXPONENT_BIAS = 6176;
  var MAX_DIGITS = 34;
  var NAN_BUFFER = [
    124,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ].reverse();
  var INF_NEGATIVE_BUFFER = [
    248,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ].reverse();
  var INF_POSITIVE_BUFFER = [
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ].reverse();
  var EXPONENT_REGEX = /^([-+])?(\d+)?$/;
  var COMBINATION_MASK = 31;
  var EXPONENT_MASK = 16383;
  var COMBINATION_INFINITY = 30;
  var COMBINATION_NAN = 31;
  function isDigit(value) {
    return !isNaN(parseInt(value, 10));
  }
  function divideu128(value) {
    var DIVISOR = Long.fromNumber(1e3 * 1e3 * 1e3);
    var _rem = Long.fromNumber(0);
    if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {
      return { quotient: value, rem: _rem };
    }
    for (var i = 0; i <= 3; i++) {
      _rem = _rem.shiftLeft(32);
      _rem = _rem.add(new Long(value.parts[i], 0));
      value.parts[i] = _rem.div(DIVISOR).low;
      _rem = _rem.modulo(DIVISOR);
    }
    return { quotient: value, rem: _rem };
  }
  function multiply64x2(left3, right3) {
    if (!left3 && !right3) {
      return { high: Long.fromNumber(0), low: Long.fromNumber(0) };
    }
    var leftHigh = left3.shiftRightUnsigned(32);
    var leftLow = new Long(left3.getLowBits(), 0);
    var rightHigh = right3.shiftRightUnsigned(32);
    var rightLow = new Long(right3.getLowBits(), 0);
    var productHigh = leftHigh.multiply(rightHigh);
    var productMid = leftHigh.multiply(rightLow);
    var productMid2 = leftLow.multiply(rightHigh);
    var productLow = leftLow.multiply(rightLow);
    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productMid = new Long(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));
    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));
    return { high: productHigh, low: productLow };
  }
  function lessThan(left3, right3) {
    var uhleft = left3.high >>> 0;
    var uhright = right3.high >>> 0;
    if (uhleft < uhright) {
      return true;
    } else if (uhleft === uhright) {
      var ulleft = left3.low >>> 0;
      var ulright = right3.low >>> 0;
      if (ulleft < ulright)
        return true;
    }
    return false;
  }
  function invalidErr(string, message) {
    throw new BSONTypeError('"' + string + '" is not a valid Decimal128 string - ' + message);
  }
  var Decimal128 = function() {
    function Decimal1282(bytes) {
      if (!(this instanceof Decimal1282))
        return new Decimal1282(bytes);
      if (typeof bytes === "string") {
        this.bytes = Decimal1282.fromString(bytes).bytes;
      } else {
        this.bytes = bytes;
      }
    }
    Decimal1282.fromString = function(representation) {
      var isNegative = false;
      var sawRadix = false;
      var foundNonZero = false;
      var significantDigits = 0;
      var nDigitsRead = 0;
      var nDigits = 0;
      var radixPosition = 0;
      var firstNonZero = 0;
      var digits = [0];
      var nDigitsStored = 0;
      var digitsInsert = 0;
      var firstDigit = 0;
      var lastDigit = 0;
      var exponent = 0;
      var i = 0;
      var significandHigh = new Long(0, 0);
      var significandLow = new Long(0, 0);
      var biasedExponent = 0;
      var index = 0;
      if (representation.length >= 7e3) {
        throw new BSONTypeError("" + representation + " not a valid Decimal128 string");
      }
      var stringMatch = representation.match(PARSE_STRING_REGEXP);
      var infMatch = representation.match(PARSE_INF_REGEXP);
      var nanMatch = representation.match(PARSE_NAN_REGEXP);
      if (!stringMatch && !infMatch && !nanMatch || representation.length === 0) {
        throw new BSONTypeError("" + representation + " not a valid Decimal128 string");
      }
      if (stringMatch) {
        var unsignedNumber = stringMatch[2];
        var e = stringMatch[4];
        var expSign = stringMatch[5];
        var expNumber = stringMatch[6];
        if (e && expNumber === void 0)
          invalidErr(representation, "missing exponent power");
        if (e && unsignedNumber === void 0)
          invalidErr(representation, "missing exponent base");
        if (e === void 0 && (expSign || expNumber)) {
          invalidErr(representation, "missing e before exponent");
        }
      }
      if (representation[index] === "+" || representation[index] === "-") {
        isNegative = representation[index++] === "-";
      }
      if (!isDigit(representation[index]) && representation[index] !== ".") {
        if (representation[index] === "i" || representation[index] === "I") {
          return new Decimal1282(buffer_1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
        } else if (representation[index] === "N") {
          return new Decimal1282(buffer_1.from(NAN_BUFFER));
        }
      }
      while (isDigit(representation[index]) || representation[index] === ".") {
        if (representation[index] === ".") {
          if (sawRadix)
            invalidErr(representation, "contains multiple periods");
          sawRadix = true;
          index = index + 1;
          continue;
        }
        if (nDigitsStored < 34) {
          if (representation[index] !== "0" || foundNonZero) {
            if (!foundNonZero) {
              firstNonZero = nDigitsRead;
            }
            foundNonZero = true;
            digits[digitsInsert++] = parseInt(representation[index], 10);
            nDigitsStored = nDigitsStored + 1;
          }
        }
        if (foundNonZero)
          nDigits = nDigits + 1;
        if (sawRadix)
          radixPosition = radixPosition + 1;
        nDigitsRead = nDigitsRead + 1;
        index = index + 1;
      }
      if (sawRadix && !nDigitsRead)
        throw new BSONTypeError("" + representation + " not a valid Decimal128 string");
      if (representation[index] === "e" || representation[index] === "E") {
        var match2 = representation.substr(++index).match(EXPONENT_REGEX);
        if (!match2 || !match2[2])
          return new Decimal1282(buffer_1.from(NAN_BUFFER));
        exponent = parseInt(match2[0], 10);
        index = index + match2[0].length;
      }
      if (representation[index])
        return new Decimal1282(buffer_1.from(NAN_BUFFER));
      firstDigit = 0;
      if (!nDigitsStored) {
        firstDigit = 0;
        lastDigit = 0;
        digits[0] = 0;
        nDigits = 1;
        nDigitsStored = 1;
        significantDigits = 0;
      } else {
        lastDigit = nDigitsStored - 1;
        significantDigits = nDigits;
        if (significantDigits !== 1) {
          while (digits[firstNonZero + significantDigits - 1] === 0) {
            significantDigits = significantDigits - 1;
          }
        }
      }
      if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {
        exponent = EXPONENT_MIN;
      } else {
        exponent = exponent - radixPosition;
      }
      while (exponent > EXPONENT_MAX) {
        lastDigit = lastDigit + 1;
        if (lastDigit - firstDigit > MAX_DIGITS) {
          var digitsString = digits.join("");
          if (digitsString.match(/^0+$/)) {
            exponent = EXPONENT_MAX;
            break;
          }
          invalidErr(representation, "overflow");
        }
        exponent = exponent - 1;
      }
      while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {
        if (lastDigit === 0 && significantDigits < nDigitsStored) {
          exponent = EXPONENT_MIN;
          significantDigits = 0;
          break;
        }
        if (nDigitsStored < nDigits) {
          nDigits = nDigits - 1;
        } else {
          lastDigit = lastDigit - 1;
        }
        if (exponent < EXPONENT_MAX) {
          exponent = exponent + 1;
        } else {
          var digitsString = digits.join("");
          if (digitsString.match(/^0+$/)) {
            exponent = EXPONENT_MAX;
            break;
          }
          invalidErr(representation, "overflow");
        }
      }
      if (lastDigit - firstDigit + 1 < significantDigits) {
        var endOfString = nDigitsRead;
        if (sawRadix) {
          firstNonZero = firstNonZero + 1;
          endOfString = endOfString + 1;
        }
        if (isNegative) {
          firstNonZero = firstNonZero + 1;
          endOfString = endOfString + 1;
        }
        var roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);
        var roundBit = 0;
        if (roundDigit >= 5) {
          roundBit = 1;
          if (roundDigit === 5) {
            roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;
            for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {
              if (parseInt(representation[i], 10)) {
                roundBit = 1;
                break;
              }
            }
          }
        }
        if (roundBit) {
          var dIdx = lastDigit;
          for (; dIdx >= 0; dIdx--) {
            if (++digits[dIdx] > 9) {
              digits[dIdx] = 0;
              if (dIdx === 0) {
                if (exponent < EXPONENT_MAX) {
                  exponent = exponent + 1;
                  digits[dIdx] = 1;
                } else {
                  return new Decimal1282(buffer_1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
                }
              }
            }
          }
        }
      }
      significandHigh = Long.fromNumber(0);
      significandLow = Long.fromNumber(0);
      if (significantDigits === 0) {
        significandHigh = Long.fromNumber(0);
        significandLow = Long.fromNumber(0);
      } else if (lastDigit - firstDigit < 17) {
        var dIdx = firstDigit;
        significandLow = Long.fromNumber(digits[dIdx++]);
        significandHigh = new Long(0, 0);
        for (; dIdx <= lastDigit; dIdx++) {
          significandLow = significandLow.multiply(Long.fromNumber(10));
          significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
        }
      } else {
        var dIdx = firstDigit;
        significandHigh = Long.fromNumber(digits[dIdx++]);
        for (; dIdx <= lastDigit - 17; dIdx++) {
          significandHigh = significandHigh.multiply(Long.fromNumber(10));
          significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));
        }
        significandLow = Long.fromNumber(digits[dIdx++]);
        for (; dIdx <= lastDigit; dIdx++) {
          significandLow = significandLow.multiply(Long.fromNumber(10));
          significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
        }
      }
      var significand = multiply64x2(significandHigh, Long.fromString("100000000000000000"));
      significand.low = significand.low.add(significandLow);
      if (lessThan(significand.low, significandLow)) {
        significand.high = significand.high.add(Long.fromNumber(1));
      }
      biasedExponent = exponent + EXPONENT_BIAS;
      var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };
      if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {
        dec.high = dec.high.or(Long.fromNumber(3).shiftLeft(61));
        dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(16383).shiftLeft(47)));
        dec.high = dec.high.or(significand.high.and(Long.fromNumber(140737488355327)));
      } else {
        dec.high = dec.high.or(Long.fromNumber(biasedExponent & 16383).shiftLeft(49));
        dec.high = dec.high.or(significand.high.and(Long.fromNumber(562949953421311)));
      }
      dec.low = significand.low;
      if (isNegative) {
        dec.high = dec.high.or(Long.fromString("9223372036854775808"));
      }
      var buffer2 = buffer_1.alloc(16);
      index = 0;
      buffer2[index++] = dec.low.low & 255;
      buffer2[index++] = dec.low.low >> 8 & 255;
      buffer2[index++] = dec.low.low >> 16 & 255;
      buffer2[index++] = dec.low.low >> 24 & 255;
      buffer2[index++] = dec.low.high & 255;
      buffer2[index++] = dec.low.high >> 8 & 255;
      buffer2[index++] = dec.low.high >> 16 & 255;
      buffer2[index++] = dec.low.high >> 24 & 255;
      buffer2[index++] = dec.high.low & 255;
      buffer2[index++] = dec.high.low >> 8 & 255;
      buffer2[index++] = dec.high.low >> 16 & 255;
      buffer2[index++] = dec.high.low >> 24 & 255;
      buffer2[index++] = dec.high.high & 255;
      buffer2[index++] = dec.high.high >> 8 & 255;
      buffer2[index++] = dec.high.high >> 16 & 255;
      buffer2[index++] = dec.high.high >> 24 & 255;
      return new Decimal1282(buffer2);
    };
    Decimal1282.prototype.toString = function() {
      var biased_exponent;
      var significand_digits = 0;
      var significand = new Array(36);
      for (var i = 0; i < significand.length; i++)
        significand[i] = 0;
      var index = 0;
      var is_zero = false;
      var significand_msb;
      var significand128 = { parts: [0, 0, 0, 0] };
      var j, k;
      var string = [];
      index = 0;
      var buffer2 = this.bytes;
      var low = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
      var midl = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
      var midh = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
      var high = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
      index = 0;
      var dec = {
        low: new Long(low, midl),
        high: new Long(midh, high)
      };
      if (dec.high.lessThan(Long.ZERO)) {
        string.push("-");
      }
      var combination = high >> 26 & COMBINATION_MASK;
      if (combination >> 3 === 3) {
        if (combination === COMBINATION_INFINITY) {
          return string.join("") + "Infinity";
        } else if (combination === COMBINATION_NAN) {
          return "NaN";
        } else {
          biased_exponent = high >> 15 & EXPONENT_MASK;
          significand_msb = 8 + (high >> 14 & 1);
        }
      } else {
        significand_msb = high >> 14 & 7;
        biased_exponent = high >> 17 & EXPONENT_MASK;
      }
      var exponent = biased_exponent - EXPONENT_BIAS;
      significand128.parts[0] = (high & 16383) + ((significand_msb & 15) << 14);
      significand128.parts[1] = midh;
      significand128.parts[2] = midl;
      significand128.parts[3] = low;
      if (significand128.parts[0] === 0 && significand128.parts[1] === 0 && significand128.parts[2] === 0 && significand128.parts[3] === 0) {
        is_zero = true;
      } else {
        for (k = 3; k >= 0; k--) {
          var least_digits = 0;
          var result = divideu128(significand128);
          significand128 = result.quotient;
          least_digits = result.rem.low;
          if (!least_digits)
            continue;
          for (j = 8; j >= 0; j--) {
            significand[k * 9 + j] = least_digits % 10;
            least_digits = Math.floor(least_digits / 10);
          }
        }
      }
      if (is_zero) {
        significand_digits = 1;
        significand[index] = 0;
      } else {
        significand_digits = 36;
        while (!significand[index]) {
          significand_digits = significand_digits - 1;
          index = index + 1;
        }
      }
      var scientific_exponent = significand_digits - 1 + exponent;
      if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {
        if (significand_digits > 34) {
          string.push("" + 0);
          if (exponent > 0)
            string.push("E+" + exponent);
          else if (exponent < 0)
            string.push("E" + exponent);
          return string.join("");
        }
        string.push("" + significand[index++]);
        significand_digits = significand_digits - 1;
        if (significand_digits) {
          string.push(".");
        }
        for (var i = 0; i < significand_digits; i++) {
          string.push("" + significand[index++]);
        }
        string.push("E");
        if (scientific_exponent > 0) {
          string.push("+" + scientific_exponent);
        } else {
          string.push("" + scientific_exponent);
        }
      } else {
        if (exponent >= 0) {
          for (var i = 0; i < significand_digits; i++) {
            string.push("" + significand[index++]);
          }
        } else {
          var radix_position = significand_digits + exponent;
          if (radix_position > 0) {
            for (var i = 0; i < radix_position; i++) {
              string.push("" + significand[index++]);
            }
          } else {
            string.push("0");
          }
          string.push(".");
          while (radix_position++ < 0) {
            string.push("0");
          }
          for (var i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {
            string.push("" + significand[index++]);
          }
        }
      }
      return string.join("");
    };
    Decimal1282.prototype.toJSON = function() {
      return { $numberDecimal: this.toString() };
    };
    Decimal1282.prototype.toExtendedJSON = function() {
      return { $numberDecimal: this.toString() };
    };
    Decimal1282.fromExtendedJSON = function(doc) {
      return Decimal1282.fromString(doc.$numberDecimal);
    };
    Decimal1282.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    Decimal1282.prototype.inspect = function() {
      return 'new Decimal128("' + this.toString() + '")';
    };
    return Decimal1282;
  }();
  Object.defineProperty(Decimal128.prototype, "_bsontype", { value: "Decimal128" });
  var Double = function() {
    function Double2(value) {
      if (!(this instanceof Double2))
        return new Double2(value);
      if (value instanceof Number) {
        value = value.valueOf();
      }
      this.value = +value;
    }
    Double2.prototype.valueOf = function() {
      return this.value;
    };
    Double2.prototype.toJSON = function() {
      return this.value;
    };
    Double2.prototype.toString = function(radix) {
      return this.value.toString(radix);
    };
    Double2.prototype.toExtendedJSON = function(options) {
      if (options && (options.legacy || options.relaxed && isFinite(this.value))) {
        return this.value;
      }
      if (Object.is(Math.sign(this.value), -0)) {
        return { $numberDouble: "-" + this.value.toFixed(1) };
      }
      var $numberDouble;
      if (Number.isInteger(this.value)) {
        $numberDouble = this.value.toFixed(1);
        if ($numberDouble.length >= 13) {
          $numberDouble = this.value.toExponential(13).toUpperCase();
        }
      } else {
        $numberDouble = this.value.toString();
      }
      return { $numberDouble };
    };
    Double2.fromExtendedJSON = function(doc, options) {
      var doubleValue = parseFloat(doc.$numberDouble);
      return options && options.relaxed ? doubleValue : new Double2(doubleValue);
    };
    Double2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    Double2.prototype.inspect = function() {
      var eJSON = this.toExtendedJSON();
      return "new Double(" + eJSON.$numberDouble + ")";
    };
    return Double2;
  }();
  Object.defineProperty(Double.prototype, "_bsontype", { value: "Double" });
  var Int32 = function() {
    function Int322(value) {
      if (!(this instanceof Int322))
        return new Int322(value);
      if (value instanceof Number) {
        value = value.valueOf();
      }
      this.value = +value;
    }
    Int322.prototype.valueOf = function() {
      return this.value;
    };
    Int322.prototype.toString = function(radix) {
      return this.value.toString(radix);
    };
    Int322.prototype.toJSON = function() {
      return this.value;
    };
    Int322.prototype.toExtendedJSON = function(options) {
      if (options && (options.relaxed || options.legacy))
        return this.value;
      return { $numberInt: this.value.toString() };
    };
    Int322.fromExtendedJSON = function(doc, options) {
      return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int322(doc.$numberInt);
    };
    Int322.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    Int322.prototype.inspect = function() {
      return "new Int32(" + this.valueOf() + ")";
    };
    return Int322;
  }();
  Object.defineProperty(Int32.prototype, "_bsontype", { value: "Int32" });
  var MaxKey = function() {
    function MaxKey2() {
      if (!(this instanceof MaxKey2))
        return new MaxKey2();
    }
    MaxKey2.prototype.toExtendedJSON = function() {
      return { $maxKey: 1 };
    };
    MaxKey2.fromExtendedJSON = function() {
      return new MaxKey2();
    };
    MaxKey2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    MaxKey2.prototype.inspect = function() {
      return "new MaxKey()";
    };
    return MaxKey2;
  }();
  Object.defineProperty(MaxKey.prototype, "_bsontype", { value: "MaxKey" });
  var MinKey = function() {
    function MinKey2() {
      if (!(this instanceof MinKey2))
        return new MinKey2();
    }
    MinKey2.prototype.toExtendedJSON = function() {
      return { $minKey: 1 };
    };
    MinKey2.fromExtendedJSON = function() {
      return new MinKey2();
    };
    MinKey2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    MinKey2.prototype.inspect = function() {
      return "new MinKey()";
    };
    return MinKey2;
  }();
  Object.defineProperty(MinKey.prototype, "_bsontype", { value: "MinKey" });
  var checkForHexRegExp = new RegExp("^[0-9a-fA-F]{24}$");
  var PROCESS_UNIQUE = null;
  var kId = Symbol("id");
  var ObjectId = function() {
    function ObjectId2(id) {
      if (!(this instanceof ObjectId2))
        return new ObjectId2(id);
      if (id instanceof ObjectId2) {
        this[kId] = id.id;
        this.__id = id.__id;
      }
      if (typeof id === "object" && id && "id" in id) {
        if ("toHexString" in id && typeof id.toHexString === "function") {
          this[kId] = buffer_1.from(id.toHexString(), "hex");
        } else {
          this[kId] = typeof id.id === "string" ? buffer_1.from(id.id) : id.id;
        }
      }
      if (id == null || typeof id === "number") {
        this[kId] = ObjectId2.generate(typeof id === "number" ? id : void 0);
        if (ObjectId2.cacheHexString) {
          this.__id = this.id.toString("hex");
        }
      }
      if (ArrayBuffer.isView(id) && id.byteLength === 12) {
        this[kId] = ensureBuffer(id);
      }
      if (typeof id === "string") {
        if (id.length === 12) {
          var bytes = buffer_1.from(id);
          if (bytes.byteLength === 12) {
            this[kId] = bytes;
          }
        } else if (id.length === 24 && checkForHexRegExp.test(id)) {
          this[kId] = buffer_1.from(id, "hex");
        } else {
          throw new BSONTypeError("Argument passed in must be a Buffer or string of 12 bytes or a string of 24 hex characters");
        }
      }
      if (ObjectId2.cacheHexString) {
        this.__id = this.id.toString("hex");
      }
    }
    Object.defineProperty(ObjectId2.prototype, "id", {
      get: function() {
        return this[kId];
      },
      set: function(value) {
        this[kId] = value;
        if (ObjectId2.cacheHexString) {
          this.__id = value.toString("hex");
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ObjectId2.prototype, "generationTime", {
      get: function() {
        return this.id.readInt32BE(0);
      },
      set: function(value) {
        this.id.writeUInt32BE(value, 0);
      },
      enumerable: false,
      configurable: true
    });
    ObjectId2.prototype.toHexString = function() {
      if (ObjectId2.cacheHexString && this.__id) {
        return this.__id;
      }
      var hexString = this.id.toString("hex");
      if (ObjectId2.cacheHexString && !this.__id) {
        this.__id = hexString;
      }
      return hexString;
    };
    ObjectId2.getInc = function() {
      return ObjectId2.index = (ObjectId2.index + 1) % 16777215;
    };
    ObjectId2.generate = function(time) {
      if (typeof time !== "number") {
        time = ~~(Date.now() / 1e3);
      }
      var inc = ObjectId2.getInc();
      var buffer2 = buffer_1.alloc(12);
      buffer2.writeUInt32BE(time, 0);
      if (PROCESS_UNIQUE === null) {
        PROCESS_UNIQUE = randomBytes(5);
      }
      buffer2[4] = PROCESS_UNIQUE[0];
      buffer2[5] = PROCESS_UNIQUE[1];
      buffer2[6] = PROCESS_UNIQUE[2];
      buffer2[7] = PROCESS_UNIQUE[3];
      buffer2[8] = PROCESS_UNIQUE[4];
      buffer2[11] = inc & 255;
      buffer2[10] = inc >> 8 & 255;
      buffer2[9] = inc >> 16 & 255;
      return buffer2;
    };
    ObjectId2.prototype.toString = function(format2) {
      if (format2)
        return this.id.toString(format2);
      return this.toHexString();
    };
    ObjectId2.prototype.toJSON = function() {
      return this.toHexString();
    };
    ObjectId2.prototype.equals = function(otherId) {
      if (otherId === void 0 || otherId === null) {
        return false;
      }
      if (otherId instanceof ObjectId2) {
        return this.toString() === otherId.toString();
      }
      if (typeof otherId === "string" && ObjectId2.isValid(otherId) && otherId.length === 12 && isUint8Array(this.id)) {
        return otherId === buffer_1.prototype.toString.call(this.id, "latin1");
      }
      if (typeof otherId === "string" && ObjectId2.isValid(otherId) && otherId.length === 24) {
        return otherId.toLowerCase() === this.toHexString();
      }
      if (typeof otherId === "string" && ObjectId2.isValid(otherId) && otherId.length === 12) {
        return buffer_1.from(otherId).equals(this.id);
      }
      if (typeof otherId === "object" && "toHexString" in otherId && typeof otherId.toHexString === "function") {
        return otherId.toHexString() === this.toHexString();
      }
      return false;
    };
    ObjectId2.prototype.getTimestamp = function() {
      var timestamp = new Date();
      var time = this.id.readUInt32BE(0);
      timestamp.setTime(Math.floor(time) * 1e3);
      return timestamp;
    };
    ObjectId2.createPk = function() {
      return new ObjectId2();
    };
    ObjectId2.createFromTime = function(time) {
      var buffer2 = buffer_1.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
      buffer2.writeUInt32BE(time, 0);
      return new ObjectId2(buffer2);
    };
    ObjectId2.createFromHexString = function(hexString) {
      if (typeof hexString === "undefined" || hexString != null && hexString.length !== 24) {
        throw new BSONTypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
      }
      return new ObjectId2(buffer_1.from(hexString, "hex"));
    };
    ObjectId2.isValid = function(id) {
      if (id == null)
        return false;
      if (typeof id === "number") {
        return true;
      }
      if (typeof id === "string") {
        return id.length === 12 || id.length === 24 && checkForHexRegExp.test(id);
      }
      if (id instanceof ObjectId2) {
        return true;
      }
      if (isUint8Array(id) && id.length === 12) {
        return true;
      }
      if (typeof id === "object" && "toHexString" in id && typeof id.toHexString === "function") {
        if (typeof id.id === "string") {
          return id.id.length === 12;
        }
        return id.toHexString().length === 24 && checkForHexRegExp.test(id.id.toString("hex"));
      }
      return false;
    };
    ObjectId2.prototype.toExtendedJSON = function() {
      if (this.toHexString)
        return { $oid: this.toHexString() };
      return { $oid: this.toString("hex") };
    };
    ObjectId2.fromExtendedJSON = function(doc) {
      return new ObjectId2(doc.$oid);
    };
    ObjectId2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    ObjectId2.prototype.inspect = function() {
      return 'new ObjectId("' + this.toHexString() + '")';
    };
    ObjectId2.index = ~~(Math.random() * 16777215);
    return ObjectId2;
  }();
  Object.defineProperty(ObjectId.prototype, "generate", {
    value: deprecate(function(time) {
      return ObjectId.generate(time);
    }, "Please use the static `ObjectId.generate(time)` instead")
  });
  Object.defineProperty(ObjectId.prototype, "getInc", {
    value: deprecate(function() {
      return ObjectId.getInc();
    }, "Please use the static `ObjectId.getInc()` instead")
  });
  Object.defineProperty(ObjectId.prototype, "get_inc", {
    value: deprecate(function() {
      return ObjectId.getInc();
    }, "Please use the static `ObjectId.getInc()` instead")
  });
  Object.defineProperty(ObjectId, "get_inc", {
    value: deprecate(function() {
      return ObjectId.getInc();
    }, "Please use the static `ObjectId.getInc()` instead")
  });
  Object.defineProperty(ObjectId.prototype, "_bsontype", { value: "ObjectID" });
  function alphabetize(str) {
    return str.split("").sort().join("");
  }
  var BSONRegExp = function() {
    function BSONRegExp2(pattern, options) {
      if (!(this instanceof BSONRegExp2))
        return new BSONRegExp2(pattern, options);
      this.pattern = pattern;
      this.options = alphabetize(options !== null && options !== void 0 ? options : "");
      if (this.pattern.indexOf("\0") !== -1) {
        throw new BSONError("BSON Regex patterns cannot contain null bytes, found: " + JSON.stringify(this.pattern));
      }
      if (this.options.indexOf("\0") !== -1) {
        throw new BSONError("BSON Regex options cannot contain null bytes, found: " + JSON.stringify(this.options));
      }
      for (var i = 0; i < this.options.length; i++) {
        if (!(this.options[i] === "i" || this.options[i] === "m" || this.options[i] === "x" || this.options[i] === "l" || this.options[i] === "s" || this.options[i] === "u")) {
          throw new BSONError("The regular expression option [" + this.options[i] + "] is not supported");
        }
      }
    }
    BSONRegExp2.parseOptions = function(options) {
      return options ? options.split("").sort().join("") : "";
    };
    BSONRegExp2.prototype.toExtendedJSON = function(options) {
      options = options || {};
      if (options.legacy) {
        return { $regex: this.pattern, $options: this.options };
      }
      return { $regularExpression: { pattern: this.pattern, options: this.options } };
    };
    BSONRegExp2.fromExtendedJSON = function(doc) {
      if ("$regex" in doc) {
        if (typeof doc.$regex !== "string") {
          if (doc.$regex._bsontype === "BSONRegExp") {
            return doc;
          }
        } else {
          return new BSONRegExp2(doc.$regex, BSONRegExp2.parseOptions(doc.$options));
        }
      }
      if ("$regularExpression" in doc) {
        return new BSONRegExp2(doc.$regularExpression.pattern, BSONRegExp2.parseOptions(doc.$regularExpression.options));
      }
      throw new BSONTypeError("Unexpected BSONRegExp EJSON object form: " + JSON.stringify(doc));
    };
    return BSONRegExp2;
  }();
  Object.defineProperty(BSONRegExp.prototype, "_bsontype", { value: "BSONRegExp" });
  var BSONSymbol = function() {
    function BSONSymbol2(value) {
      if (!(this instanceof BSONSymbol2))
        return new BSONSymbol2(value);
      this.value = value;
    }
    BSONSymbol2.prototype.valueOf = function() {
      return this.value;
    };
    BSONSymbol2.prototype.toString = function() {
      return this.value;
    };
    BSONSymbol2.prototype.inspect = function() {
      return 'new BSONSymbol("' + this.value + '")';
    };
    BSONSymbol2.prototype.toJSON = function() {
      return this.value;
    };
    BSONSymbol2.prototype.toExtendedJSON = function() {
      return { $symbol: this.value };
    };
    BSONSymbol2.fromExtendedJSON = function(doc) {
      return new BSONSymbol2(doc.$symbol);
    };
    BSONSymbol2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    return BSONSymbol2;
  }();
  Object.defineProperty(BSONSymbol.prototype, "_bsontype", { value: "Symbol" });
  var LongWithoutOverridesClass = Long;
  var Timestamp = function(_super) {
    __extends(Timestamp2, _super);
    function Timestamp2(low, high) {
      var _this = this;
      if (!(_this instanceof Timestamp2))
        return new Timestamp2(low, high);
      if (Long.isLong(low)) {
        _this = _super.call(this, low.low, low.high, true) || this;
      } else if (isObjectLike(low) && typeof low.t !== "undefined" && typeof low.i !== "undefined") {
        _this = _super.call(this, low.i, low.t, true) || this;
      } else {
        _this = _super.call(this, low, high, true) || this;
      }
      Object.defineProperty(_this, "_bsontype", {
        value: "Timestamp",
        writable: false,
        configurable: false,
        enumerable: false
      });
      return _this;
    }
    Timestamp2.prototype.toJSON = function() {
      return {
        $timestamp: this.toString()
      };
    };
    Timestamp2.fromInt = function(value) {
      return new Timestamp2(Long.fromInt(value, true));
    };
    Timestamp2.fromNumber = function(value) {
      return new Timestamp2(Long.fromNumber(value, true));
    };
    Timestamp2.fromBits = function(lowBits, highBits) {
      return new Timestamp2(lowBits, highBits);
    };
    Timestamp2.fromString = function(str, optRadix) {
      return new Timestamp2(Long.fromString(str, true, optRadix));
    };
    Timestamp2.prototype.toExtendedJSON = function() {
      return { $timestamp: { t: this.high >>> 0, i: this.low >>> 0 } };
    };
    Timestamp2.fromExtendedJSON = function(doc) {
      return new Timestamp2(doc.$timestamp);
    };
    Timestamp2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return this.inspect();
    };
    Timestamp2.prototype.inspect = function() {
      return "new Timestamp({ t: " + this.getHighBits() + ", i: " + this.getLowBits() + " })";
    };
    Timestamp2.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;
    return Timestamp2;
  }(LongWithoutOverridesClass);
  function isBSONType(value) {
    return isObjectLike(value) && Reflect.has(value, "_bsontype") && typeof value._bsontype === "string";
  }
  var BSON_INT32_MAX$1 = 2147483647;
  var BSON_INT32_MIN$1 = -2147483648;
  var BSON_INT64_MAX$1 = 9223372036854776e3;
  var BSON_INT64_MIN$1 = -9223372036854776e3;
  var keysToCodecs = {
    $oid: ObjectId,
    $binary: Binary,
    $uuid: Binary,
    $symbol: BSONSymbol,
    $numberInt: Int32,
    $numberDecimal: Decimal128,
    $numberDouble: Double,
    $numberLong: Long,
    $minKey: MinKey,
    $maxKey: MaxKey,
    $regex: BSONRegExp,
    $regularExpression: BSONRegExp,
    $timestamp: Timestamp
  };
  function deserializeValue(value, options) {
    if (options === void 0) {
      options = {};
    }
    if (typeof value === "number") {
      if (options.relaxed || options.legacy) {
        return value;
      }
      if (Math.floor(value) === value) {
        if (value >= BSON_INT32_MIN$1 && value <= BSON_INT32_MAX$1)
          return new Int32(value);
        if (value >= BSON_INT64_MIN$1 && value <= BSON_INT64_MAX$1)
          return Long.fromNumber(value);
      }
      return new Double(value);
    }
    if (value == null || typeof value !== "object")
      return value;
    if (value.$undefined)
      return null;
    var keys = Object.keys(value).filter(function(k) {
      return k.startsWith("$") && value[k] != null;
    });
    for (var i = 0; i < keys.length; i++) {
      var c = keysToCodecs[keys[i]];
      if (c)
        return c.fromExtendedJSON(value, options);
    }
    if (value.$date != null) {
      var d = value.$date;
      var date = new Date();
      if (options.legacy) {
        if (typeof d === "number")
          date.setTime(d);
        else if (typeof d === "string")
          date.setTime(Date.parse(d));
      } else {
        if (typeof d === "string")
          date.setTime(Date.parse(d));
        else if (Long.isLong(d))
          date.setTime(d.toNumber());
        else if (typeof d === "number" && options.relaxed)
          date.setTime(d);
      }
      return date;
    }
    if (value.$code != null) {
      var copy2 = Object.assign({}, value);
      if (value.$scope) {
        copy2.$scope = deserializeValue(value.$scope);
      }
      return Code.fromExtendedJSON(value);
    }
    if (isDBRefLike(value) || value.$dbPointer) {
      var v = value.$ref ? value : value.$dbPointer;
      if (v instanceof DBRef)
        return v;
      var dollarKeys = Object.keys(v).filter(function(k) {
        return k.startsWith("$");
      });
      var valid_1 = true;
      dollarKeys.forEach(function(k) {
        if (["$ref", "$id", "$db"].indexOf(k) === -1)
          valid_1 = false;
      });
      if (valid_1)
        return DBRef.fromExtendedJSON(v);
    }
    return value;
  }
  function serializeArray(array, options) {
    return array.map(function(v, index) {
      options.seenObjects.push({ propertyName: "index " + index, obj: null });
      try {
        return serializeValue(v, options);
      } finally {
        options.seenObjects.pop();
      }
    });
  }
  function getISOString(date) {
    var isoStr = date.toISOString();
    return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + "Z";
  }
  function serializeValue(value, options) {
    if ((typeof value === "object" || typeof value === "function") && value !== null) {
      var index = options.seenObjects.findIndex(function(entry) {
        return entry.obj === value;
      });
      if (index !== -1) {
        var props = options.seenObjects.map(function(entry) {
          return entry.propertyName;
        });
        var leadingPart = props.slice(0, index).map(function(prop) {
          return prop + " -> ";
        }).join("");
        var alreadySeen = props[index];
        var circularPart = " -> " + props.slice(index + 1, props.length - 1).map(function(prop) {
          return prop + " -> ";
        }).join("");
        var current = props[props.length - 1];
        var leadingSpace = " ".repeat(leadingPart.length + alreadySeen.length / 2);
        var dashes = "-".repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);
        throw new BSONTypeError("Converting circular structure to EJSON:\n" + ("    " + leadingPart + alreadySeen + circularPart + current + "\n") + ("    " + leadingSpace + "\\" + dashes + "/"));
      }
      options.seenObjects[options.seenObjects.length - 1].obj = value;
    }
    if (Array.isArray(value))
      return serializeArray(value, options);
    if (value === void 0)
      return null;
    if (value instanceof Date || isDate(value)) {
      var dateNum = value.getTime(), inRange = dateNum > -1 && dateNum < 2534023188e5;
      if (options.legacy) {
        return options.relaxed && inRange ? { $date: value.getTime() } : { $date: getISOString(value) };
      }
      return options.relaxed && inRange ? { $date: getISOString(value) } : { $date: { $numberLong: value.getTime().toString() } };
    }
    if (typeof value === "number" && (!options.relaxed || !isFinite(value))) {
      if (Math.floor(value) === value) {
        var int32Range = value >= BSON_INT32_MIN$1 && value <= BSON_INT32_MAX$1, int64Range = value >= BSON_INT64_MIN$1 && value <= BSON_INT64_MAX$1;
        if (int32Range)
          return { $numberInt: value.toString() };
        if (int64Range)
          return { $numberLong: value.toString() };
      }
      return { $numberDouble: value.toString() };
    }
    if (value instanceof RegExp || isRegExp(value)) {
      var flags = value.flags;
      if (flags === void 0) {
        var match2 = value.toString().match(/[gimuy]*$/);
        if (match2) {
          flags = match2[0];
        }
      }
      var rx = new BSONRegExp(value.source, flags);
      return rx.toExtendedJSON(options);
    }
    if (value != null && typeof value === "object")
      return serializeDocument(value, options);
    return value;
  }
  var BSON_TYPE_MAPPINGS = {
    Binary: function(o) {
      return new Binary(o.value(), o.sub_type);
    },
    Code: function(o) {
      return new Code(o.code, o.scope);
    },
    DBRef: function(o) {
      return new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields);
    },
    Decimal128: function(o) {
      return new Decimal128(o.bytes);
    },
    Double: function(o) {
      return new Double(o.value);
    },
    Int32: function(o) {
      return new Int32(o.value);
    },
    Long: function(o) {
      return Long.fromBits(o.low != null ? o.low : o.low_, o.low != null ? o.high : o.high_, o.low != null ? o.unsigned : o.unsigned_);
    },
    MaxKey: function() {
      return new MaxKey();
    },
    MinKey: function() {
      return new MinKey();
    },
    ObjectID: function(o) {
      return new ObjectId(o);
    },
    ObjectId: function(o) {
      return new ObjectId(o);
    },
    BSONRegExp: function(o) {
      return new BSONRegExp(o.pattern, o.options);
    },
    Symbol: function(o) {
      return new BSONSymbol(o.value);
    },
    Timestamp: function(o) {
      return Timestamp.fromBits(o.low, o.high);
    }
  };
  function serializeDocument(doc, options) {
    if (doc == null || typeof doc !== "object")
      throw new BSONError("not an object instance");
    var bsontype = doc._bsontype;
    if (typeof bsontype === "undefined") {
      var _doc = {};
      for (var name in doc) {
        options.seenObjects.push({ propertyName: name, obj: null });
        try {
          _doc[name] = serializeValue(doc[name], options);
        } finally {
          options.seenObjects.pop();
        }
      }
      return _doc;
    } else if (isBSONType(doc)) {
      var outDoc = doc;
      if (typeof outDoc.toExtendedJSON !== "function") {
        var mapper = BSON_TYPE_MAPPINGS[doc._bsontype];
        if (!mapper) {
          throw new BSONTypeError("Unrecognized or invalid _bsontype: " + doc._bsontype);
        }
        outDoc = mapper(outDoc);
      }
      if (bsontype === "Code" && outDoc.scope) {
        outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));
      } else if (bsontype === "DBRef" && outDoc.oid) {
        outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));
      }
      return outDoc.toExtendedJSON(options);
    } else {
      throw new BSONError("_bsontype must be a string, but was: " + typeof bsontype);
    }
  }
  var EJSON;
  (function(EJSON2) {
    function parse2(text, options) {
      var finalOptions = Object.assign({}, { relaxed: true, legacy: false }, options);
      if (typeof finalOptions.relaxed === "boolean")
        finalOptions.strict = !finalOptions.relaxed;
      if (typeof finalOptions.strict === "boolean")
        finalOptions.relaxed = !finalOptions.strict;
      return JSON.parse(text, function(key, value) {
        if (key.indexOf("\0") !== -1) {
          throw new BSONError("BSON Document field names cannot contain null bytes, found: " + JSON.stringify(key));
        }
        return deserializeValue(value, finalOptions);
      });
    }
    EJSON2.parse = parse2;
    function stringify2(value, replacer, space, options) {
      if (space != null && typeof space === "object") {
        options = space;
        space = 0;
      }
      if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
        options = replacer;
        replacer = void 0;
        space = 0;
      }
      var serializeOptions = Object.assign({ relaxed: true, legacy: false }, options, {
        seenObjects: [{ propertyName: "(root)", obj: null }]
      });
      var doc = serializeValue(value, serializeOptions);
      return JSON.stringify(doc, replacer, space);
    }
    EJSON2.stringify = stringify2;
    function serialize3(value, options) {
      options = options || {};
      return JSON.parse(stringify2(value, options));
    }
    EJSON2.serialize = serialize3;
    function deserialize2(ejson, options) {
      options = options || {};
      return parse2(JSON.stringify(ejson), options);
    }
    EJSON2.deserialize = deserialize2;
  })(EJSON || (EJSON = {}));
  var bsonMap;
  var bsonGlobal = getGlobal();
  if (bsonGlobal.Map) {
    bsonMap = bsonGlobal.Map;
  } else {
    bsonMap = function() {
      function Map2(array) {
        if (array === void 0) {
          array = [];
        }
        this._keys = [];
        this._values = {};
        for (var i = 0; i < array.length; i++) {
          if (array[i] == null)
            continue;
          var entry = array[i];
          var key = entry[0];
          var value = entry[1];
          this._keys.push(key);
          this._values[key] = { v: value, i: this._keys.length - 1 };
        }
      }
      Map2.prototype.clear = function() {
        this._keys = [];
        this._values = {};
      };
      Map2.prototype.delete = function(key) {
        var value = this._values[key];
        if (value == null)
          return false;
        delete this._values[key];
        this._keys.splice(value.i, 1);
        return true;
      };
      Map2.prototype.entries = function() {
        var _this = this;
        var index = 0;
        return {
          next: function() {
            var key = _this._keys[index++];
            return {
              value: key !== void 0 ? [key, _this._values[key].v] : void 0,
              done: key !== void 0 ? false : true
            };
          }
        };
      };
      Map2.prototype.forEach = function(callback, self2) {
        self2 = self2 || this;
        for (var i = 0; i < this._keys.length; i++) {
          var key = this._keys[i];
          callback.call(self2, this._values[key].v, key, self2);
        }
      };
      Map2.prototype.get = function(key) {
        return this._values[key] ? this._values[key].v : void 0;
      };
      Map2.prototype.has = function(key) {
        return this._values[key] != null;
      };
      Map2.prototype.keys = function() {
        var _this = this;
        var index = 0;
        return {
          next: function() {
            var key = _this._keys[index++];
            return {
              value: key !== void 0 ? key : void 0,
              done: key !== void 0 ? false : true
            };
          }
        };
      };
      Map2.prototype.set = function(key, value) {
        if (this._values[key]) {
          this._values[key].v = value;
          return this;
        }
        this._keys.push(key);
        this._values[key] = { v: value, i: this._keys.length - 1 };
        return this;
      };
      Map2.prototype.values = function() {
        var _this = this;
        var index = 0;
        return {
          next: function() {
            var key = _this._keys[index++];
            return {
              value: key !== void 0 ? _this._values[key].v : void 0,
              done: key !== void 0 ? false : true
            };
          }
        };
      };
      Object.defineProperty(Map2.prototype, "size", {
        get: function() {
          return this._keys.length;
        },
        enumerable: false,
        configurable: true
      });
      return Map2;
    }();
  }
  var BSON_INT32_MAX = 2147483647;
  var BSON_INT32_MIN = -2147483648;
  var BSON_INT64_MAX = Math.pow(2, 63) - 1;
  var BSON_INT64_MIN = -Math.pow(2, 63);
  var JS_INT_MAX = Math.pow(2, 53);
  var JS_INT_MIN = -Math.pow(2, 53);
  var BSON_DATA_NUMBER = 1;
  var BSON_DATA_STRING = 2;
  var BSON_DATA_OBJECT = 3;
  var BSON_DATA_ARRAY = 4;
  var BSON_DATA_BINARY = 5;
  var BSON_DATA_UNDEFINED = 6;
  var BSON_DATA_OID = 7;
  var BSON_DATA_BOOLEAN = 8;
  var BSON_DATA_DATE = 9;
  var BSON_DATA_NULL = 10;
  var BSON_DATA_REGEXP = 11;
  var BSON_DATA_DBPOINTER = 12;
  var BSON_DATA_CODE = 13;
  var BSON_DATA_SYMBOL = 14;
  var BSON_DATA_CODE_W_SCOPE = 15;
  var BSON_DATA_INT = 16;
  var BSON_DATA_TIMESTAMP = 17;
  var BSON_DATA_LONG = 18;
  var BSON_DATA_DECIMAL128 = 19;
  var BSON_DATA_MIN_KEY = 255;
  var BSON_DATA_MAX_KEY = 127;
  var BSON_BINARY_SUBTYPE_DEFAULT = 0;
  var FIRST_BIT = 128;
  var FIRST_TWO_BITS = 192;
  var FIRST_THREE_BITS = 224;
  var FIRST_FOUR_BITS = 240;
  var FIRST_FIVE_BITS = 248;
  var TWO_BIT_CHAR = 192;
  var THREE_BIT_CHAR = 224;
  var FOUR_BIT_CHAR = 240;
  var CONTINUING_CHAR = 128;
  function validateUtf8(bytes, start2, end2) {
    var continuation = 0;
    for (var i = start2; i < end2; i += 1) {
      var byte = bytes[i];
      if (continuation) {
        if ((byte & FIRST_TWO_BITS) !== CONTINUING_CHAR) {
          return false;
        }
        continuation -= 1;
      } else if (byte & FIRST_BIT) {
        if ((byte & FIRST_THREE_BITS) === TWO_BIT_CHAR) {
          continuation = 1;
        } else if ((byte & FIRST_FOUR_BITS) === THREE_BIT_CHAR) {
          continuation = 2;
        } else if ((byte & FIRST_FIVE_BITS) === FOUR_BIT_CHAR) {
          continuation = 3;
        } else {
          return false;
        }
      }
    }
    return !continuation;
  }
  var JS_INT_MAX_LONG = Long.fromNumber(JS_INT_MAX);
  var JS_INT_MIN_LONG = Long.fromNumber(JS_INT_MIN);
  var functionCache = {};
  function deserialize$1(buffer2, options, isArray) {
    options = options == null ? {} : options;
    var index = options && options.index ? options.index : 0;
    var size = buffer2[index] | buffer2[index + 1] << 8 | buffer2[index + 2] << 16 | buffer2[index + 3] << 24;
    if (size < 5) {
      throw new BSONError("bson size must be >= 5, is " + size);
    }
    if (options.allowObjectSmallerThanBufferSize && buffer2.length < size) {
      throw new BSONError("buffer length " + buffer2.length + " must be >= bson size " + size);
    }
    if (!options.allowObjectSmallerThanBufferSize && buffer2.length !== size) {
      throw new BSONError("buffer length " + buffer2.length + " must === bson size " + size);
    }
    if (size + index > buffer2.byteLength) {
      throw new BSONError("(bson size " + size + " + options.index " + index + " must be <= buffer length " + buffer2.byteLength + ")");
    }
    if (buffer2[index + size - 1] !== 0) {
      throw new BSONError("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");
    }
    return deserializeObject(buffer2, index, options, isArray);
  }
  var allowedDBRefKeys = /^\$ref$|^\$id$|^\$db$/;
  function deserializeObject(buffer2, index, options, isArray) {
    if (isArray === void 0) {
      isArray = false;
    }
    var evalFunctions = options["evalFunctions"] == null ? false : options["evalFunctions"];
    var cacheFunctions = options["cacheFunctions"] == null ? false : options["cacheFunctions"];
    var fieldsAsRaw = options["fieldsAsRaw"] == null ? null : options["fieldsAsRaw"];
    var raw = options["raw"] == null ? false : options["raw"];
    var bsonRegExp = typeof options["bsonRegExp"] === "boolean" ? options["bsonRegExp"] : false;
    var promoteBuffers = options["promoteBuffers"] == null ? false : options["promoteBuffers"];
    var promoteLongs = options["promoteLongs"] == null ? true : options["promoteLongs"];
    var promoteValues = options["promoteValues"] == null ? true : options["promoteValues"];
    var startIndex = index;
    if (buffer2.length < 5)
      throw new BSONError("corrupt bson message < 5 bytes long");
    var size = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
    if (size < 5 || size > buffer2.length)
      throw new BSONError("corrupt bson message");
    var object = isArray ? [] : {};
    var arrayIndex = 0;
    var done = false;
    var isPossibleDBRef = isArray ? false : null;
    while (!done) {
      var elementType = buffer2[index++];
      if (elementType === 0)
        break;
      var i = index;
      while (buffer2[i] !== 0 && i < buffer2.length) {
        i++;
      }
      if (i >= buffer2.byteLength)
        throw new BSONError("Bad BSON Document: illegal CString");
      var name = isArray ? arrayIndex++ : buffer2.toString("utf8", index, i);
      if (isPossibleDBRef !== false && name[0] === "$") {
        isPossibleDBRef = allowedDBRefKeys.test(name);
      }
      var value = void 0;
      index = i + 1;
      if (elementType === BSON_DATA_STRING) {
        var stringSize = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        if (stringSize <= 0 || stringSize > buffer2.length - index || buffer2[index + stringSize - 1] !== 0) {
          throw new BSONError("bad string length in bson");
        }
        value = getValidatedString(buffer2, index, index + stringSize - 1);
        index = index + stringSize;
      } else if (elementType === BSON_DATA_OID) {
        var oid = buffer_1.alloc(12);
        buffer2.copy(oid, 0, index, index + 12);
        value = new ObjectId(oid);
        index = index + 12;
      } else if (elementType === BSON_DATA_INT && promoteValues === false) {
        value = new Int32(buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24);
      } else if (elementType === BSON_DATA_INT) {
        value = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
      } else if (elementType === BSON_DATA_NUMBER && promoteValues === false) {
        value = new Double(buffer2.readDoubleLE(index));
        index = index + 8;
      } else if (elementType === BSON_DATA_NUMBER) {
        value = buffer2.readDoubleLE(index);
        index = index + 8;
      } else if (elementType === BSON_DATA_DATE) {
        var lowBits = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        var highBits = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        value = new Date(new Long(lowBits, highBits).toNumber());
      } else if (elementType === BSON_DATA_BOOLEAN) {
        if (buffer2[index] !== 0 && buffer2[index] !== 1)
          throw new BSONError("illegal boolean type value");
        value = buffer2[index++] === 1;
      } else if (elementType === BSON_DATA_OBJECT) {
        var _index = index;
        var objectSize = buffer2[index] | buffer2[index + 1] << 8 | buffer2[index + 2] << 16 | buffer2[index + 3] << 24;
        if (objectSize <= 0 || objectSize > buffer2.length - index)
          throw new BSONError("bad embedded document length in bson");
        if (raw) {
          value = buffer2.slice(index, index + objectSize);
        } else {
          value = deserializeObject(buffer2, _index, options, false);
        }
        index = index + objectSize;
      } else if (elementType === BSON_DATA_ARRAY) {
        var _index = index;
        var objectSize = buffer2[index] | buffer2[index + 1] << 8 | buffer2[index + 2] << 16 | buffer2[index + 3] << 24;
        var arrayOptions = options;
        var stopIndex = index + objectSize;
        if (fieldsAsRaw && fieldsAsRaw[name]) {
          arrayOptions = {};
          for (var n in options) {
            arrayOptions[n] = options[n];
          }
          arrayOptions["raw"] = true;
        }
        value = deserializeObject(buffer2, _index, arrayOptions, true);
        index = index + objectSize;
        if (buffer2[index - 1] !== 0)
          throw new BSONError("invalid array terminator byte");
        if (index !== stopIndex)
          throw new BSONError("corrupted array bson");
      } else if (elementType === BSON_DATA_UNDEFINED) {
        value = void 0;
      } else if (elementType === BSON_DATA_NULL) {
        value = null;
      } else if (elementType === BSON_DATA_LONG) {
        var lowBits = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        var highBits = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        var long = new Long(lowBits, highBits);
        if (promoteLongs && promoteValues === true) {
          value = long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG) ? long.toNumber() : long;
        } else {
          value = long;
        }
      } else if (elementType === BSON_DATA_DECIMAL128) {
        var bytes = buffer_1.alloc(16);
        buffer2.copy(bytes, 0, index, index + 16);
        index = index + 16;
        var decimal128 = new Decimal128(bytes);
        if ("toObject" in decimal128 && typeof decimal128.toObject === "function") {
          value = decimal128.toObject();
        } else {
          value = decimal128;
        }
      } else if (elementType === BSON_DATA_BINARY) {
        var binarySize = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        var totalBinarySize = binarySize;
        var subType = buffer2[index++];
        if (binarySize < 0)
          throw new BSONError("Negative binary type element size found");
        if (binarySize > buffer2.byteLength)
          throw new BSONError("Binary type size larger than document size");
        if (buffer2["slice"] != null) {
          if (subType === Binary.SUBTYPE_BYTE_ARRAY) {
            binarySize = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
            if (binarySize < 0)
              throw new BSONError("Negative binary type element size found for subtype 0x02");
            if (binarySize > totalBinarySize - 4)
              throw new BSONError("Binary type with subtype 0x02 contains too long binary size");
            if (binarySize < totalBinarySize - 4)
              throw new BSONError("Binary type with subtype 0x02 contains too short binary size");
          }
          if (promoteBuffers && promoteValues) {
            value = buffer2.slice(index, index + binarySize);
          } else {
            value = new Binary(buffer2.slice(index, index + binarySize), subType);
          }
        } else {
          var _buffer = buffer_1.alloc(binarySize);
          if (subType === Binary.SUBTYPE_BYTE_ARRAY) {
            binarySize = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
            if (binarySize < 0)
              throw new BSONError("Negative binary type element size found for subtype 0x02");
            if (binarySize > totalBinarySize - 4)
              throw new BSONError("Binary type with subtype 0x02 contains too long binary size");
            if (binarySize < totalBinarySize - 4)
              throw new BSONError("Binary type with subtype 0x02 contains too short binary size");
          }
          for (i = 0; i < binarySize; i++) {
            _buffer[i] = buffer2[index + i];
          }
          if (promoteBuffers && promoteValues) {
            value = _buffer;
          } else {
            value = new Binary(_buffer, subType);
          }
        }
        index = index + binarySize;
      } else if (elementType === BSON_DATA_REGEXP && bsonRegExp === false) {
        i = index;
        while (buffer2[i] !== 0 && i < buffer2.length) {
          i++;
        }
        if (i >= buffer2.length)
          throw new BSONError("Bad BSON Document: illegal CString");
        var source = buffer2.toString("utf8", index, i);
        index = i + 1;
        i = index;
        while (buffer2[i] !== 0 && i < buffer2.length) {
          i++;
        }
        if (i >= buffer2.length)
          throw new BSONError("Bad BSON Document: illegal CString");
        var regExpOptions = buffer2.toString("utf8", index, i);
        index = i + 1;
        var optionsArray = new Array(regExpOptions.length);
        for (i = 0; i < regExpOptions.length; i++) {
          switch (regExpOptions[i]) {
            case "m":
              optionsArray[i] = "m";
              break;
            case "s":
              optionsArray[i] = "g";
              break;
            case "i":
              optionsArray[i] = "i";
              break;
          }
        }
        value = new RegExp(source, optionsArray.join(""));
      } else if (elementType === BSON_DATA_REGEXP && bsonRegExp === true) {
        i = index;
        while (buffer2[i] !== 0 && i < buffer2.length) {
          i++;
        }
        if (i >= buffer2.length)
          throw new BSONError("Bad BSON Document: illegal CString");
        var source = buffer2.toString("utf8", index, i);
        index = i + 1;
        i = index;
        while (buffer2[i] !== 0 && i < buffer2.length) {
          i++;
        }
        if (i >= buffer2.length)
          throw new BSONError("Bad BSON Document: illegal CString");
        var regExpOptions = buffer2.toString("utf8", index, i);
        index = i + 1;
        value = new BSONRegExp(source, regExpOptions);
      } else if (elementType === BSON_DATA_SYMBOL) {
        var stringSize = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        if (stringSize <= 0 || stringSize > buffer2.length - index || buffer2[index + stringSize - 1] !== 0) {
          throw new BSONError("bad string length in bson");
        }
        var symbol = getValidatedString(buffer2, index, index + stringSize - 1);
        value = promoteValues ? symbol : new BSONSymbol(symbol);
        index = index + stringSize;
      } else if (elementType === BSON_DATA_TIMESTAMP) {
        var lowBits = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        var highBits = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        value = new Timestamp(lowBits, highBits);
      } else if (elementType === BSON_DATA_MIN_KEY) {
        value = new MinKey();
      } else if (elementType === BSON_DATA_MAX_KEY) {
        value = new MaxKey();
      } else if (elementType === BSON_DATA_CODE) {
        var stringSize = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        if (stringSize <= 0 || stringSize > buffer2.length - index || buffer2[index + stringSize - 1] !== 0) {
          throw new BSONError("bad string length in bson");
        }
        var functionString = getValidatedString(buffer2, index, index + stringSize - 1);
        if (evalFunctions) {
          if (cacheFunctions) {
            value = isolateEval(functionString, functionCache, object);
          } else {
            value = isolateEval(functionString);
          }
        } else {
          value = new Code(functionString);
        }
        index = index + stringSize;
      } else if (elementType === BSON_DATA_CODE_W_SCOPE) {
        var totalSize = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        if (totalSize < 4 + 4 + 4 + 1) {
          throw new BSONError("code_w_scope total size shorter minimum expected length");
        }
        var stringSize = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        if (stringSize <= 0 || stringSize > buffer2.length - index || buffer2[index + stringSize - 1] !== 0) {
          throw new BSONError("bad string length in bson");
        }
        var functionString = getValidatedString(buffer2, index, index + stringSize - 1);
        index = index + stringSize;
        var _index = index;
        var objectSize = buffer2[index] | buffer2[index + 1] << 8 | buffer2[index + 2] << 16 | buffer2[index + 3] << 24;
        var scopeObject = deserializeObject(buffer2, _index, options, false);
        index = index + objectSize;
        if (totalSize < 4 + 4 + objectSize + stringSize) {
          throw new BSONError("code_w_scope total size is too short, truncating scope");
        }
        if (totalSize > 4 + 4 + objectSize + stringSize) {
          throw new BSONError("code_w_scope total size is too long, clips outer document");
        }
        if (evalFunctions) {
          if (cacheFunctions) {
            value = isolateEval(functionString, functionCache, object);
          } else {
            value = isolateEval(functionString);
          }
          value.scope = scopeObject;
        } else {
          value = new Code(functionString, scopeObject);
        }
      } else if (elementType === BSON_DATA_DBPOINTER) {
        var stringSize = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        if (stringSize <= 0 || stringSize > buffer2.length - index || buffer2[index + stringSize - 1] !== 0)
          throw new BSONError("bad string length in bson");
        if (!validateUtf8(buffer2, index, index + stringSize - 1)) {
          throw new BSONError("Invalid UTF-8 string in BSON document");
        }
        var namespace = buffer2.toString("utf8", index, index + stringSize - 1);
        index = index + stringSize;
        var oidBuffer = buffer_1.alloc(12);
        buffer2.copy(oidBuffer, 0, index, index + 12);
        var oid = new ObjectId(oidBuffer);
        index = index + 12;
        value = new DBRef(namespace, oid);
      } else {
        throw new BSONError("Detected unknown BSON type " + elementType.toString(16) + ' for fieldname "' + name + '"');
      }
      if (name === "__proto__") {
        Object.defineProperty(object, name, {
          value,
          writable: true,
          enumerable: true,
          configurable: true
        });
      } else {
        object[name] = value;
      }
    }
    if (size !== index - startIndex) {
      if (isArray)
        throw new BSONError("corrupt array bson");
      throw new BSONError("corrupt object bson");
    }
    if (!isPossibleDBRef)
      return object;
    if (isDBRefLike(object)) {
      var copy2 = Object.assign({}, object);
      delete copy2.$ref;
      delete copy2.$id;
      delete copy2.$db;
      return new DBRef(object.$ref, object.$id, object.$db, copy2);
    }
    return object;
  }
  function isolateEval(functionString, functionCache2, object) {
    if (!functionCache2)
      return new Function(functionString);
    if (functionCache2[functionString] == null) {
      functionCache2[functionString] = new Function(functionString);
    }
    return functionCache2[functionString].bind(object);
  }
  function getValidatedString(buffer2, start2, end2) {
    var value = buffer2.toString("utf8", start2, end2);
    for (var i = 0; i < value.length; i++) {
      if (value.charCodeAt(i) === 65533) {
        if (!validateUtf8(buffer2, start2, end2)) {
          throw new BSONError("Invalid UTF-8 string in BSON document");
        }
        break;
      }
    }
    return value;
  }
  function writeIEEE754(buffer2, value, offset2, endian, mLen, nBytes) {
    var e;
    var m;
    var c;
    var bBE = endian === "big";
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = bBE ? nBytes - 1 : 0;
    var d = bBE ? -1 : 1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    if (isNaN(value))
      m = 0;
    while (mLen >= 8) {
      buffer2[offset2 + i] = m & 255;
      i += d;
      m /= 256;
      mLen -= 8;
    }
    e = e << mLen | m;
    if (isNaN(value))
      e += 8;
    eLen += mLen;
    while (eLen > 0) {
      buffer2[offset2 + i] = e & 255;
      i += d;
      e /= 256;
      eLen -= 8;
    }
    buffer2[offset2 + i - d] |= s * 128;
  }
  var regexp = /\x00/;
  var ignoreKeys = new Set(["$db", "$ref", "$id", "$clusterTime"]);
  function serializeString(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_STRING;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes + 1;
    buffer2[index - 1] = 0;
    var size = buffer2.write(value, index + 4, void 0, "utf8");
    buffer2[index + 3] = size + 1 >> 24 & 255;
    buffer2[index + 2] = size + 1 >> 16 & 255;
    buffer2[index + 1] = size + 1 >> 8 & 255;
    buffer2[index] = size + 1 & 255;
    index = index + 4 + size;
    buffer2[index++] = 0;
    return index;
  }
  function serializeNumber(buffer2, key, value, index, isArray) {
    if (Number.isInteger(value) && value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {
      buffer2[index++] = BSON_DATA_INT;
      var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
      index = index + numberOfWrittenBytes;
      buffer2[index++] = 0;
      buffer2[index++] = value & 255;
      buffer2[index++] = value >> 8 & 255;
      buffer2[index++] = value >> 16 & 255;
      buffer2[index++] = value >> 24 & 255;
    } else {
      buffer2[index++] = BSON_DATA_NUMBER;
      var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
      index = index + numberOfWrittenBytes;
      buffer2[index++] = 0;
      writeIEEE754(buffer2, value, index, "little", 52, 8);
      index = index + 8;
    }
    return index;
  }
  function serializeNull(buffer2, key, _3, index, isArray) {
    buffer2[index++] = BSON_DATA_NULL;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    return index;
  }
  function serializeBoolean(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_BOOLEAN;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    buffer2[index++] = value ? 1 : 0;
    return index;
  }
  function serializeDate(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_DATE;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    var dateInMilis = Long.fromNumber(value.getTime());
    var lowBits = dateInMilis.getLowBits();
    var highBits = dateInMilis.getHighBits();
    buffer2[index++] = lowBits & 255;
    buffer2[index++] = lowBits >> 8 & 255;
    buffer2[index++] = lowBits >> 16 & 255;
    buffer2[index++] = lowBits >> 24 & 255;
    buffer2[index++] = highBits & 255;
    buffer2[index++] = highBits >> 8 & 255;
    buffer2[index++] = highBits >> 16 & 255;
    buffer2[index++] = highBits >> 24 & 255;
    return index;
  }
  function serializeRegExp(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_REGEXP;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    if (value.source && value.source.match(regexp) != null) {
      throw Error("value " + value.source + " must not contain null bytes");
    }
    index = index + buffer2.write(value.source, index, void 0, "utf8");
    buffer2[index++] = 0;
    if (value.ignoreCase)
      buffer2[index++] = 105;
    if (value.global)
      buffer2[index++] = 115;
    if (value.multiline)
      buffer2[index++] = 109;
    buffer2[index++] = 0;
    return index;
  }
  function serializeBSONRegExp(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_REGEXP;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    if (value.pattern.match(regexp) != null) {
      throw Error("pattern " + value.pattern + " must not contain null bytes");
    }
    index = index + buffer2.write(value.pattern, index, void 0, "utf8");
    buffer2[index++] = 0;
    index = index + buffer2.write(value.options.split("").sort().join(""), index, void 0, "utf8");
    buffer2[index++] = 0;
    return index;
  }
  function serializeMinMax(buffer2, key, value, index, isArray) {
    if (value === null) {
      buffer2[index++] = BSON_DATA_NULL;
    } else if (value._bsontype === "MinKey") {
      buffer2[index++] = BSON_DATA_MIN_KEY;
    } else {
      buffer2[index++] = BSON_DATA_MAX_KEY;
    }
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    return index;
  }
  function serializeObjectId(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_OID;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    if (typeof value.id === "string") {
      buffer2.write(value.id, index, void 0, "binary");
    } else if (isUint8Array(value.id)) {
      buffer2.set(value.id.subarray(0, 12), index);
    } else {
      throw new BSONTypeError("object [" + JSON.stringify(value) + "] is not a valid ObjectId");
    }
    return index + 12;
  }
  function serializeBuffer(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_BINARY;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    var size = value.length;
    buffer2[index++] = size & 255;
    buffer2[index++] = size >> 8 & 255;
    buffer2[index++] = size >> 16 & 255;
    buffer2[index++] = size >> 24 & 255;
    buffer2[index++] = BSON_BINARY_SUBTYPE_DEFAULT;
    buffer2.set(ensureBuffer(value), index);
    index = index + size;
    return index;
  }
  function serializeObject(buffer2, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray, path) {
    if (checkKeys === void 0) {
      checkKeys = false;
    }
    if (depth === void 0) {
      depth = 0;
    }
    if (serializeFunctions === void 0) {
      serializeFunctions = false;
    }
    if (ignoreUndefined === void 0) {
      ignoreUndefined = true;
    }
    if (isArray === void 0) {
      isArray = false;
    }
    if (path === void 0) {
      path = [];
    }
    for (var i = 0; i < path.length; i++) {
      if (path[i] === value)
        throw new BSONError("cyclic dependency detected");
    }
    path.push(value);
    buffer2[index++] = Array.isArray(value) ? BSON_DATA_ARRAY : BSON_DATA_OBJECT;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    var endIndex = serializeInto(buffer2, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);
    path.pop();
    return endIndex;
  }
  function serializeDecimal128(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_DECIMAL128;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    buffer2.set(value.bytes.subarray(0, 16), index);
    return index + 16;
  }
  function serializeLong(buffer2, key, value, index, isArray) {
    buffer2[index++] = value._bsontype === "Long" ? BSON_DATA_LONG : BSON_DATA_TIMESTAMP;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    var lowBits = value.getLowBits();
    var highBits = value.getHighBits();
    buffer2[index++] = lowBits & 255;
    buffer2[index++] = lowBits >> 8 & 255;
    buffer2[index++] = lowBits >> 16 & 255;
    buffer2[index++] = lowBits >> 24 & 255;
    buffer2[index++] = highBits & 255;
    buffer2[index++] = highBits >> 8 & 255;
    buffer2[index++] = highBits >> 16 & 255;
    buffer2[index++] = highBits >> 24 & 255;
    return index;
  }
  function serializeInt32(buffer2, key, value, index, isArray) {
    value = value.valueOf();
    buffer2[index++] = BSON_DATA_INT;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    buffer2[index++] = value & 255;
    buffer2[index++] = value >> 8 & 255;
    buffer2[index++] = value >> 16 & 255;
    buffer2[index++] = value >> 24 & 255;
    return index;
  }
  function serializeDouble(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_NUMBER;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    writeIEEE754(buffer2, value.value, index, "little", 52, 8);
    index = index + 8;
    return index;
  }
  function serializeFunction(buffer2, key, value, index, _checkKeys, _depth, isArray) {
    buffer2[index++] = BSON_DATA_CODE;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    var functionString = normalizedFunctionString(value);
    var size = buffer2.write(functionString, index + 4, void 0, "utf8") + 1;
    buffer2[index] = size & 255;
    buffer2[index + 1] = size >> 8 & 255;
    buffer2[index + 2] = size >> 16 & 255;
    buffer2[index + 3] = size >> 24 & 255;
    index = index + 4 + size - 1;
    buffer2[index++] = 0;
    return index;
  }
  function serializeCode(buffer2, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray) {
    if (checkKeys === void 0) {
      checkKeys = false;
    }
    if (depth === void 0) {
      depth = 0;
    }
    if (serializeFunctions === void 0) {
      serializeFunctions = false;
    }
    if (ignoreUndefined === void 0) {
      ignoreUndefined = true;
    }
    if (isArray === void 0) {
      isArray = false;
    }
    if (value.scope && typeof value.scope === "object") {
      buffer2[index++] = BSON_DATA_CODE_W_SCOPE;
      var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
      index = index + numberOfWrittenBytes;
      buffer2[index++] = 0;
      var startIndex = index;
      var functionString = typeof value.code === "string" ? value.code : value.code.toString();
      index = index + 4;
      var codeSize = buffer2.write(functionString, index + 4, void 0, "utf8") + 1;
      buffer2[index] = codeSize & 255;
      buffer2[index + 1] = codeSize >> 8 & 255;
      buffer2[index + 2] = codeSize >> 16 & 255;
      buffer2[index + 3] = codeSize >> 24 & 255;
      buffer2[index + 4 + codeSize - 1] = 0;
      index = index + codeSize + 4;
      var endIndex = serializeInto(buffer2, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined);
      index = endIndex - 1;
      var totalSize = endIndex - startIndex;
      buffer2[startIndex++] = totalSize & 255;
      buffer2[startIndex++] = totalSize >> 8 & 255;
      buffer2[startIndex++] = totalSize >> 16 & 255;
      buffer2[startIndex++] = totalSize >> 24 & 255;
      buffer2[index++] = 0;
    } else {
      buffer2[index++] = BSON_DATA_CODE;
      var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
      index = index + numberOfWrittenBytes;
      buffer2[index++] = 0;
      var functionString = value.code.toString();
      var size = buffer2.write(functionString, index + 4, void 0, "utf8") + 1;
      buffer2[index] = size & 255;
      buffer2[index + 1] = size >> 8 & 255;
      buffer2[index + 2] = size >> 16 & 255;
      buffer2[index + 3] = size >> 24 & 255;
      index = index + 4 + size - 1;
      buffer2[index++] = 0;
    }
    return index;
  }
  function serializeBinary(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_BINARY;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    var data = value.value(true);
    var size = value.position;
    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY)
      size = size + 4;
    buffer2[index++] = size & 255;
    buffer2[index++] = size >> 8 & 255;
    buffer2[index++] = size >> 16 & 255;
    buffer2[index++] = size >> 24 & 255;
    buffer2[index++] = value.sub_type;
    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {
      size = size - 4;
      buffer2[index++] = size & 255;
      buffer2[index++] = size >> 8 & 255;
      buffer2[index++] = size >> 16 & 255;
      buffer2[index++] = size >> 24 & 255;
    }
    buffer2.set(data, index);
    index = index + value.position;
    return index;
  }
  function serializeSymbol(buffer2, key, value, index, isArray) {
    buffer2[index++] = BSON_DATA_SYMBOL;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    var size = buffer2.write(value.value, index + 4, void 0, "utf8") + 1;
    buffer2[index] = size & 255;
    buffer2[index + 1] = size >> 8 & 255;
    buffer2[index + 2] = size >> 16 & 255;
    buffer2[index + 3] = size >> 24 & 255;
    index = index + 4 + size - 1;
    buffer2[index++] = 0;
    return index;
  }
  function serializeDBRef(buffer2, key, value, index, depth, serializeFunctions, isArray) {
    buffer2[index++] = BSON_DATA_OBJECT;
    var numberOfWrittenBytes = !isArray ? buffer2.write(key, index, void 0, "utf8") : buffer2.write(key, index, void 0, "ascii");
    index = index + numberOfWrittenBytes;
    buffer2[index++] = 0;
    var startIndex = index;
    var output = {
      $ref: value.collection || value.namespace,
      $id: value.oid
    };
    if (value.db != null) {
      output.$db = value.db;
    }
    output = Object.assign(output, value.fields);
    var endIndex = serializeInto(buffer2, output, false, index, depth + 1, serializeFunctions);
    var size = endIndex - startIndex;
    buffer2[startIndex++] = size & 255;
    buffer2[startIndex++] = size >> 8 & 255;
    buffer2[startIndex++] = size >> 16 & 255;
    buffer2[startIndex++] = size >> 24 & 255;
    return endIndex;
  }
  function serializeInto(buffer2, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {
    if (checkKeys === void 0) {
      checkKeys = false;
    }
    if (startingIndex === void 0) {
      startingIndex = 0;
    }
    if (depth === void 0) {
      depth = 0;
    }
    if (serializeFunctions === void 0) {
      serializeFunctions = false;
    }
    if (ignoreUndefined === void 0) {
      ignoreUndefined = true;
    }
    if (path === void 0) {
      path = [];
    }
    startingIndex = startingIndex || 0;
    path = path || [];
    path.push(object);
    var index = startingIndex + 4;
    if (Array.isArray(object)) {
      for (var i = 0; i < object.length; i++) {
        var key = "" + i;
        var value = object[i];
        if (value && value.toBSON) {
          if (typeof value.toBSON !== "function")
            throw new BSONTypeError("toBSON is not a function");
          value = value.toBSON();
        }
        if (typeof value === "string") {
          index = serializeString(buffer2, key, value, index, true);
        } else if (typeof value === "number") {
          index = serializeNumber(buffer2, key, value, index, true);
        } else if (typeof value === "bigint") {
          throw new BSONTypeError("Unsupported type BigInt, please use Decimal128");
        } else if (typeof value === "boolean") {
          index = serializeBoolean(buffer2, key, value, index, true);
        } else if (value instanceof Date || isDate(value)) {
          index = serializeDate(buffer2, key, value, index, true);
        } else if (value === void 0) {
          index = serializeNull(buffer2, key, value, index, true);
        } else if (value === null) {
          index = serializeNull(buffer2, key, value, index, true);
        } else if (value["_bsontype"] === "ObjectId" || value["_bsontype"] === "ObjectID") {
          index = serializeObjectId(buffer2, key, value, index, true);
        } else if (isUint8Array(value)) {
          index = serializeBuffer(buffer2, key, value, index, true);
        } else if (value instanceof RegExp || isRegExp(value)) {
          index = serializeRegExp(buffer2, key, value, index, true);
        } else if (typeof value === "object" && value["_bsontype"] == null) {
          index = serializeObject(buffer2, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true, path);
        } else if (typeof value === "object" && isBSONType(value) && value._bsontype === "Decimal128") {
          index = serializeDecimal128(buffer2, key, value, index, true);
        } else if (value["_bsontype"] === "Long" || value["_bsontype"] === "Timestamp") {
          index = serializeLong(buffer2, key, value, index, true);
        } else if (value["_bsontype"] === "Double") {
          index = serializeDouble(buffer2, key, value, index, true);
        } else if (typeof value === "function" && serializeFunctions) {
          index = serializeFunction(buffer2, key, value, index, checkKeys, depth, true);
        } else if (value["_bsontype"] === "Code") {
          index = serializeCode(buffer2, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true);
        } else if (value["_bsontype"] === "Binary") {
          index = serializeBinary(buffer2, key, value, index, true);
        } else if (value["_bsontype"] === "Symbol") {
          index = serializeSymbol(buffer2, key, value, index, true);
        } else if (value["_bsontype"] === "DBRef") {
          index = serializeDBRef(buffer2, key, value, index, depth, serializeFunctions, true);
        } else if (value["_bsontype"] === "BSONRegExp") {
          index = serializeBSONRegExp(buffer2, key, value, index, true);
        } else if (value["_bsontype"] === "Int32") {
          index = serializeInt32(buffer2, key, value, index, true);
        } else if (value["_bsontype"] === "MinKey" || value["_bsontype"] === "MaxKey") {
          index = serializeMinMax(buffer2, key, value, index, true);
        } else if (typeof value["_bsontype"] !== "undefined") {
          throw new BSONTypeError("Unrecognized or invalid _bsontype: " + value["_bsontype"]);
        }
      }
    } else if (object instanceof bsonMap || isMap(object)) {
      var iterator = object.entries();
      var done = false;
      while (!done) {
        var entry = iterator.next();
        done = !!entry.done;
        if (done)
          continue;
        var key = entry.value[0];
        var value = entry.value[1];
        var type = typeof value;
        if (typeof key === "string" && !ignoreKeys.has(key)) {
          if (key.match(regexp) != null) {
            throw Error("key " + key + " must not contain null bytes");
          }
          if (checkKeys) {
            if (key[0] === "$") {
              throw Error("key " + key + " must not start with '$'");
            } else if (~key.indexOf(".")) {
              throw Error("key " + key + " must not contain '.'");
            }
          }
        }
        if (type === "string") {
          index = serializeString(buffer2, key, value, index);
        } else if (type === "number") {
          index = serializeNumber(buffer2, key, value, index);
        } else if (type === "bigint" || isBigInt64Array(value) || isBigUInt64Array(value)) {
          throw new BSONTypeError("Unsupported type BigInt, please use Decimal128");
        } else if (type === "boolean") {
          index = serializeBoolean(buffer2, key, value, index);
        } else if (value instanceof Date || isDate(value)) {
          index = serializeDate(buffer2, key, value, index);
        } else if (value === null || value === void 0 && ignoreUndefined === false) {
          index = serializeNull(buffer2, key, value, index);
        } else if (value["_bsontype"] === "ObjectId" || value["_bsontype"] === "ObjectID") {
          index = serializeObjectId(buffer2, key, value, index);
        } else if (isUint8Array(value)) {
          index = serializeBuffer(buffer2, key, value, index);
        } else if (value instanceof RegExp || isRegExp(value)) {
          index = serializeRegExp(buffer2, key, value, index);
        } else if (type === "object" && value["_bsontype"] == null) {
          index = serializeObject(buffer2, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);
        } else if (type === "object" && value["_bsontype"] === "Decimal128") {
          index = serializeDecimal128(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Long" || value["_bsontype"] === "Timestamp") {
          index = serializeLong(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Double") {
          index = serializeDouble(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Code") {
          index = serializeCode(buffer2, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
        } else if (typeof value === "function" && serializeFunctions) {
          index = serializeFunction(buffer2, key, value, index, checkKeys, depth, serializeFunctions);
        } else if (value["_bsontype"] === "Binary") {
          index = serializeBinary(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Symbol") {
          index = serializeSymbol(buffer2, key, value, index);
        } else if (value["_bsontype"] === "DBRef") {
          index = serializeDBRef(buffer2, key, value, index, depth, serializeFunctions);
        } else if (value["_bsontype"] === "BSONRegExp") {
          index = serializeBSONRegExp(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Int32") {
          index = serializeInt32(buffer2, key, value, index);
        } else if (value["_bsontype"] === "MinKey" || value["_bsontype"] === "MaxKey") {
          index = serializeMinMax(buffer2, key, value, index);
        } else if (typeof value["_bsontype"] !== "undefined") {
          throw new BSONTypeError("Unrecognized or invalid _bsontype: " + value["_bsontype"]);
        }
      }
    } else {
      if (object.toBSON) {
        if (typeof object.toBSON !== "function")
          throw new BSONTypeError("toBSON is not a function");
        object = object.toBSON();
        if (object != null && typeof object !== "object")
          throw new BSONTypeError("toBSON function did not return an object");
      }
      for (var key in object) {
        var value = object[key];
        if (value && value.toBSON) {
          if (typeof value.toBSON !== "function")
            throw new BSONTypeError("toBSON is not a function");
          value = value.toBSON();
        }
        var type = typeof value;
        if (typeof key === "string" && !ignoreKeys.has(key)) {
          if (key.match(regexp) != null) {
            throw Error("key " + key + " must not contain null bytes");
          }
          if (checkKeys) {
            if (key[0] === "$") {
              throw Error("key " + key + " must not start with '$'");
            } else if (~key.indexOf(".")) {
              throw Error("key " + key + " must not contain '.'");
            }
          }
        }
        if (type === "string") {
          index = serializeString(buffer2, key, value, index);
        } else if (type === "number") {
          index = serializeNumber(buffer2, key, value, index);
        } else if (type === "bigint") {
          throw new BSONTypeError("Unsupported type BigInt, please use Decimal128");
        } else if (type === "boolean") {
          index = serializeBoolean(buffer2, key, value, index);
        } else if (value instanceof Date || isDate(value)) {
          index = serializeDate(buffer2, key, value, index);
        } else if (value === void 0) {
          if (ignoreUndefined === false)
            index = serializeNull(buffer2, key, value, index);
        } else if (value === null) {
          index = serializeNull(buffer2, key, value, index);
        } else if (value["_bsontype"] === "ObjectId" || value["_bsontype"] === "ObjectID") {
          index = serializeObjectId(buffer2, key, value, index);
        } else if (isUint8Array(value)) {
          index = serializeBuffer(buffer2, key, value, index);
        } else if (value instanceof RegExp || isRegExp(value)) {
          index = serializeRegExp(buffer2, key, value, index);
        } else if (type === "object" && value["_bsontype"] == null) {
          index = serializeObject(buffer2, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);
        } else if (type === "object" && value["_bsontype"] === "Decimal128") {
          index = serializeDecimal128(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Long" || value["_bsontype"] === "Timestamp") {
          index = serializeLong(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Double") {
          index = serializeDouble(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Code") {
          index = serializeCode(buffer2, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
        } else if (typeof value === "function" && serializeFunctions) {
          index = serializeFunction(buffer2, key, value, index, checkKeys, depth, serializeFunctions);
        } else if (value["_bsontype"] === "Binary") {
          index = serializeBinary(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Symbol") {
          index = serializeSymbol(buffer2, key, value, index);
        } else if (value["_bsontype"] === "DBRef") {
          index = serializeDBRef(buffer2, key, value, index, depth, serializeFunctions);
        } else if (value["_bsontype"] === "BSONRegExp") {
          index = serializeBSONRegExp(buffer2, key, value, index);
        } else if (value["_bsontype"] === "Int32") {
          index = serializeInt32(buffer2, key, value, index);
        } else if (value["_bsontype"] === "MinKey" || value["_bsontype"] === "MaxKey") {
          index = serializeMinMax(buffer2, key, value, index);
        } else if (typeof value["_bsontype"] !== "undefined") {
          throw new BSONTypeError("Unrecognized or invalid _bsontype: " + value["_bsontype"]);
        }
      }
    }
    path.pop();
    buffer2[index++] = 0;
    var size = index - startingIndex;
    buffer2[startingIndex++] = size & 255;
    buffer2[startingIndex++] = size >> 8 & 255;
    buffer2[startingIndex++] = size >> 16 & 255;
    buffer2[startingIndex++] = size >> 24 & 255;
    return index;
  }
  var MAXSIZE = 1024 * 1024 * 17;
  var buffer = buffer_1.alloc(MAXSIZE);
  function serialize2(object, options) {
    if (options === void 0) {
      options = {};
    }
    var checkKeys = typeof options.checkKeys === "boolean" ? options.checkKeys : false;
    var serializeFunctions = typeof options.serializeFunctions === "boolean" ? options.serializeFunctions : false;
    var ignoreUndefined = typeof options.ignoreUndefined === "boolean" ? options.ignoreUndefined : true;
    var minInternalBufferSize = typeof options.minInternalBufferSize === "number" ? options.minInternalBufferSize : MAXSIZE;
    if (buffer.length < minInternalBufferSize) {
      buffer = buffer_1.alloc(minInternalBufferSize);
    }
    var serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, []);
    var finishedBuffer = buffer_1.alloc(serializationIndex);
    buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);
    return finishedBuffer;
  }
  function deserialize(buffer2, options) {
    if (options === void 0) {
      options = {};
    }
    return deserialize$1(buffer2 instanceof buffer_1 ? buffer2 : ensureBuffer(buffer2), options);
  }

  // src/websocket/ProxyClient.ts
  var import_typed_event_emitter = __toModule(require_dist());

  // src/utils.ts
  var uuid = () => {
    var _a2;
    return ((_a2 = globalThis == null ? void 0 : globalThis.crypto) == null ? void 0 : _a2.randomUUID) ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
      const r = Math.random() * 16 | 0;
      const v = c === "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  };
  var msToTime = (duration2) => {
    const ms = ~~(duration2 % 1e3 / 100);
    const sec = ~~(duration2 / 1e3 % 60);
    const min2 = ~~(duration2 / (1e3 * 60) % 60);
    const hrs = ~~(duration2 / (1e3 * 60 * 60) % 24);
    return `${hrs.toString().padStart(2, "0")}:${min2.toString().padStart(2, "0")}:${sec.toString().padStart(2, "0")}.${ms.toString().padStart(3, "0")}`;
  };

  // src/websocket/TimeoutError.ts
  var TimeoutError = class extends Error {
  };

  // src/websocket/ProxyClient.ts
  var _a;
  var Client = (_a = class extends import_typed_event_emitter.default {
    _connect() {
      var _a2;
      if (this._socket && ((_a2 = this._socket) == null ? void 0 : _a2.readyState) !== WebSocket.CLOSED)
        this._socket.close();
      const Ctor = this.constructor;
      const resolves = {};
      const rejects = {};
      return new Promise((resolve, reject) => {
        var _a3, _b, _c;
        const handleOpen = () => {
          resolve();
          socket.removeEventListener("open", handleOpen);
          socket.removeEventListener("error", handleError);
          socket.addEventListener("message", handleMessage);
          socket.addEventListener("close", handleClose);
        };
        const handleClose = (e) => {
          var _a4;
          socket.removeEventListener("open", handleOpen);
          socket.removeEventListener("error", handleError);
          socket.removeEventListener("message", handleMessage);
          socket.removeEventListener("close", handleClose);
          if (!e.wasClean) {
            (_a4 = this._handleLog) == null ? void 0 : _a4.call(this, { error: true, msg: `Error: WebSocket closed: ${e.code} - ${e.reason}` });
            throw new Error(`WebSocket closed: ${e.code} - ${e.reason}`);
          }
        };
        const handleError = (e) => {
          socket.removeEventListener("open", handleOpen);
          socket.removeEventListener("error", handleError);
          reject(new Error(`WebSocket connect to '${this._serverUrl}' failed.`));
        };
        const handleMessage = async (e) => {
          var _a4, _b2, _c2, _d;
          const data = await e.data.arrayBuffer();
          (_a4 = this._handleLog) == null ? void 0 : _a4.call(this, { msg: `Received: 	${data.byteLength} bytes` });
          const { id, call: call2, args, value, error } = deserialize(data, { promoteBuffers: true });
          if (call2) {
            const r = { id };
            try {
              r.value = await this[call2](...args);
            } catch (e2) {
              r.error = e2.message;
            }
            const data2 = serialize2(r);
            (_b2 = this._handleLog) == null ? void 0 : _b2.call(this, { msg: `Send: 	${call2}	${data2.byteLength} bytes` });
            socket.send(data2);
          } else {
            if (error)
              (_c2 = rejects[id]) == null ? void 0 : _c2.call(rejects, new Error(error));
            else
              (_d = resolves[id]) == null ? void 0 : _d.call(resolves, value);
            delete resolves[id];
            delete rejects[id];
          }
        };
        const call = (call2, ...args) => {
          return new Promise((resolve2, reject2) => {
            var _a4;
            const id = uuid();
            resolves[id] = (arg) => {
              clearTimeout($timeout);
              resolve2(arg);
            };
            rejects[id] = reject2;
            const data = serialize2({ id, call: call2, args });
            (_a4 = this._handleLog) == null ? void 0 : _a4.call(this, { msg: `Send: 	${data.byteLength} bytes` });
            socket.send(data);
            const $timeout = setTimeout(() => {
              var _a5;
              delete resolves[id];
              delete rejects[id];
              (_a5 = this._handleLog) == null ? void 0 : _a5.call(this, { error: true, msg: `Socket Response Timeout: ${Ctor.timeout}ms.` });
              reject2(new TimeoutError(`Socket Response Timeout: ${Ctor.timeout}ms.`));
            }, Ctor.timeout);
          });
        };
        (_a3 = this._handleLog) == null ? void 0 : _a3.call(this, { msg: `Initializing client on ${this._serverUrl}` });
        let socket;
        try {
          socket = new WebSocket(this._serverUrl);
          (_b = this._handleLog) == null ? void 0 : _b.call(this, { msg: `Client connecting on ${this._serverUrl}` });
        } catch (error) {
          (_c = this._handleLog) == null ? void 0 : _c.call(this, { error: true, msg: `Error on Initializing client on ${this._serverUrl}: ${error.message}` });
          reject(error);
        }
        Ctor.fnNames.forEach((name) => this[name] = (...args) => call(name, ...args));
        socket.addEventListener("open", handleOpen);
        socket.addEventListener("error", handleError);
        this._socket = socket;
      });
    }
    _disconnect() {
      var _a2;
      if (this._socket && ((_a2 = this._socket) == null ? void 0 : _a2.readyState) !== WebSocket.CLOSED)
        this._socket.close();
    }
  }, _a.fnNames = [], _a.timeout = 5e3, _a);
  var ProxyClient_default = Client;

  // src/BackendClient.ts
  var BackendClient = class extends ProxyClient_default {
  };
  BackendClient.fnNames = ["getInfo", "ping"];

  // src/BackendUI.tsx
  var client = new BackendClient();
  client._serverUrl = "ws://localhost:18011";
  var App = () => {
    const [fetchFreq, setFetchFreq] = React223.useState(2e3);
    const [isConnected, setConnected] = React223.useState(false);
    const [serverInfo, setServerInfo] = React223.useState(null);
    const [errors, setErrors] = React223.useState("");
    const [pass, setPass] = React223.useState("JSPatch37");
    const onChangePass = (e) => setPass(e.target.value);
    const onChangeFreq = (e) => setFetchFreq(+e.target.value);
    React223.useEffect(() => {
      var _a2;
      const isOpen = ((_a2 = client._socket) == null ? void 0 : _a2.readyState) === WebSocket.OPEN;
      setConnected(isOpen);
      const handleOpen = () => setConnected(true);
      const handleClose = () => setConnected(false);
      let $checkState = null;
      const checkState = async () => {
        var _a3, _b;
        try {
          if (!client._socket || ((_a3 = client._socket) == null ? void 0 : _a3.readyState) === WebSocket.CLOSED || ((_b = client._socket) == null ? void 0 : _b.readyState) === WebSocket.CLOSING) {
            const $con = client._connect();
            client._socket.addEventListener("open", handleOpen);
            client._socket.addEventListener("close", handleClose);
            await $con;
          }
          setErrors("");
          const serverInfo2 = await client.getInfo(pass);
          globalThis.serverInfo = serverInfo2;
          setServerInfo(serverInfo2);
        } catch (error) {
          setErrors(error.message);
        }
        $checkState = window.setTimeout(checkState, 2e3);
      };
      checkState();
      return () => {
        var _a3, _b;
        (_a3 = client._socket) == null ? void 0 : _a3.removeEventListener("open", handleOpen);
        (_b = client._socket) == null ? void 0 : _b.removeEventListener("close", handleClose);
        window.clearTimeout($checkState);
      };
    }, []);
    return /* @__PURE__ */ React223.createElement(React223.Fragment, null, /* @__PURE__ */ React223.createElement(Grid_default, {
      container: true,
      spacing: 1,
      direction: "column",
      width: "100%",
      padding: "20px"
    }, /* @__PURE__ */ React223.createElement(Grid_default, {
      container: true,
      spacing: 1,
      direction: "row"
    }, /* @__PURE__ */ React223.createElement(Grid_default, {
      item: true,
      xs: 4
    }, isConnected ? /* @__PURE__ */ React223.createElement(Alert_default, {
      severity: "success"
    }, `Server up: ${msToTime((serverInfo == null ? void 0 : serverInfo.upTime) || 0)}`) : /* @__PURE__ */ React223.createElement(Alert_default, {
      severity: "warning"
    }, "Not connected")), /* @__PURE__ */ React223.createElement(Grid_default, {
      item: true,
      xs: 8
    }, /* @__PURE__ */ React223.createElement(Box_default, {
      component: "form",
      sx: { "& .MuiTextField-root": { m: 1 } }
    }, /* @__PURE__ */ React223.createElement(TextField_default, {
      multiline: true,
      size: "small",
      id: "freq",
      label: "Fetch Freq (ms)",
      type: "number",
      value: fetchFreq,
      onChange: onChangeFreq
    }), /* @__PURE__ */ React223.createElement(TextField_default, {
      multiline: true,
      size: "small",
      type: "password",
      label: "Password",
      id: "pass",
      value: pass,
      onChange: onChangePass
    })))), serverInfo ? /* @__PURE__ */ React223.createElement(Grid_default, {
      container: true,
      direction: "column"
    }, /* @__PURE__ */ React223.createElement(DataGrid2, {
      autoHeight: true,
      density: "compact",
      rows: serverInfo.users,
      columns: [
        { field: "id", headerName: "ID", width: 300 },
        { field: "nickname", headerName: "Nick name", width: 120 },
        { field: "ping", headerName: "Ping", type: "number", width: 90 }
      ]
    }), serverInfo.rooms.map((room) => {
      var _a2;
      return /* @__PURE__ */ React223.createElement(Grid_default, {
        key: room.id,
        container: true,
        direction: "row"
      }, /* @__PURE__ */ React223.createElement(DataGrid2, {
        hideFooter: true,
        autoHeight: true,
        density: "compact",
        rows: [{ id: room.id, permission: room.permission, owner: (_a2 = serverInfo.users.find(({ id }) => id === room.owner)) == null ? void 0 : _a2.nickname }],
        columns: [
          { field: "id", headerName: "Room ID", width: 300 },
          { field: "permission", headerName: "Permission", width: 90 },
          { field: "owner", headerName: "Owner", width: 90 }
        ]
      }), /* @__PURE__ */ React223.createElement(Grid_default, {
        container: true,
        direction: "row",
        minHeight: "300px"
      }, /* @__PURE__ */ React223.createElement(Grid_default, {
        item: true,
        xs: 6
      }, /* @__PURE__ */ React223.createElement(DataGrid2, {
        initialState: { pagination: { pageSize: 5 } },
        rowsPerPageOptions: [5, 10, 50, 100],
        density: "compact",
        rows: room.clients.map((clientId) => serverInfo.users.find(({ id }) => id === clientId)),
        columns: [
          { field: "id", headerName: "ID", width: 300 },
          { field: "nickname", headerName: "Nick name", width: 120 },
          { field: "ping", headerName: "Ping", type: "number", width: 90 },
          { field: "timeOffset", headerName: "Time Offset", width: 90, valueFormatter: (v) => msToTime(+v) }
        ]
      })), /* @__PURE__ */ React223.createElement(Grid_default, {
        item: true,
        xs: 6
      }, /* @__PURE__ */ React223.createElement(DataGrid2, {
        initialState: { pagination: { pageSize: 5 } },
        rowsPerPageOptions: [5, 10, 50, 100],
        density: "compact",
        rows: room.project,
        getRowId: (row) => row.id,
        columns: [
          { field: "path", headerName: "Path", width: 150, valueFormatter: (v) => v.value.replace(/^\/project\//, "") || "." },
          { field: "size", headerName: "Size", type: "number", width: 90 },
          { field: "length", headerName: "Hist", type: "number", width: 90 },
          { field: "$", headerName: "Cur", type: "number", width: 90 },
          { field: "states", headerName: "States", type: "number", width: 90 }
        ]
      }))));
    })) : void 0, errors ? /* @__PURE__ */ React223.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ React223.createElement(Alert_default, {
      severity: "error"
    }, errors)) : void 0));
  };
  ReactDOM5.createRoot(document.getElementById("root")).render(/* @__PURE__ */ React223.createElement(App, null));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license MUI v5.0.0-alpha.79
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license MUI v5.6.1
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license MUI v5.6.2
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license MUI v5.6.4
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=index.js.map
